-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity merge is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    arr_0_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    arr_0_ce0 : OUT STD_LOGIC;
    arr_0_we0 : OUT STD_LOGIC;
    arr_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    arr_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    arr_1_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    arr_1_ce0 : OUT STD_LOGIC;
    arr_1_we0 : OUT STD_LOGIC;
    arr_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    arr_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    l : IN STD_LOGIC_VECTOR (31 downto 0);
    m : IN STD_LOGIC_VECTOR (31 downto 0);
    r : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of merge is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal n1_fu_367_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal n1_reg_633 : STD_LOGIC_VECTOR (31 downto 0);
    signal n2_fu_373_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal n2_reg_640 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_388_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_reg_650 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln52_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_420_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_reg_668 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln58_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_load_reg_697 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_1_load_reg_703 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln71_fu_479_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln71_reg_712 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln69_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln71_1_fu_484_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln71_1_reg_722 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_fu_519_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_732 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln71_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln71_reg_737 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal sext_ln79_fu_531_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln79_reg_741 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln84_fu_556_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln88_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_573_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_4_reg_775 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_3_fu_585_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln98_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_4_fu_602_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_4_reg_798 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_4_fu_614_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal L_0_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal L_0_ce0 : STD_LOGIC;
    signal L_0_we0 : STD_LOGIC;
    signal L_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal L_1_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal L_1_ce0 : STD_LOGIC;
    signal L_1_we0 : STD_LOGIC;
    signal L_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_0_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal R_0_ce0 : STD_LOGIC;
    signal R_0_we0 : STD_LOGIC;
    signal R_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_1_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal R_1_ce0 : STD_LOGIC;
    signal R_1_we0 : STD_LOGIC;
    signal R_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_288 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_0_reg_300 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal indvars_iv_reg_312 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_reg_322 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_reg_331 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_3_reg_342 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_2_reg_351 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln54_fu_399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln60_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln60_fu_451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr_1_addr_2_gep_fu_219_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln90_fu_567_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln90_1_fu_579_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln100_fu_596_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln100_1_fu_608_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_fu_52 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_fu_546_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_56 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_536_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln44_fu_361_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln52_fu_379_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln54_fu_394_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln58_fu_411_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln60_1_fu_426_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln60_1_fu_430_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln69_fu_463_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln69_1_fu_468_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln69_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_1_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln71_fu_479_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln71_1_fu_484_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln88_fu_489_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_499_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln88_fu_494_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal smax_fu_505_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln88_1_fu_513_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln88_1_fu_513_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal smax_fu_505_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component merge_L_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    L_0_U : component merge_L_0
    generic map (
        DataWidth => 32,
        AddressRange => 60000,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => L_0_address0,
        ce0 => L_0_ce0,
        we0 => L_0_we0,
        d0 => arr_0_q0,
        q0 => L_0_q0);

    L_1_U : component merge_L_0
    generic map (
        DataWidth => 32,
        AddressRange => 60000,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => L_1_address0,
        ce0 => L_1_ce0,
        we0 => L_1_we0,
        d0 => arr_1_q0,
        q0 => L_1_q0);

    R_0_U : component merge_L_0
    generic map (
        DataWidth => 32,
        AddressRange => 60000,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => R_0_address0,
        ce0 => R_0_ce0,
        we0 => R_0_we0,
        d0 => arr_0_q0,
        q0 => R_0_q0);

    R_1_U : component merge_L_0
    generic map (
        DataWidth => 32,
        AddressRange => 60000,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => R_1_address0,
        ce0 => R_1_ce0,
        we0 => R_1_we0,
        d0 => arr_1_q0,
        q0 => R_1_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_288 <= i_reg_650;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_288 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i_1_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln71_fu_525_p2 = ap_const_lv1_0))) then 
                i_1_fu_56 <= i_2_fu_536_p2;
            elsif (((icmp_ln58_fu_415_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_1_fu_56 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_3_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_3_reg_322 <= i_4_reg_775;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = and_ln69_fu_473_p2))) then 
                i_3_reg_322 <= i_1_fu_56;
            end if; 
        end if;
    end process;

    indvars_iv_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_fu_415_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                indvars_iv_reg_312 <= l;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                indvars_iv_reg_312 <= add_ln84_fu_556_p2;
            end if; 
        end if;
    end process;

    j_0_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_383_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_300 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_0_reg_300 <= j_reg_668;
            end if; 
        end if;
    end process;

    j_1_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln71_reg_737 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                j_1_fu_52 <= j_2_fu_546_p2;
            elsif (((icmp_ln58_fu_415_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_1_fu_52 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    j_3_reg_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln88_fu_562_p2 = ap_const_lv1_0))) then 
                j_3_reg_342 <= j_1_load_reg_697;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                j_3_reg_342 <= j_4_reg_798;
            end if; 
        end if;
    end process;

    k_1_reg_331_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                k_1_reg_331 <= k_3_fu_585_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = and_ln69_fu_473_p2))) then 
                k_1_reg_331 <= indvars_iv_reg_312;
            end if; 
        end if;
    end process;

    k_2_reg_351_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln88_fu_562_p2 = ap_const_lv1_0))) then 
                k_2_reg_351 <= k_reg_732;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                k_2_reg_351 <= k_4_fu_614_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_1_load_reg_703 <= i_1_fu_56;
                j_1_load_reg_697 <= j_1_fu_52;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln88_fu_562_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                i_4_reg_775 <= i_4_fu_573_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_650 <= i_fu_388_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                icmp_ln71_reg_737 <= icmp_ln71_fu_525_p2;
                sext_ln79_reg_741 <= sext_ln79_fu_531_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln98_fu_591_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                j_4_reg_798 <= j_4_fu_602_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_reg_668 <= j_fu_420_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = and_ln69_fu_473_p2))) then
                k_reg_732 <= k_fu_519_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                n1_reg_633 <= n1_fu_367_p2;
                n2_reg_640 <= n2_fu_373_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln69_fu_473_p2) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                sext_ln71_1_reg_722 <= sext_ln71_1_fu_484_p1;
                sext_ln71_reg_712 <= sext_ln71_fu_479_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln52_fu_383_p2, ap_CS_fsm_state4, icmp_ln58_fu_415_p2, ap_CS_fsm_state6, and_ln69_fu_473_p2, ap_CS_fsm_state9, icmp_ln88_fu_562_p2, ap_CS_fsm_state11, icmp_ln98_fu_591_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln52_fu_383_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln58_fu_415_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = and_ln69_fu_473_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln88_fu_562_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln98_fu_591_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;

    L_0_address0_assign_proc : process(ap_CS_fsm_state6, sext_ln71_fu_479_p1, ap_CS_fsm_state9, ap_CS_fsm_state3, zext_ln54_fu_405_p1, sext_ln90_fu_567_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            L_0_address0 <= sext_ln90_fu_567_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            L_0_address0 <= sext_ln71_fu_479_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            L_0_address0 <= zext_ln54_fu_405_p1(16 - 1 downto 0);
        else 
            L_0_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    L_0_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            L_0_ce0 <= ap_const_logic_1;
        else 
            L_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    L_0_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            L_0_we0 <= ap_const_logic_1;
        else 
            L_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    L_1_address0_assign_proc : process(sext_ln71_reg_712, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state3, zext_ln54_fu_405_p1, sext_ln90_fu_567_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            L_1_address0 <= sext_ln90_fu_567_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            L_1_address0 <= sext_ln71_reg_712(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            L_1_address0 <= zext_ln54_fu_405_p1(16 - 1 downto 0);
        else 
            L_1_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    L_1_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            L_1_ce0 <= ap_const_logic_1;
        else 
            L_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    L_1_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            L_1_we0 <= ap_const_logic_1;
        else 
            L_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    R_0_address0_assign_proc : process(ap_CS_fsm_state6, sext_ln71_1_fu_484_p1, ap_CS_fsm_state11, ap_CS_fsm_state5, zext_ln60_fu_451_p1, sext_ln100_fu_596_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            R_0_address0 <= sext_ln100_fu_596_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            R_0_address0 <= sext_ln71_1_fu_484_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            R_0_address0 <= zext_ln60_fu_451_p1(16 - 1 downto 0);
        else 
            R_0_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    R_0_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            R_0_ce0 <= ap_const_logic_1;
        else 
            R_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    R_0_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            R_0_we0 <= ap_const_logic_1;
        else 
            R_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    R_1_address0_assign_proc : process(sext_ln71_1_reg_722, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state5, zext_ln60_fu_451_p1, sext_ln100_fu_596_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            R_1_address0 <= sext_ln100_fu_596_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            R_1_address0 <= sext_ln71_1_reg_722(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            R_1_address0 <= zext_ln60_fu_451_p1(16 - 1 downto 0);
        else 
            R_1_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    R_1_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            R_1_ce0 <= ap_const_logic_1;
        else 
            R_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    R_1_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            R_1_we0 <= ap_const_logic_1;
        else 
            R_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln54_fu_394_p2 <= std_logic_vector(unsigned(zext_ln52_fu_379_p1) + unsigned(l));
    add_ln60_1_fu_430_p2 <= std_logic_vector(unsigned(zext_ln60_1_fu_426_p1) + unsigned(m));
    add_ln84_fu_556_p2 <= std_logic_vector(signed(indvars_iv_reg_312) + signed(ap_const_lv32_1));
    add_ln88_fu_494_p2 <= std_logic_vector(unsigned(sub_ln88_fu_489_p2) + unsigned(m));
    and_ln69_fu_473_p2 <= (icmp_ln69_fu_463_p2 and icmp_ln69_1_fu_468_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11, icmp_ln98_fu_591_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln98_fu_591_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11, icmp_ln98_fu_591_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln98_fu_591_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    arr_0_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln71_fu_525_p2, ap_CS_fsm_state7, sext_ln79_fu_531_p1, ap_CS_fsm_state10, ap_CS_fsm_state12, sext_ln54_fu_399_p1, sext_ln60_fu_435_p1, sext_ln90_1_fu_579_p1, sext_ln100_1_fu_608_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            arr_0_address0 <= sext_ln100_1_fu_608_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            arr_0_address0 <= sext_ln90_1_fu_579_p1(16 - 1 downto 0);
        elsif ((((icmp_ln71_fu_525_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln71_fu_525_p2 = ap_const_lv1_0)))) then 
            arr_0_address0 <= sext_ln79_fu_531_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            arr_0_address0 <= sext_ln60_fu_435_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            arr_0_address0 <= sext_ln54_fu_399_p1(16 - 1 downto 0);
        else 
            arr_0_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    arr_0_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln71_fu_525_p2, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((icmp_ln71_fu_525_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln71_fu_525_p2 = ap_const_lv1_0)))) then 
            arr_0_ce0 <= ap_const_logic_1;
        else 
            arr_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    arr_0_d0_assign_proc : process(icmp_ln71_fu_525_p2, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state12, L_0_q0, R_0_q0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln71_fu_525_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            arr_0_d0 <= R_0_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln71_fu_525_p2 = ap_const_lv1_0)))) then 
            arr_0_d0 <= L_0_q0;
        else 
            arr_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    arr_0_we0_assign_proc : process(icmp_ln71_fu_525_p2, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((icmp_ln71_fu_525_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln71_fu_525_p2 = ap_const_lv1_0)))) then 
            arr_0_we0 <= ap_const_logic_1;
        else 
            arr_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    arr_1_addr_2_gep_fu_219_p3 <= sext_ln79_reg_741(16 - 1 downto 0);

    arr_1_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln71_reg_737, sext_ln79_reg_741, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, sext_ln54_fu_399_p1, sext_ln60_fu_435_p1, arr_1_addr_2_gep_fu_219_p3, sext_ln90_1_fu_579_p1, sext_ln100_1_fu_608_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            arr_1_address0 <= sext_ln100_1_fu_608_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            arr_1_address0 <= sext_ln90_1_fu_579_p1(16 - 1 downto 0);
        elsif (((icmp_ln71_reg_737 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            arr_1_address0 <= arr_1_addr_2_gep_fu_219_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln71_reg_737 = ap_const_lv1_0))) then 
            arr_1_address0 <= sext_ln79_reg_741(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            arr_1_address0 <= sext_ln60_fu_435_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            arr_1_address0 <= sext_ln54_fu_399_p1(16 - 1 downto 0);
        else 
            arr_1_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    arr_1_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln71_reg_737, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((icmp_ln71_reg_737 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln71_reg_737 = ap_const_lv1_0)))) then 
            arr_1_ce0 <= ap_const_logic_1;
        else 
            arr_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    arr_1_d0_assign_proc : process(icmp_ln71_reg_737, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, L_1_q0, R_1_q0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln71_reg_737 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            arr_1_d0 <= R_1_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln71_reg_737 = ap_const_lv1_0)))) then 
            arr_1_d0 <= L_1_q0;
        else 
            arr_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    arr_1_we0_assign_proc : process(icmp_ln71_reg_737, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((icmp_ln71_reg_737 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln71_reg_737 = ap_const_lv1_0)))) then 
            arr_1_we0 <= ap_const_logic_1;
        else 
            arr_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_499_p0 <= i_1_fu_56;
    empty_fu_499_p2 <= "1" when (signed(empty_fu_499_p0) > signed(add_ln88_fu_494_p2)) else "0";
    i_2_fu_536_p2 <= std_logic_vector(signed(i_1_load_reg_703) + signed(ap_const_lv32_1));
    i_4_fu_573_p2 <= std_logic_vector(signed(i_3_reg_322) + signed(ap_const_lv32_1));
    i_fu_388_p2 <= std_logic_vector(unsigned(i_0_reg_288) + unsigned(ap_const_lv31_1));
    icmp_ln52_fu_383_p2 <= "1" when (signed(zext_ln52_fu_379_p1) < signed(n1_reg_633)) else "0";
    icmp_ln58_fu_415_p2 <= "1" when (signed(zext_ln58_fu_411_p1) < signed(n2_reg_640)) else "0";
    icmp_ln69_1_fu_468_p0 <= j_1_fu_52;
    icmp_ln69_1_fu_468_p2 <= "1" when (signed(icmp_ln69_1_fu_468_p0) < signed(n2_reg_640)) else "0";
    icmp_ln69_fu_463_p0 <= i_1_fu_56;
    icmp_ln69_fu_463_p2 <= "1" when (signed(icmp_ln69_fu_463_p0) < signed(n1_reg_633)) else "0";
    icmp_ln71_fu_525_p2 <= "1" when (signed(L_0_q0) > signed(R_0_q0)) else "0";
    icmp_ln88_fu_562_p2 <= "1" when (signed(i_3_reg_322) < signed(n1_reg_633)) else "0";
    icmp_ln98_fu_591_p2 <= "1" when (signed(j_3_reg_342) < signed(n2_reg_640)) else "0";
    j_2_fu_546_p2 <= std_logic_vector(signed(j_1_load_reg_697) + signed(ap_const_lv32_1));
    j_4_fu_602_p2 <= std_logic_vector(signed(j_3_reg_342) + signed(ap_const_lv32_1));
    j_fu_420_p2 <= std_logic_vector(unsigned(j_0_reg_300) + unsigned(ap_const_lv31_1));
    k_3_fu_585_p2 <= std_logic_vector(signed(k_1_reg_331) + signed(ap_const_lv32_1));
    k_4_fu_614_p2 <= std_logic_vector(signed(k_2_reg_351) + signed(ap_const_lv32_1));
    k_fu_519_p2 <= std_logic_vector(unsigned(sub_ln88_1_fu_513_p2) + unsigned(smax_fu_505_p3));
    n1_fu_367_p2 <= std_logic_vector(unsigned(sub_ln44_fu_361_p2) + unsigned(ap_const_lv32_1));
    n2_fu_373_p2 <= std_logic_vector(unsigned(r) - unsigned(m));
        sext_ln100_1_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(k_2_reg_351),64));

        sext_ln100_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_3_reg_342),64));

        sext_ln54_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln54_fu_394_p2),64));

        sext_ln60_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln60_1_fu_430_p2),64));

    sext_ln71_1_fu_484_p0 <= j_1_fu_52;
        sext_ln71_1_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln71_1_fu_484_p0),64));

    sext_ln71_fu_479_p0 <= i_1_fu_56;
        sext_ln71_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln71_fu_479_p0),64));

        sext_ln79_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(indvars_iv_reg_312),64));

        sext_ln90_1_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(k_1_reg_331),64));

        sext_ln90_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_3_reg_322),64));

    smax_fu_505_p1 <= i_1_fu_56;
    smax_fu_505_p3 <= 
        smax_fu_505_p1 when (empty_fu_499_p2(0) = '1') else 
        add_ln88_fu_494_p2;
    sub_ln44_fu_361_p2 <= std_logic_vector(unsigned(m) - unsigned(l));
    sub_ln88_1_fu_513_p1 <= i_1_fu_56;
    sub_ln88_1_fu_513_p2 <= std_logic_vector(signed(indvars_iv_reg_312) - signed(sub_ln88_1_fu_513_p1));
    sub_ln88_fu_489_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) - unsigned(l));
    zext_ln52_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_288),32));
    zext_ln54_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_288),64));
    zext_ln58_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_300),32));
    zext_ln60_1_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_fu_420_p2),32));
    zext_ln60_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_300),64));
end behav;
