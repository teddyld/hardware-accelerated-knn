-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity knn_train_33_rom is 
    generic(
             DWIDTH     : integer := 8; 
             AWIDTH     : integer := 13; 
             MEM_SIZE    : integer := 6000
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of knn_train_33_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 to 1=> "00000000", 2 => "00000001", 3 to 15=> "00000000", 16 => "11000000", 
    17 to 37=> "00000000", 38 => "10000000", 39 to 67=> "00000000", 68 => "10000000", 
    69 to 100=> "00000000", 101 => "00000001", 102 to 107=> "00000000", 108 => "10000000", 
    109 => "11100000", 110 to 113=> "00000000", 114 => "10000000", 115 to 120=> "00000000", 
    121 => "10000000", 122 to 149=> "00000000", 150 => "10000000", 151 to 208=> "00000000", 
    209 => "10000000", 210 to 228=> "00000000", 229 => "10000000", 230 to 245=> "00000000", 
    246 => "10000000", 247 to 248=> "00000000", 249 => "10000000", 250 to 258=> "00000000", 
    259 => "00000001", 260 => "10000000", 261 to 272=> "00000000", 273 => "00000001", 
    274 to 282=> "00000000", 283 => "10000000", 284 to 311=> "00000000", 312 => "11000000", 
    313 to 337=> "00000000", 338 => "10000000", 339 to 428=> "00000000", 429 => "10000000", 
    430 to 434=> "00000000", 435 => "10000000", 436 to 439=> "00000000", 440 => "10000000", 
    441 to 452=> "00000000", 453 => "10000000", 454 to 463=> "00000000", 464 => "10000000", 
    465 to 505=> "00000000", 506 => "11000000", 507 to 516=> "00000000", 517 => "10000000", 
    518 to 525=> "00000000", 526 => "10000000", 527 to 657=> "00000000", 658 => "10000000", 
    659 to 669=> "00000000", 670 => "10000000", 671 to 729=> "00000000", 730 => "11000000", 
    731 to 758=> "00000000", 759 => "10000000", 760 to 769=> "00000000", 770 => "10000000", 
    771 to 871=> "00000000", 872 => "10000000", 873 to 983=> "00000000", 984 => "10000000", 
    985 to 1027=> "00000000", 1028 => "10000000", 1029 to 1179=> "00000000", 1180 => "10000000", 
    1181 to 1189=> "00000000", 1190 => "10000000", 1191 to 1212=> "00000000", 1213 => "10000000", 
    1214 => "00000000", 1215 => "10000000", 1216 to 1218=> "00000000", 1219 => "10000000", 
    1220 to 1238=> "00000000", 1239 => "11000000", 1240 to 1258=> "00000000", 1259 => "01100000", 
    1260 to 1265=> "00000000", 1266 => "10000000", 1267 to 1275=> "00000000", 1276 => "10000000", 
    1277 to 1362=> "00000000", 1363 => "10000000", 1364 to 1365=> "00000000", 1366 => "10000000", 
    1367 to 1379=> "00000000", 1380 => "00000001", 1381 to 1385=> "00000000", 1386 => "10000000", 
    1387 to 1410=> "00000000", 1411 => "10000000", 1412 to 1447=> "00000000", 1448 => "10000000", 
    1449 to 1460=> "00000000", 1461 => "10000000", 1462 to 1465=> "00000000", 1466 => "11000000", 
    1467 to 1476=> "00000000", 1477 => "11000000", 1478 to 1521=> "00000000", 1522 => "00000001", 
    1523 to 1530=> "00000000", 1531 => "10000000", 1532 to 1536=> "00000000", 1537 to 1538=> "10000000", 
    1539 to 1540=> "00000000", 1541 => "10000000", 1542 to 1572=> "00000000", 1573 => "10000000", 
    1574 to 1585=> "00000000", 1586 => "11000000", 1587 to 1589=> "00000000", 1590 => "10000000", 
    1591 to 1594=> "00000000", 1595 => "00000001", 1596 to 1661=> "00000000", 1662 => "10000000", 
    1663 to 1671=> "00000000", 1672 => "00000001", 1673 to 1677=> "00000000", 1678 => "10000000", 
    1679 to 1687=> "00000000", 1688 => "10000000", 1689 to 1722=> "00000000", 1723 => "10000000", 
    1724 => "00000000", 1725 => "10000000", 1726 to 1797=> "00000000", 1798 => "10000000", 
    1799 to 1827=> "00000000", 1828 => "10000000", 1829 to 1860=> "00000000", 1861 => "10000000", 
    1862 to 1875=> "00000000", 1876 => "10000000", 1877 to 1915=> "00000000", 1916 => "10000000", 
    1917 to 1951=> "00000000", 1952 => "10000000", 1953 to 2008=> "00000000", 2009 => "10000000", 
    2010 to 2018=> "00000000", 2019 => "10000000", 2020 to 2070=> "00000000", 2071 => "10000000", 
    2072 to 2120=> "00000000", 2121 => "10000000", 2122 to 2125=> "00000000", 2126 => "10000000", 
    2127 to 2194=> "00000000", 2195 => "10000000", 2196 to 2233=> "00000000", 2234 => "10000000", 
    2235 to 2252=> "00000000", 2253 => "10000000", 2254 to 2256=> "00000000", 2257 => "10000000", 
    2258 to 2297=> "00000000", 2298 => "10000000", 2299 to 2323=> "00000000", 2324 => "11000000", 
    2325 => "10000000", 2326 to 2351=> "00000000", 2352 to 2353=> "10000000", 2354 to 2380=> "00000000", 
    2381 => "10000000", 2382 to 2395=> "00000000", 2396 => "10000000", 2397 to 2419=> "00000000", 
    2420 => "00000001", 2421 to 2449=> "00000000", 2450 => "11000000", 2451 to 2472=> "00000000", 
    2473 => "10000000", 2474 to 2486=> "00000000", 2487 => "10000000", 2488 to 2489=> "00000000", 
    2490 => "11000000", 2491 to 2531=> "00000000", 2532 to 2533=> "11000000", 2534 to 2547=> "00000000", 
    2548 => "00000111", 2549 to 2605=> "00000000", 2606 => "10000000", 2607 to 2635=> "00000000", 
    2636 => "10000000", 2637 to 2658=> "00000000", 2659 => "00000001", 2660 to 2692=> "00000000", 
    2693 => "10000000", 2694 to 2701=> "00000000", 2702 => "00000001", 2703 to 2735=> "00000000", 
    2736 => "10000000", 2737 to 2744=> "00000000", 2745 => "10000000", 2746 to 2764=> "00000000", 
    2765 => "10000000", 2766 to 2771=> "00000000", 2772 => "00000001", 2773 to 2778=> "00000000", 
    2779 => "10000000", 2780 to 2835=> "00000000", 2836 => "10000000", 2837 to 2878=> "00000000", 
    2879 => "00000001", 2880 => "10000000", 2881 to 2891=> "00000000", 2892 => "00000001", 
    2893 to 2896=> "00000000", 2897 => "10000000", 2898 => "00000000", 2899 => "10000000", 
    2900 to 2933=> "00000000", 2934 => "00000001", 2935 to 2951=> "00000000", 2952 => "10000000", 
    2953 to 3011=> "00000000", 3012 => "10000000", 3013 to 3014=> "00000000", 3015 to 3016=> "10000000", 
    3017 to 3034=> "00000000", 3035 => "10000000", 3036 to 3105=> "00000000", 3106 => "10000000", 
    3107 to 3197=> "00000000", 3198 => "10000000", 3199 to 3213=> "00000000", 3214 => "10000000", 
    3215 to 3246=> "00000000", 3247 => "00000001", 3248 to 3327=> "00000000", 3328 => "10000000", 
    3329 => "00000000", 3330 => "10000000", 3331 to 3333=> "00000000", 3334 => "10000000", 
    3335 to 3375=> "00000000", 3376 => "10000000", 3377 to 3380=> "00000000", 3381 => "10000000", 
    3382 to 3390=> "00000000", 3391 => "10000000", 3392 to 3408=> "00000000", 3409 => "10000000", 
    3410 to 3412=> "00000000", 3413 => "10000000", 3414 to 3423=> "00000000", 3424 => "00000001", 
    3425 to 3491=> "00000000", 3492 => "10000000", 3493 to 3552=> "00000000", 3553 => "10000000", 
    3554 to 3564=> "00000000", 3565 => "10000000", 3566 to 3576=> "00000000", 3577 => "11000000", 
    3578 to 3584=> "00000000", 3585 => "10000000", 3586 to 3589=> "00000000", 3590 => "10000000", 
    3591 to 3596=> "00000000", 3597 => "10000000", 3598 to 3602=> "00000000", 3603 => "10000000", 
    3604 to 3614=> "00000000", 3615 => "10000000", 3616 to 3621=> "00000000", 3622 => "10000000", 
    3623 => "11000000", 3624 to 3631=> "00000000", 3632 => "10000000", 3633 to 3670=> "00000000", 
    3671 => "11000000", 3672 to 3675=> "00000000", 3676 => "11100000", 3677 => "10000000", 
    3678 to 3697=> "00000000", 3698 => "10000000", 3699 => "00000000", 3700 => "10000000", 
    3701 to 3716=> "00000000", 3717 => "10000000", 3718 to 3748=> "00000000", 3749 => "11000000", 
    3750 to 3756=> "00000000", 3757 => "10000000", 3758 to 3766=> "00000000", 3767 => "10000000", 
    3768 to 3775=> "00000000", 3776 to 3777=> "10000000", 3778 => "00000000", 3779 => "10000000", 
    3780 to 3788=> "00000000", 3789 => "11000000", 3790 to 3816=> "00000000", 3817 => "10000000", 
    3818 => "00000001", 3819 to 3845=> "00000000", 3846 => "10000000", 3847 to 3887=> "00000000", 
    3888 => "10000000", 3889 to 3929=> "00000000", 3930 => "10000000", 3931 to 3942=> "00000000", 
    3943 => "10000000", 3944 to 3945=> "00000000", 3946 => "10000000", 3947 to 3968=> "00000000", 
    3969 => "00000001", 3970 to 4029=> "00000000", 4030 => "10000000", 4031 to 4040=> "00000000", 
    4041 => "00000001", 4042 to 4060=> "00000000", 4061 => "00000001", 4062 to 4101=> "00000000", 
    4102 => "00000001", 4103 to 4169=> "00000000", 4170 => "10000000", 4171 to 4184=> "00000000", 
    4185 => "10000000", 4186 to 4202=> "00000000", 4203 => "10000000", 4204 => "00000000", 
    4205 => "10000000", 4206 to 4217=> "00000000", 4218 => "10000000", 4219 to 4225=> "00000000", 
    4226 => "00000001", 4227 => "00000000", 4228 => "00000001", 4229 to 4231=> "00000000", 
    4232 => "11000000", 4233 to 4244=> "00000000", 4245 => "10000000", 4246 to 4278=> "00000000", 
    4279 => "10000000", 4280 to 4287=> "00000000", 4288 => "10000000", 4289 to 4300=> "00000000", 
    4301 => "10000000", 4302 to 4336=> "00000000", 4337 => "10000000", 4338 to 4343=> "00000000", 
    4344 => "10000000", 4345 to 4359=> "00000000", 4360 => "10000000", 4361 to 4443=> "00000000", 
    4444 => "10000000", 4445 to 4454=> "00000000", 4455 => "10000000", 4456 to 4461=> "00000000", 
    4462 => "10000000", 4463 to 4484=> "00000000", 4485 => "10000000", 4486 to 4492=> "00000000", 
    4493 => "10000000", 4494 to 4496=> "00000000", 4497 => "11000000", 4498 to 4499=> "00000000", 
    4500 => "10000000", 4501 to 4504=> "00000000", 4505 => "10000000", 4506 to 4529=> "00000000", 
    4530 => "01000000", 4531 => "00000000", 4532 => "10000000", 4533 to 4534=> "00000000", 
    4535 => "10000000", 4536 to 4548=> "00000000", 4549 => "10000000", 4550 to 4575=> "00000000", 
    4576 => "10000000", 4577 to 4606=> "00000000", 4607 => "10000000", 4608 to 4641=> "00000000", 
    4642 => "10000000", 4643 to 4652=> "00000000", 4653 => "10000000", 4654 to 4681=> "00000000", 
    4682 => "10000000", 4683 => "11000000", 4684 to 4698=> "00000000", 4699 => "10000000", 
    4700 to 4706=> "00000000", 4707 => "10000000", 4708 to 4712=> "00000000", 4713 => "10000000", 
    4714 to 4740=> "00000000", 4741 => "10000000", 4742 to 4757=> "00000000", 4758 => "00000001", 
    4759 to 4769=> "00000000", 4770 => "10000000", 4771 to 4772=> "00000000", 4773 => "10000000", 
    4774 to 4792=> "00000000", 4793 => "10000000", 4794 to 4816=> "00000000", 4817 => "10000000", 
    4818 to 4819=> "00000000", 4820 => "11000000", 4821 to 4833=> "00000000", 4834 => "10000000", 
    4835 to 4836=> "00000000", 4837 => "00000001", 4838 to 4840=> "00000000", 4841 => "11000000", 
    4842 to 4848=> "00000000", 4849 => "10000000", 4850 to 4851=> "00000000", 4852 => "10000000", 
    4853 to 4856=> "00000000", 4857 => "11000000", 4858 to 4866=> "00000000", 4867 => "10000000", 
    4868 to 4904=> "00000000", 4905 to 4906=> "10000000", 4907 to 4925=> "00000000", 4926 => "10000000", 
    4927 to 4948=> "00000000", 4949 => "01100000", 4950 to 4951=> "00000000", 4952 => "10000000", 
    4953 to 5067=> "00000000", 5068 => "10000000", 5069 to 5073=> "00000000", 5074 => "10000000", 
    5075 to 5130=> "00000000", 5131 => "10000000", 5132 to 5154=> "00000000", 5155 => "11000000", 
    5156 to 5174=> "00000000", 5175 => "10000000", 5176 to 5193=> "00000000", 5194 => "10000000", 
    5195 => "00000000", 5196 => "10000000", 5197 to 5201=> "00000000", 5202 => "10000000", 
    5203 to 5227=> "00000000", 5228 => "10000000", 5229 to 5266=> "00000000", 5267 to 5268=> "10000000", 
    5269 to 5307=> "00000000", 5308 => "10000000", 5309 to 5312=> "00000000", 5313 => "00000001", 
    5314 => "00000000", 5315 => "00000001", 5316 to 5333=> "00000000", 5334 => "10000000", 
    5335 to 5343=> "00000000", 5344 => "10000000", 5345 to 5352=> "00000000", 5353 => "10000000", 
    5354 to 5363=> "00000000", 5364 => "10000000", 5365 to 5372=> "00000000", 5373 => "10000000", 
    5374 to 5383=> "00000000", 5384 => "10000000", 5385 to 5429=> "00000000", 5430 => "11000000", 
    5431 to 5460=> "00000000", 5461 => "10000000", 5462 to 5504=> "00000000", 5505 => "10000000", 
    5506 to 5584=> "00000000", 5585 => "10000000", 5586 => "00000000", 5587 => "10000000", 
    5588 to 5625=> "00000000", 5626 => "11000000", 5627 to 5633=> "00000000", 5634 => "10000000", 
    5635 to 5688=> "00000000", 5689 => "10000000", 5690 to 5691=> "00000000", 5692 => "10000000", 
    5693 => "00000000", 5694 => "10000000", 5695 to 5697=> "00000000", 5698 => "10000000", 
    5699 to 5801=> "00000000", 5802 => "10000000", 5803 to 5807=> "00000000", 5808 => "10000000", 
    5809 to 5827=> "00000000", 5828 => "10000000", 5829 to 5885=> "00000000", 5886 => "10000000", 
    5887 to 5968=> "00000000", 5969 => "00000001", 5970 to 5977=> "00000000", 5978 => "10000000", 
    5979 to 5999=> "00000000" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "select_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "distributed";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity knn_train_33 is
    generic (
        DataWidth : INTEGER := 8;
        AddressRange : INTEGER := 6000;
        AddressWidth : INTEGER := 13);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of knn_train_33 is
    component knn_train_33_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    knn_train_33_rom_U :  component knn_train_33_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


