// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module merge (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        arr_0_address0,
        arr_0_ce0,
        arr_0_we0,
        arr_0_d0,
        arr_0_q0,
        arr_1_address0,
        arr_1_ce0,
        arr_1_we0,
        arr_1_d0,
        arr_1_q0,
        l,
        m,
        r
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] arr_0_address0;
output   arr_0_ce0;
output   arr_0_we0;
output  [31:0] arr_0_d0;
input  [31:0] arr_0_q0;
output  [15:0] arr_1_address0;
output   arr_1_ce0;
output   arr_1_we0;
output  [31:0] arr_1_d0;
input  [31:0] arr_1_q0;
input  [31:0] l;
input  [31:0] m;
input  [31:0] r;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[15:0] arr_0_address0;
reg arr_0_ce0;
reg arr_0_we0;
reg[31:0] arr_0_d0;
reg[15:0] arr_1_address0;
reg arr_1_ce0;
reg arr_1_we0;
reg[31:0] arr_1_d0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] n1_fu_367_p2;
reg   [31:0] n1_reg_633;
wire   [31:0] n2_fu_373_p2;
reg   [31:0] n2_reg_640;
wire   [30:0] i_fu_388_p2;
reg   [30:0] i_reg_650;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln52_fu_383_p2;
wire   [30:0] j_fu_420_p2;
reg   [30:0] j_reg_668;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln58_fu_415_p2;
reg  signed [31:0] j_1_load_reg_697;
wire    ap_CS_fsm_state6;
reg  signed [31:0] i_1_load_reg_703;
wire  signed [63:0] sext_ln71_fu_479_p1;
reg  signed [63:0] sext_ln71_reg_712;
wire   [0:0] and_ln69_fu_473_p2;
wire  signed [63:0] sext_ln71_1_fu_484_p1;
reg  signed [63:0] sext_ln71_1_reg_722;
wire   [31:0] k_fu_519_p2;
reg   [31:0] k_reg_732;
wire   [0:0] icmp_ln71_fu_525_p2;
reg   [0:0] icmp_ln71_reg_737;
wire    ap_CS_fsm_state7;
wire  signed [63:0] sext_ln79_fu_531_p1;
reg  signed [63:0] sext_ln79_reg_741;
wire   [31:0] add_ln84_fu_556_p2;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln88_fu_562_p2;
wire   [31:0] i_4_fu_573_p2;
reg   [31:0] i_4_reg_775;
wire   [31:0] k_3_fu_585_p2;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln98_fu_591_p2;
wire   [31:0] j_4_fu_602_p2;
reg   [31:0] j_4_reg_798;
wire   [31:0] k_4_fu_614_p2;
wire    ap_CS_fsm_state12;
reg   [15:0] L_0_address0;
reg    L_0_ce0;
reg    L_0_we0;
wire   [31:0] L_0_q0;
reg   [15:0] L_1_address0;
reg    L_1_ce0;
reg    L_1_we0;
wire   [31:0] L_1_q0;
reg   [15:0] R_0_address0;
reg    R_0_ce0;
reg    R_0_we0;
wire   [31:0] R_0_q0;
reg   [15:0] R_1_address0;
reg    R_1_ce0;
reg    R_1_we0;
wire   [31:0] R_1_q0;
reg   [30:0] i_0_reg_288;
wire    ap_CS_fsm_state3;
reg   [30:0] j_0_reg_300;
wire    ap_CS_fsm_state5;
reg  signed [31:0] indvars_iv_reg_312;
reg  signed [31:0] i_3_reg_322;
reg  signed [31:0] k_1_reg_331;
reg  signed [31:0] j_3_reg_342;
reg  signed [31:0] k_2_reg_351;
wire  signed [63:0] sext_ln54_fu_399_p1;
wire   [63:0] zext_ln54_fu_405_p1;
wire  signed [63:0] sext_ln60_fu_435_p1;
wire   [63:0] zext_ln60_fu_451_p1;
wire   [15:0] arr_1_addr_2_gep_fu_219_p3;
wire  signed [63:0] sext_ln90_fu_567_p1;
wire  signed [63:0] sext_ln90_1_fu_579_p1;
wire  signed [63:0] sext_ln100_fu_596_p1;
wire  signed [63:0] sext_ln100_1_fu_608_p1;
reg   [31:0] j_1_fu_52;
wire   [31:0] j_2_fu_546_p2;
reg   [31:0] i_1_fu_56;
wire   [31:0] i_2_fu_536_p2;
wire   [31:0] sub_ln44_fu_361_p2;
wire   [31:0] zext_ln52_fu_379_p1;
wire   [31:0] add_ln54_fu_394_p2;
wire   [31:0] zext_ln58_fu_411_p1;
wire   [31:0] zext_ln60_1_fu_426_p1;
wire   [31:0] add_ln60_1_fu_430_p2;
wire  signed [31:0] icmp_ln69_fu_463_p0;
wire  signed [31:0] icmp_ln69_1_fu_468_p0;
wire   [0:0] icmp_ln69_fu_463_p2;
wire   [0:0] icmp_ln69_1_fu_468_p2;
wire  signed [31:0] sext_ln71_fu_479_p0;
wire  signed [31:0] sext_ln71_1_fu_484_p0;
wire   [31:0] sub_ln88_fu_489_p2;
wire  signed [31:0] empty_fu_499_p0;
wire   [31:0] add_ln88_fu_494_p2;
wire   [0:0] empty_fu_499_p2;
wire  signed [31:0] smax_fu_505_p1;
wire  signed [31:0] sub_ln88_1_fu_513_p1;
wire   [31:0] sub_ln88_1_fu_513_p2;
wire   [31:0] smax_fu_505_p3;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
end

merge_L_0 #(
    .DataWidth( 32 ),
    .AddressRange( 60000 ),
    .AddressWidth( 16 ))
L_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(L_0_address0),
    .ce0(L_0_ce0),
    .we0(L_0_we0),
    .d0(arr_0_q0),
    .q0(L_0_q0)
);

merge_L_0 #(
    .DataWidth( 32 ),
    .AddressRange( 60000 ),
    .AddressWidth( 16 ))
L_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(L_1_address0),
    .ce0(L_1_ce0),
    .we0(L_1_we0),
    .d0(arr_1_q0),
    .q0(L_1_q0)
);

merge_L_0 #(
    .DataWidth( 32 ),
    .AddressRange( 60000 ),
    .AddressWidth( 16 ))
R_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(R_0_address0),
    .ce0(R_0_ce0),
    .we0(R_0_we0),
    .d0(arr_0_q0),
    .q0(R_0_q0)
);

merge_L_0 #(
    .DataWidth( 32 ),
    .AddressRange( 60000 ),
    .AddressWidth( 16 ))
R_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(R_1_address0),
    .ce0(R_1_ce0),
    .we0(R_1_we0),
    .d0(arr_1_q0),
    .q0(R_1_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_288 <= i_reg_650;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_288 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln71_fu_525_p2 == 1'd0))) begin
        i_1_fu_56 <= i_2_fu_536_p2;
    end else if (((icmp_ln58_fu_415_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_1_fu_56 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_3_reg_322 <= i_4_reg_775;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == and_ln69_fu_473_p2))) begin
        i_3_reg_322 <= i_1_fu_56;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln58_fu_415_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        indvars_iv_reg_312 <= l;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        indvars_iv_reg_312 <= add_ln84_fu_556_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_383_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_300 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        j_0_reg_300 <= j_reg_668;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln71_reg_737 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        j_1_fu_52 <= j_2_fu_546_p2;
    end else if (((icmp_ln58_fu_415_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j_1_fu_52 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln88_fu_562_p2 == 1'd0))) begin
        j_3_reg_342 <= j_1_load_reg_697;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        j_3_reg_342 <= j_4_reg_798;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        k_1_reg_331 <= k_3_fu_585_p2;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == and_ln69_fu_473_p2))) begin
        k_1_reg_331 <= indvars_iv_reg_312;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln88_fu_562_p2 == 1'd0))) begin
        k_2_reg_351 <= k_reg_732;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        k_2_reg_351 <= k_4_fu_614_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_1_load_reg_703 <= i_1_fu_56;
        j_1_load_reg_697 <= j_1_fu_52;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln88_fu_562_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        i_4_reg_775 <= i_4_fu_573_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_650 <= i_fu_388_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        icmp_ln71_reg_737 <= icmp_ln71_fu_525_p2;
        sext_ln79_reg_741 <= sext_ln79_fu_531_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln98_fu_591_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        j_4_reg_798 <= j_4_fu_602_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_668 <= j_fu_420_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == and_ln69_fu_473_p2))) begin
        k_reg_732 <= k_fu_519_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        n1_reg_633 <= n1_fu_367_p2;
        n2_reg_640 <= n2_fu_373_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln69_fu_473_p2) & (1'b1 == ap_CS_fsm_state6))) begin
        sext_ln71_1_reg_722 <= sext_ln71_1_fu_484_p1;
        sext_ln71_reg_712 <= sext_ln71_fu_479_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        L_0_address0 = sext_ln90_fu_567_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        L_0_address0 = sext_ln71_fu_479_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        L_0_address0 = zext_ln54_fu_405_p1;
    end else begin
        L_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9))) begin
        L_0_ce0 = 1'b1;
    end else begin
        L_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        L_0_we0 = 1'b1;
    end else begin
        L_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        L_1_address0 = sext_ln90_fu_567_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        L_1_address0 = sext_ln71_reg_712;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        L_1_address0 = zext_ln54_fu_405_p1;
    end else begin
        L_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7))) begin
        L_1_ce0 = 1'b1;
    end else begin
        L_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        L_1_we0 = 1'b1;
    end else begin
        L_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        R_0_address0 = sext_ln100_fu_596_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        R_0_address0 = sext_ln71_1_fu_484_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        R_0_address0 = zext_ln60_fu_451_p1;
    end else begin
        R_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state11))) begin
        R_0_ce0 = 1'b1;
    end else begin
        R_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        R_0_we0 = 1'b1;
    end else begin
        R_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        R_1_address0 = sext_ln100_fu_596_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        R_1_address0 = sext_ln71_1_reg_722;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        R_1_address0 = zext_ln60_fu_451_p1;
    end else begin
        R_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7))) begin
        R_1_ce0 = 1'b1;
    end else begin
        R_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        R_1_we0 = 1'b1;
    end else begin
        R_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state11) & (icmp_ln98_fu_591_p2 == 1'd0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln98_fu_591_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        arr_0_address0 = sext_ln100_1_fu_608_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        arr_0_address0 = sext_ln90_1_fu_579_p1;
    end else if ((((icmp_ln71_fu_525_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == ap_CS_fsm_state7) & (icmp_ln71_fu_525_p2 == 1'd0)))) begin
        arr_0_address0 = sext_ln79_fu_531_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        arr_0_address0 = sext_ln60_fu_435_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        arr_0_address0 = sext_ln54_fu_399_p1;
    end else begin
        arr_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | ((icmp_ln71_fu_525_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == ap_CS_fsm_state7) & (icmp_ln71_fu_525_p2 == 1'd0)))) begin
        arr_0_ce0 = 1'b1;
    end else begin
        arr_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((icmp_ln71_fu_525_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7)))) begin
        arr_0_d0 = R_0_q0;
    end else if (((1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state7) & (icmp_ln71_fu_525_p2 == 1'd0)))) begin
        arr_0_d0 = L_0_q0;
    end else begin
        arr_0_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | ((icmp_ln71_fu_525_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == ap_CS_fsm_state7) & (icmp_ln71_fu_525_p2 == 1'd0)))) begin
        arr_0_we0 = 1'b1;
    end else begin
        arr_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        arr_1_address0 = sext_ln100_1_fu_608_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        arr_1_address0 = sext_ln90_1_fu_579_p1;
    end else if (((icmp_ln71_reg_737 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        arr_1_address0 = arr_1_addr_2_gep_fu_219_p3;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln71_reg_737 == 1'd0))) begin
        arr_1_address0 = sext_ln79_reg_741;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        arr_1_address0 = sext_ln60_fu_435_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        arr_1_address0 = sext_ln54_fu_399_p1;
    end else begin
        arr_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | ((icmp_ln71_reg_737 == 1'd1) & (1'b1 == ap_CS_fsm_state8)) | ((1'b1 == ap_CS_fsm_state8) & (icmp_ln71_reg_737 == 1'd0)))) begin
        arr_1_ce0 = 1'b1;
    end else begin
        arr_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((icmp_ln71_reg_737 == 1'd1) & (1'b1 == ap_CS_fsm_state8)))) begin
        arr_1_d0 = R_1_q0;
    end else if (((1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state8) & (icmp_ln71_reg_737 == 1'd0)))) begin
        arr_1_d0 = L_1_q0;
    end else begin
        arr_1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | ((icmp_ln71_reg_737 == 1'd1) & (1'b1 == ap_CS_fsm_state8)) | ((1'b1 == ap_CS_fsm_state8) & (icmp_ln71_reg_737 == 1'd0)))) begin
        arr_1_we0 = 1'b1;
    end else begin
        arr_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln52_fu_383_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln58_fu_415_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == and_ln69_fu_473_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln88_fu_562_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln98_fu_591_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln54_fu_394_p2 = (zext_ln52_fu_379_p1 + l);

assign add_ln60_1_fu_430_p2 = (zext_ln60_1_fu_426_p1 + m);

assign add_ln84_fu_556_p2 = ($signed(indvars_iv_reg_312) + $signed(32'd1));

assign add_ln88_fu_494_p2 = (sub_ln88_fu_489_p2 + m);

assign and_ln69_fu_473_p2 = (icmp_ln69_fu_463_p2 & icmp_ln69_1_fu_468_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign arr_1_addr_2_gep_fu_219_p3 = sext_ln79_reg_741;

assign empty_fu_499_p0 = i_1_fu_56;

assign empty_fu_499_p2 = (($signed(empty_fu_499_p0) > $signed(add_ln88_fu_494_p2)) ? 1'b1 : 1'b0);

assign i_2_fu_536_p2 = ($signed(i_1_load_reg_703) + $signed(32'd1));

assign i_4_fu_573_p2 = ($signed(i_3_reg_322) + $signed(32'd1));

assign i_fu_388_p2 = (i_0_reg_288 + 31'd1);

assign icmp_ln52_fu_383_p2 = (($signed(zext_ln52_fu_379_p1) < $signed(n1_reg_633)) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_415_p2 = (($signed(zext_ln58_fu_411_p1) < $signed(n2_reg_640)) ? 1'b1 : 1'b0);

assign icmp_ln69_1_fu_468_p0 = j_1_fu_52;

assign icmp_ln69_1_fu_468_p2 = (($signed(icmp_ln69_1_fu_468_p0) < $signed(n2_reg_640)) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_463_p0 = i_1_fu_56;

assign icmp_ln69_fu_463_p2 = (($signed(icmp_ln69_fu_463_p0) < $signed(n1_reg_633)) ? 1'b1 : 1'b0);

assign icmp_ln71_fu_525_p2 = (($signed(L_0_q0) > $signed(R_0_q0)) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_562_p2 = (($signed(i_3_reg_322) < $signed(n1_reg_633)) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_591_p2 = (($signed(j_3_reg_342) < $signed(n2_reg_640)) ? 1'b1 : 1'b0);

assign j_2_fu_546_p2 = ($signed(j_1_load_reg_697) + $signed(32'd1));

assign j_4_fu_602_p2 = ($signed(j_3_reg_342) + $signed(32'd1));

assign j_fu_420_p2 = (j_0_reg_300 + 31'd1);

assign k_3_fu_585_p2 = ($signed(k_1_reg_331) + $signed(32'd1));

assign k_4_fu_614_p2 = ($signed(k_2_reg_351) + $signed(32'd1));

assign k_fu_519_p2 = (sub_ln88_1_fu_513_p2 + smax_fu_505_p3);

assign n1_fu_367_p2 = (sub_ln44_fu_361_p2 + 32'd1);

assign n2_fu_373_p2 = (r - m);

assign sext_ln100_1_fu_608_p1 = k_2_reg_351;

assign sext_ln100_fu_596_p1 = j_3_reg_342;

assign sext_ln54_fu_399_p1 = $signed(add_ln54_fu_394_p2);

assign sext_ln60_fu_435_p1 = $signed(add_ln60_1_fu_430_p2);

assign sext_ln71_1_fu_484_p0 = j_1_fu_52;

assign sext_ln71_1_fu_484_p1 = sext_ln71_1_fu_484_p0;

assign sext_ln71_fu_479_p0 = i_1_fu_56;

assign sext_ln71_fu_479_p1 = sext_ln71_fu_479_p0;

assign sext_ln79_fu_531_p1 = indvars_iv_reg_312;

assign sext_ln90_1_fu_579_p1 = k_1_reg_331;

assign sext_ln90_fu_567_p1 = i_3_reg_322;

assign smax_fu_505_p1 = i_1_fu_56;

assign smax_fu_505_p3 = ((empty_fu_499_p2[0:0] === 1'b1) ? smax_fu_505_p1 : add_ln88_fu_494_p2);

assign sub_ln44_fu_361_p2 = (m - l);

assign sub_ln88_1_fu_513_p1 = i_1_fu_56;

assign sub_ln88_1_fu_513_p2 = ($signed(indvars_iv_reg_312) - $signed(sub_ln88_1_fu_513_p1));

assign sub_ln88_fu_489_p2 = (32'd1 - l);

assign zext_ln52_fu_379_p1 = i_0_reg_288;

assign zext_ln54_fu_405_p1 = i_0_reg_288;

assign zext_ln58_fu_411_p1 = j_0_reg_300;

assign zext_ln60_1_fu_426_p1 = j_fu_420_p2;

assign zext_ln60_fu_451_p1 = j_0_reg_300;

endmodule //merge
