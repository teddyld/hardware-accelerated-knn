-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity knn is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    k : IN STD_LOGIC_VECTOR (31 downto 0);
    test_samples_label_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    test_samples_label_ce0 : OUT STD_LOGIC;
    test_samples_label_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    test_samples_data_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    test_samples_data_ce0 : OUT STD_LOGIC;
    test_samples_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    test_samples_data_address1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    test_samples_data_ce1 : OUT STD_LOGIC;
    test_samples_data_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    train_samples_label_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    train_samples_label_ce0 : OUT STD_LOGIC;
    train_samples_label_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    train_samples_data_address0 : OUT STD_LOGIC_VECTOR (22 downto 0);
    train_samples_data_ce0 : OUT STD_LOGIC;
    train_samples_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    train_samples_data_address1 : OUT STD_LOGIC_VECTOR (22 downto 0);
    train_samples_data_ce1 : OUT STD_LOGIC;
    train_samples_data_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of knn is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "knn,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.245000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=651,HLS_SYN_DSP=0,HLS_SYN_FF=2330,HLS_SYN_LUT=10425,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (112 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (112 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (112 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (112 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (112 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (112 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (112 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (112 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (112 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (112 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (112 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (112 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv64_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010101";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv64_1A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011010";
    constant ap_const_lv64_1B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011011";
    constant ap_const_lv64_1C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011100";
    constant ap_const_lv64_1D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011101";
    constant ap_const_lv64_1E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011110";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv64_20 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000";
    constant ap_const_lv64_21 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100001";
    constant ap_const_lv64_22 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100010";
    constant ap_const_lv64_23 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100011";
    constant ap_const_lv64_24 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100100";
    constant ap_const_lv64_25 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100101";
    constant ap_const_lv64_26 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100110";
    constant ap_const_lv64_27 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100111";
    constant ap_const_lv64_28 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101000";
    constant ap_const_lv64_29 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101001";
    constant ap_const_lv64_2A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101010";
    constant ap_const_lv64_2B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101011";
    constant ap_const_lv64_2C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101100";
    constant ap_const_lv64_2D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101101";
    constant ap_const_lv64_2E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101110";
    constant ap_const_lv64_2F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101111";
    constant ap_const_lv64_30 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110000";
    constant ap_const_lv64_31 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110001";
    constant ap_const_lv64_32 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110010";
    constant ap_const_lv64_33 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110011";
    constant ap_const_lv64_34 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110100";
    constant ap_const_lv64_35 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110101";
    constant ap_const_lv64_36 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110110";
    constant ap_const_lv64_37 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110111";
    constant ap_const_lv64_38 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111000";
    constant ap_const_lv64_39 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111001";
    constant ap_const_lv64_3A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111010";
    constant ap_const_lv64_3B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111011";
    constant ap_const_lv64_3C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111100";
    constant ap_const_lv64_3D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111101";
    constant ap_const_lv64_3E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111110";
    constant ap_const_lv64_3F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111111";
    constant ap_const_lv64_40 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000";
    constant ap_const_lv64_41 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000001";
    constant ap_const_lv64_42 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000010";
    constant ap_const_lv64_43 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000011";
    constant ap_const_lv64_44 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000100";
    constant ap_const_lv64_45 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000101";
    constant ap_const_lv64_46 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000110";
    constant ap_const_lv64_47 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000111";
    constant ap_const_lv64_48 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001001000";
    constant ap_const_lv64_49 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001001001";
    constant ap_const_lv64_4A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001001010";
    constant ap_const_lv64_4B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001001011";
    constant ap_const_lv64_4C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001001100";
    constant ap_const_lv64_4D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001001101";
    constant ap_const_lv64_4E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001001110";
    constant ap_const_lv64_4F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001001111";
    constant ap_const_lv64_50 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001010000";
    constant ap_const_lv64_51 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001010001";
    constant ap_const_lv64_52 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001010010";
    constant ap_const_lv64_53 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001010011";
    constant ap_const_lv64_54 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001010100";
    constant ap_const_lv64_55 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001010101";
    constant ap_const_lv64_56 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001010110";
    constant ap_const_lv64_57 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001010111";
    constant ap_const_lv64_58 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001011000";
    constant ap_const_lv64_59 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001011001";
    constant ap_const_lv64_5A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001011010";
    constant ap_const_lv64_5B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001011011";
    constant ap_const_lv64_5C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001011100";
    constant ap_const_lv64_5D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001011101";
    constant ap_const_lv64_5E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001011110";
    constant ap_const_lv64_5F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001011111";
    constant ap_const_lv64_60 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001100000";
    constant ap_const_lv64_61 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001100001";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv20_62 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001100010";
    constant ap_const_lv14_2710 : STD_LOGIC_VECTOR (13 downto 0) := "10011100010000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_const_lv20_2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_const_lv20_3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000011";
    constant ap_const_lv20_4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_const_lv20_5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000101";
    constant ap_const_lv20_6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000110";
    constant ap_const_lv20_7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000111";
    constant ap_const_lv20_8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_const_lv20_9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001001";
    constant ap_const_lv20_A : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001010";
    constant ap_const_lv20_B : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001011";
    constant ap_const_lv20_C : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001100";
    constant ap_const_lv20_D : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001101";
    constant ap_const_lv20_E : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001110";
    constant ap_const_lv20_F : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001111";
    constant ap_const_lv20_10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_const_lv20_11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010001";
    constant ap_const_lv20_12 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010010";
    constant ap_const_lv20_13 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010011";
    constant ap_const_lv20_14 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010100";
    constant ap_const_lv20_15 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010101";
    constant ap_const_lv20_16 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010110";
    constant ap_const_lv20_17 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010111";
    constant ap_const_lv20_18 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000011000";
    constant ap_const_lv20_19 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000011001";
    constant ap_const_lv20_1A : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000011010";
    constant ap_const_lv20_1B : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000011011";
    constant ap_const_lv20_1C : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000011100";
    constant ap_const_lv20_1D : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000011101";
    constant ap_const_lv20_1E : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000011110";
    constant ap_const_lv20_1F : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000011111";
    constant ap_const_lv20_20 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_const_lv20_21 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100001";
    constant ap_const_lv20_22 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100010";
    constant ap_const_lv20_23 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100011";
    constant ap_const_lv20_24 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100100";
    constant ap_const_lv20_25 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100101";
    constant ap_const_lv20_26 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100110";
    constant ap_const_lv20_27 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100111";
    constant ap_const_lv20_28 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000101000";
    constant ap_const_lv20_29 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000101001";
    constant ap_const_lv20_2A : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000101010";
    constant ap_const_lv20_2B : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000101011";
    constant ap_const_lv20_2C : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000101100";
    constant ap_const_lv20_2D : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000101101";
    constant ap_const_lv20_2E : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000101110";
    constant ap_const_lv20_2F : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000101111";
    constant ap_const_lv20_30 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000110000";
    constant ap_const_lv20_31 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000110001";
    constant ap_const_lv20_32 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000110010";
    constant ap_const_lv20_33 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000110011";
    constant ap_const_lv20_34 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000110100";
    constant ap_const_lv20_35 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000110101";
    constant ap_const_lv20_36 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000110110";
    constant ap_const_lv20_37 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000110111";
    constant ap_const_lv20_38 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000111000";
    constant ap_const_lv20_39 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000111001";
    constant ap_const_lv20_3A : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000111010";
    constant ap_const_lv20_3B : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000111011";
    constant ap_const_lv20_3C : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000111100";
    constant ap_const_lv20_3D : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000111101";
    constant ap_const_lv20_3E : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000111110";
    constant ap_const_lv20_3F : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000111111";
    constant ap_const_lv20_40 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_const_lv20_41 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000001";
    constant ap_const_lv20_42 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000010";
    constant ap_const_lv20_43 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000011";
    constant ap_const_lv20_44 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000100";
    constant ap_const_lv20_45 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000101";
    constant ap_const_lv20_46 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000110";
    constant ap_const_lv20_47 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000111";
    constant ap_const_lv20_48 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001001000";
    constant ap_const_lv20_49 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001001001";
    constant ap_const_lv20_4A : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001001010";
    constant ap_const_lv20_4B : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001001011";
    constant ap_const_lv20_4C : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001001100";
    constant ap_const_lv20_4D : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001001101";
    constant ap_const_lv20_4E : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001001110";
    constant ap_const_lv20_4F : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001001111";
    constant ap_const_lv20_50 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001010000";
    constant ap_const_lv20_51 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001010001";
    constant ap_const_lv20_52 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001010010";
    constant ap_const_lv20_53 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001010011";
    constant ap_const_lv20_54 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001010100";
    constant ap_const_lv20_55 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001010101";
    constant ap_const_lv20_56 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001010110";
    constant ap_const_lv20_57 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001010111";
    constant ap_const_lv20_58 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001011000";
    constant ap_const_lv20_59 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001011001";
    constant ap_const_lv20_5A : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001011010";
    constant ap_const_lv20_5B : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001011011";
    constant ap_const_lv20_5C : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001011100";
    constant ap_const_lv20_5D : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001011101";
    constant ap_const_lv20_5E : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001011110";
    constant ap_const_lv20_5F : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001011111";
    constant ap_const_lv20_60 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001100000";
    constant ap_const_lv20_61 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001100001";
    constant ap_const_lv23_62 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001100010";
    constant ap_const_lv16_EA60 : STD_LOGIC_VECTOR (15 downto 0) := "1110101001100000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv23_1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_const_lv23_2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_const_lv23_3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000011";
    constant ap_const_lv23_4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_const_lv23_5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000101";
    constant ap_const_lv23_6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000110";
    constant ap_const_lv23_7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000111";
    constant ap_const_lv23_8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_const_lv23_9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001001";
    constant ap_const_lv23_A : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001010";
    constant ap_const_lv23_B : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001011";
    constant ap_const_lv23_C : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001100";
    constant ap_const_lv23_D : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001101";
    constant ap_const_lv23_E : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001110";
    constant ap_const_lv23_F : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001111";
    constant ap_const_lv23_10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_const_lv23_11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010001";
    constant ap_const_lv23_12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010010";
    constant ap_const_lv23_13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010011";
    constant ap_const_lv23_14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010100";
    constant ap_const_lv23_15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010101";
    constant ap_const_lv23_16 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010110";
    constant ap_const_lv23_17 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010111";
    constant ap_const_lv23_18 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000011000";
    constant ap_const_lv23_19 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000011001";
    constant ap_const_lv23_1A : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000011010";
    constant ap_const_lv23_1B : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000011011";
    constant ap_const_lv23_1C : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000011100";
    constant ap_const_lv23_1D : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000011101";
    constant ap_const_lv23_1E : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000011110";
    constant ap_const_lv23_1F : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000011111";
    constant ap_const_lv23_20 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_const_lv23_21 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100001";
    constant ap_const_lv23_22 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100010";
    constant ap_const_lv23_23 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100011";
    constant ap_const_lv23_24 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100100";
    constant ap_const_lv23_25 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100101";
    constant ap_const_lv23_26 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100110";
    constant ap_const_lv23_27 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100111";
    constant ap_const_lv23_28 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000101000";
    constant ap_const_lv23_29 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000101001";
    constant ap_const_lv23_2A : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000101010";
    constant ap_const_lv23_2B : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000101011";
    constant ap_const_lv23_2C : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000101100";
    constant ap_const_lv23_2D : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000101101";
    constant ap_const_lv23_2E : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000101110";
    constant ap_const_lv23_2F : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000101111";
    constant ap_const_lv23_30 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000110000";
    constant ap_const_lv23_31 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000110001";
    constant ap_const_lv23_32 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000110010";
    constant ap_const_lv23_33 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000110011";
    constant ap_const_lv23_34 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000110100";
    constant ap_const_lv23_35 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000110101";
    constant ap_const_lv23_36 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000110110";
    constant ap_const_lv23_37 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000110111";
    constant ap_const_lv23_38 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000111000";
    constant ap_const_lv23_39 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000111001";
    constant ap_const_lv23_3A : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000111010";
    constant ap_const_lv23_3B : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000111011";
    constant ap_const_lv23_3C : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000111100";
    constant ap_const_lv23_3D : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000111101";
    constant ap_const_lv23_3E : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000111110";
    constant ap_const_lv23_3F : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000111111";
    constant ap_const_lv23_40 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_const_lv23_41 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000001";
    constant ap_const_lv23_42 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000010";
    constant ap_const_lv23_43 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000011";
    constant ap_const_lv23_44 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000100";
    constant ap_const_lv23_45 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000101";
    constant ap_const_lv23_46 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000110";
    constant ap_const_lv23_47 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000111";
    constant ap_const_lv23_48 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001001000";
    constant ap_const_lv23_49 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001001001";
    constant ap_const_lv23_4A : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001001010";
    constant ap_const_lv23_4B : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001001011";
    constant ap_const_lv23_4C : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001001100";
    constant ap_const_lv23_4D : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001001101";
    constant ap_const_lv23_4E : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001001110";
    constant ap_const_lv23_4F : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001001111";
    constant ap_const_lv23_50 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001010000";
    constant ap_const_lv23_51 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001010001";
    constant ap_const_lv23_52 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001010010";
    constant ap_const_lv23_53 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001010011";
    constant ap_const_lv23_54 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001010100";
    constant ap_const_lv23_55 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001010101";
    constant ap_const_lv23_56 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001010110";
    constant ap_const_lv23_57 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001010111";
    constant ap_const_lv23_58 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001011000";
    constant ap_const_lv23_59 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001011001";
    constant ap_const_lv23_5A : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001011010";
    constant ap_const_lv23_5B : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001011011";
    constant ap_const_lv23_5C : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001011100";
    constant ap_const_lv23_5D : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001011101";
    constant ap_const_lv23_5E : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001011110";
    constant ap_const_lv23_5F : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001011111";
    constant ap_const_lv23_60 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001100000";
    constant ap_const_lv23_61 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001100001";
    constant ap_const_lv7_62 : STD_LOGIC_VECTOR (6 downto 0) := "1100010";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_EA5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001110101001011111";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (112 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal bitcount_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcount_ce0 : STD_LOGIC;
    signal bitcount_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln32_1_fu_4151_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln32_1_reg_7532 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_5_fu_4163_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_5_reg_7540 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln32_fu_4157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal test_sample_label_reg_7570 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_reg_7575 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_1_reg_7580 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal test_samples_data_lo_2_reg_7595 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_3_reg_7600 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal test_samples_data_lo_4_reg_7615 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_5_reg_7620 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal test_samples_data_lo_6_reg_7635 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_7_reg_7640 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal test_samples_data_lo_8_reg_7655 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_9_reg_7660 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal test_samples_data_lo_10_reg_7675 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_11_reg_7680 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal test_samples_data_lo_12_reg_7695 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_13_reg_7700 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal test_samples_data_lo_14_reg_7715 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_15_reg_7720 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal test_samples_data_lo_16_reg_7735 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_17_reg_7740 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal test_samples_data_lo_18_reg_7755 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_19_reg_7760 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal test_samples_data_lo_20_reg_7775 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_21_reg_7780 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal test_samples_data_lo_22_reg_7795 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_23_reg_7800 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal test_samples_data_lo_24_reg_7815 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_25_reg_7820 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal test_samples_data_lo_26_reg_7835 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_27_reg_7840 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal test_samples_data_lo_28_reg_7855 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_29_reg_7860 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal test_samples_data_lo_30_reg_7875 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_31_reg_7880 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal test_samples_data_lo_32_reg_7895 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_33_reg_7900 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal test_samples_data_lo_34_reg_7915 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_35_reg_7920 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal test_samples_data_lo_36_reg_7935 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_37_reg_7940 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal test_samples_data_lo_38_reg_7955 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_39_reg_7960 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal test_samples_data_lo_40_reg_7975 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_41_reg_7980 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal test_samples_data_lo_42_reg_7995 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_43_reg_8000 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal test_samples_data_lo_44_reg_8015 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_45_reg_8020 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal test_samples_data_lo_46_reg_8035 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_47_reg_8040 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal test_samples_data_lo_48_reg_8055 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_49_reg_8060 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal test_samples_data_lo_50_reg_8075 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_51_reg_8080 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal test_samples_data_lo_52_reg_8095 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_53_reg_8100 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal test_samples_data_lo_54_reg_8115 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_55_reg_8120 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal test_samples_data_lo_56_reg_8135 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_57_reg_8140 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal test_samples_data_lo_58_reg_8155 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_59_reg_8160 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal test_samples_data_lo_60_reg_8175 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_61_reg_8180 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal test_samples_data_lo_62_reg_8195 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_63_reg_8200 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal test_samples_data_lo_64_reg_8215 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_65_reg_8220 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal test_samples_data_lo_66_reg_8235 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_67_reg_8240 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal test_samples_data_lo_68_reg_8255 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_69_reg_8260 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal test_samples_data_lo_70_reg_8275 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_71_reg_8280 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal test_samples_data_lo_72_reg_8295 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_73_reg_8300 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal test_samples_data_lo_74_reg_8315 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_75_reg_8320 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal test_samples_data_lo_76_reg_8335 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_77_reg_8340 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal test_samples_data_lo_78_reg_8355 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_79_reg_8360 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal test_samples_data_lo_80_reg_8375 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_81_reg_8380 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal test_samples_data_lo_82_reg_8395 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_83_reg_8400 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal test_samples_data_lo_84_reg_8415 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_85_reg_8420 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal test_samples_data_lo_86_reg_8435 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_87_reg_8440 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal test_samples_data_lo_88_reg_8455 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_89_reg_8460 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal test_samples_data_lo_90_reg_8475 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_91_reg_8480 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal test_samples_data_lo_92_reg_8495 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_93_reg_8500 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal test_samples_data_lo_94_reg_8515 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_95_reg_8520 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_samples_data_lo_96_reg_8525 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal test_samples_data_lo_97_reg_8530 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_fu_5246_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln41_reg_8535 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal j_fu_5258_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_reg_8543 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln41_fu_5252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal zext_ln43_fu_6331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_reg_9038 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal train_samples_label_1_reg_9049 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal i_fu_6342_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_9057 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal icmp_ln86_fu_6336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal distance_fu_6378_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state106 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state106 : signal is "none";
    signal curr_size_fu_6390_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal curr_size_reg_9085 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal icmp_ln22_fu_6384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mid_fu_6420_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mid_reg_9095 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal icmp_ln26_fu_6396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal right_end_fu_6440_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal right_end_reg_9100 : STD_LOGIC_VECTOR (31 downto 0);
    signal left_start_fu_6449_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal left_start_reg_9105 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_5_fu_6460_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state110 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state110 : signal is "none";
    signal j_6_fu_6480_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_6_reg_9121 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state111 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state111 : signal is "none";
    signal icmp_ln62_fu_6475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln74_fu_6506_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal distances_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal most_freq_reg_9136 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state112 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state112 : signal is "none";
    signal freq_addr_1_reg_9141 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln66_fu_6532_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state113 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state113 : signal is "none";
    signal select_ln66_1_fu_6540_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal distances_0_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal distances_0_ce0 : STD_LOGIC;
    signal distances_0_we0 : STD_LOGIC;
    signal distances_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal distances_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal distances_1_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal distances_1_ce0 : STD_LOGIC;
    signal distances_1_we0 : STD_LOGIC;
    signal distances_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_data_assign_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_data_assign_ce0 : STD_LOGIC;
    signal a_data_assign_we0 : STD_LOGIC;
    signal a_data_assign_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_data_assign_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_data_assign_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_data_assign_ce1 : STD_LOGIC;
    signal a_data_assign_we1 : STD_LOGIC;
    signal a_data_assign_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_data_assign_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal b_data_assign_ce0 : STD_LOGIC;
    signal b_data_assign_we0 : STD_LOGIC;
    signal b_data_assign_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_data_assign_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal b_data_assign_ce1 : STD_LOGIC;
    signal b_data_assign_we1 : STD_LOGIC;
    signal freq_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal freq_ce0 : STD_LOGIC;
    signal freq_we0 : STD_LOGIC;
    signal freq_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal freq_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_merge_fu_4136_ap_start : STD_LOGIC;
    signal grp_merge_fu_4136_ap_done : STD_LOGIC;
    signal grp_merge_fu_4136_ap_idle : STD_LOGIC;
    signal grp_merge_fu_4136_ap_ready : STD_LOGIC;
    signal grp_merge_fu_4136_arr_0_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_merge_fu_4136_arr_0_ce0 : STD_LOGIC;
    signal grp_merge_fu_4136_arr_0_we0 : STD_LOGIC;
    signal grp_merge_fu_4136_arr_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_merge_fu_4136_arr_1_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_merge_fu_4136_arr_1_ce0 : STD_LOGIC;
    signal grp_merge_fu_4136_arr_1_we0 : STD_LOGIC;
    signal grp_merge_fu_4136_arr_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_3984 : STD_LOGIC_VECTOR (13 downto 0);
    signal num_matches_0_reg_3995 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul1_reg_4007 : STD_LOGIC_VECTOR (19 downto 0);
    signal j_0_reg_4019 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_mul_reg_4031 : STD_LOGIC_VECTOR (22 downto 0);
    signal i_0_i_reg_4043 : STD_LOGIC_VECTOR (6 downto 0);
    signal distance_0_i_reg_4054 : STD_LOGIC_VECTOR (9 downto 0);
    signal curr_size_0_i_reg_4066 : STD_LOGIC_VECTOR (31 downto 0);
    signal left_start_0_i_reg_4078 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state109 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal j1_0_reg_4090 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln57_fu_6454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_freq_0_reg_4101 : STD_LOGIC_VECTOR (31 downto 0);
    signal most_freq_0_reg_4113 : STD_LOGIC_VECTOR (31 downto 0);
    signal j2_0_reg_4125 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_merge_fu_4136_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln32_fu_4146_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_1_fu_4180_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_fu_4169_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_2_fu_4191_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_3_fu_4202_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_4_fu_4213_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_5_fu_4224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_6_fu_4235_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_7_fu_4246_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_8_fu_4257_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_9_fu_4268_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_10_fu_4279_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_11_fu_4290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_12_fu_4301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_13_fu_4312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_14_fu_4323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_15_fu_4334_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_16_fu_4345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_17_fu_4356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_18_fu_4367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_19_fu_4378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_20_fu_4389_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_21_fu_4400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_22_fu_4411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_23_fu_4422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_24_fu_4433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_25_fu_4444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_26_fu_4455_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_27_fu_4466_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_28_fu_4477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_29_fu_4488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_30_fu_4499_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_31_fu_4510_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_32_fu_4521_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_33_fu_4532_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_34_fu_4543_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_35_fu_4554_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_36_fu_4565_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_37_fu_4576_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_38_fu_4587_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_39_fu_4598_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_40_fu_4609_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_41_fu_4620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_42_fu_4631_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_43_fu_4642_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_44_fu_4653_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_45_fu_4664_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_46_fu_4675_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_47_fu_4686_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_48_fu_4697_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_49_fu_4708_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_50_fu_4719_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_51_fu_4730_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_52_fu_4741_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_53_fu_4752_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_54_fu_4763_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_55_fu_4774_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_56_fu_4785_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_57_fu_4796_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_58_fu_4807_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_59_fu_4818_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_60_fu_4829_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_61_fu_4840_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_62_fu_4851_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_63_fu_4862_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_64_fu_4873_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_65_fu_4884_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_66_fu_4895_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_67_fu_4906_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_68_fu_4917_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_69_fu_4928_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_70_fu_4939_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_71_fu_4950_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_72_fu_4961_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_73_fu_4972_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_74_fu_4983_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_75_fu_4994_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_76_fu_5005_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_77_fu_5016_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_78_fu_5027_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_79_fu_5038_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_80_fu_5049_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_81_fu_5060_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_82_fu_5071_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_83_fu_5082_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_84_fu_5093_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_85_fu_5104_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_86_fu_5115_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_87_fu_5126_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_88_fu_5137_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_89_fu_5148_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_90_fu_5159_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_91_fu_5170_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_92_fu_5181_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_93_fu_5192_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_94_fu_5203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_95_fu_5214_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_96_fu_5225_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_97_fu_5236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_fu_5241_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_1_fu_5270_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_2_fu_5281_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_3_fu_5292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_4_fu_5303_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_5_fu_5314_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_6_fu_5325_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_7_fu_5336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_8_fu_5347_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_9_fu_5358_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_10_fu_5369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_11_fu_5380_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_12_fu_5391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_13_fu_5402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_14_fu_5413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_15_fu_5424_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_16_fu_5435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_17_fu_5446_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_18_fu_5457_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_19_fu_5468_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_20_fu_5479_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_21_fu_5490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_22_fu_5501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_23_fu_5512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_24_fu_5523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_25_fu_5534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_26_fu_5545_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_27_fu_5556_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_28_fu_5567_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_29_fu_5578_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_30_fu_5589_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_31_fu_5600_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_32_fu_5611_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_33_fu_5622_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_34_fu_5633_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_35_fu_5644_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_36_fu_5655_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_37_fu_5666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_38_fu_5677_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_39_fu_5688_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_40_fu_5699_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_41_fu_5710_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_42_fu_5721_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_43_fu_5732_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_44_fu_5743_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_45_fu_5754_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_46_fu_5765_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_47_fu_5776_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_48_fu_5787_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_49_fu_5798_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_50_fu_5809_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_51_fu_5820_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_52_fu_5831_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_53_fu_5842_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_54_fu_5853_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_55_fu_5864_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_56_fu_5875_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_57_fu_5886_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_58_fu_5897_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_59_fu_5908_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_60_fu_5919_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_61_fu_5930_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_62_fu_5941_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_63_fu_5952_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_64_fu_5963_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_65_fu_5974_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_66_fu_5985_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_67_fu_5996_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_68_fu_6007_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_69_fu_6018_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_70_fu_6029_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_71_fu_6040_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_72_fu_6051_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_73_fu_6062_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_74_fu_6073_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_75_fu_6084_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_76_fu_6095_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_77_fu_6106_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_78_fu_6117_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_79_fu_6128_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_80_fu_6139_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_81_fu_6150_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_82_fu_6161_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_83_fu_6172_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_84_fu_6183_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_85_fu_6194_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_86_fu_6205_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_87_fu_6216_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_88_fu_6227_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_89_fu_6238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_90_fu_6249_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_91_fu_6260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_92_fu_6271_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_93_fu_6282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_94_fu_6293_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_95_fu_6304_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_96_fu_6315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_97_fu_6326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln87_fu_6348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln87_1_fu_6369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_fu_6466_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln64_fu_6486_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln65_fu_6514_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal zext_ln86_fu_6354_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln44_fu_6359_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_freq_fu_6519_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln34_fu_4174_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_fu_4185_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_1_fu_4196_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_2_fu_4207_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_3_fu_4218_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_4_fu_4229_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_5_fu_4240_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_6_fu_4251_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_7_fu_4262_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_8_fu_4273_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_9_fu_4284_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_10_fu_4295_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_11_fu_4306_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_12_fu_4317_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_13_fu_4328_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_14_fu_4339_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_15_fu_4350_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_16_fu_4361_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_17_fu_4372_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_18_fu_4383_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_19_fu_4394_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_20_fu_4405_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_21_fu_4416_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_22_fu_4427_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_23_fu_4438_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_24_fu_4449_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_25_fu_4460_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_26_fu_4471_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_27_fu_4482_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_28_fu_4493_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_29_fu_4504_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_30_fu_4515_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_31_fu_4526_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_32_fu_4537_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_33_fu_4548_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_34_fu_4559_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_35_fu_4570_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_36_fu_4581_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_37_fu_4592_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_38_fu_4603_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_39_fu_4614_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_40_fu_4625_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_41_fu_4636_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_42_fu_4647_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_43_fu_4658_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_44_fu_4669_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_45_fu_4680_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_46_fu_4691_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_47_fu_4702_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_48_fu_4713_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_49_fu_4724_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_50_fu_4735_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_51_fu_4746_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_52_fu_4757_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_53_fu_4768_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_54_fu_4779_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_55_fu_4790_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_56_fu_4801_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_57_fu_4812_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_58_fu_4823_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_59_fu_4834_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_60_fu_4845_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_61_fu_4856_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_62_fu_4867_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_63_fu_4878_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_64_fu_4889_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_65_fu_4900_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_66_fu_4911_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_67_fu_4922_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_68_fu_4933_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_69_fu_4944_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_70_fu_4955_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_71_fu_4966_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_72_fu_4977_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_73_fu_4988_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_74_fu_4999_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_75_fu_5010_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_76_fu_5021_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_77_fu_5032_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_78_fu_5043_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_79_fu_5054_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_80_fu_5065_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_81_fu_5076_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_82_fu_5087_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_83_fu_5098_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_84_fu_5109_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_85_fu_5120_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_86_fu_5131_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_87_fu_5142_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_88_fu_5153_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_89_fu_5164_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_90_fu_5175_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_91_fu_5186_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_92_fu_5197_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_93_fu_5208_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_94_fu_5219_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln34_95_fu_5230_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal or_ln43_fu_5264_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_fu_5275_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_1_fu_5286_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_2_fu_5297_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_3_fu_5308_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_4_fu_5319_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_5_fu_5330_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_6_fu_5341_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_7_fu_5352_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_8_fu_5363_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_9_fu_5374_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_10_fu_5385_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_11_fu_5396_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_12_fu_5407_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_13_fu_5418_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_14_fu_5429_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_15_fu_5440_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_16_fu_5451_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_17_fu_5462_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_18_fu_5473_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_19_fu_5484_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_20_fu_5495_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_21_fu_5506_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_22_fu_5517_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_23_fu_5528_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_24_fu_5539_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_25_fu_5550_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_26_fu_5561_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_27_fu_5572_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_28_fu_5583_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_29_fu_5594_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_30_fu_5605_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_31_fu_5616_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_32_fu_5627_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_33_fu_5638_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_34_fu_5649_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_35_fu_5660_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_36_fu_5671_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_37_fu_5682_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_38_fu_5693_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_39_fu_5704_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_40_fu_5715_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_41_fu_5726_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_42_fu_5737_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_43_fu_5748_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_44_fu_5759_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_45_fu_5770_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_46_fu_5781_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_47_fu_5792_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_48_fu_5803_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_49_fu_5814_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_50_fu_5825_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_51_fu_5836_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_52_fu_5847_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_53_fu_5858_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_54_fu_5869_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_55_fu_5880_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_56_fu_5891_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_57_fu_5902_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_58_fu_5913_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_59_fu_5924_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_60_fu_5935_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_61_fu_5946_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_62_fu_5957_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_63_fu_5968_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_64_fu_5979_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_65_fu_5990_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_66_fu_6001_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_67_fu_6012_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_68_fu_6023_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_69_fu_6034_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_70_fu_6045_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_71_fu_6056_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_72_fu_6067_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_73_fu_6078_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_74_fu_6089_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_75_fu_6100_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_76_fu_6111_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_77_fu_6122_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_78_fu_6133_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_79_fu_6144_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_80_fu_6155_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_81_fu_6166_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_82_fu_6177_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_83_fu_6188_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_84_fu_6199_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_85_fu_6210_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_86_fu_6221_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_87_fu_6232_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_88_fu_6243_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_89_fu_6254_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_90_fu_6265_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_91_fu_6276_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_92_fu_6287_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_93_fu_6298_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_94_fu_6309_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln43_95_fu_6320_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal xor_ln87_fu_6363_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln87_2_fu_6374_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln30_fu_6402_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_1_fu_6408_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln8_fu_6414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln32_fu_6429_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln8_1_fu_6434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln62_fu_6471_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln74_fu_6491_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln74_fu_6494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal num_matches_fu_6500_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln65_fu_6514_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln66_fu_6526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (112 downto 0);

    component merge IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        arr_0_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        arr_0_ce0 : OUT STD_LOGIC;
        arr_0_we0 : OUT STD_LOGIC;
        arr_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        arr_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        arr_1_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        arr_1_ce0 : OUT STD_LOGIC;
        arr_1_we0 : OUT STD_LOGIC;
        arr_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        arr_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        l : IN STD_LOGIC_VECTOR (31 downto 0);
        m : IN STD_LOGIC_VECTOR (31 downto 0);
        r : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component knn_bitcount IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component merge_L_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component knn_a_data_assign IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component knn_freq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    bitcount_U : component knn_bitcount
    generic map (
        DataWidth => 4,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bitcount_address0,
        ce0 => bitcount_ce0,
        q0 => bitcount_q0);

    distances_0_U : component merge_L_0
    generic map (
        DataWidth => 32,
        AddressRange => 60000,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => distances_0_address0,
        ce0 => distances_0_ce0,
        we0 => distances_0_we0,
        d0 => distances_0_d0,
        q0 => distances_0_q0);

    distances_1_U : component merge_L_0
    generic map (
        DataWidth => 32,
        AddressRange => 60000,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => distances_1_address0,
        ce0 => distances_1_ce0,
        we0 => distances_1_we0,
        d0 => distances_1_d0,
        q0 => distances_1_q0);

    a_data_assign_U : component knn_a_data_assign
    generic map (
        DataWidth => 8,
        AddressRange => 98,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => a_data_assign_address0,
        ce0 => a_data_assign_ce0,
        we0 => a_data_assign_we0,
        d0 => a_data_assign_d0,
        q0 => a_data_assign_q0,
        address1 => a_data_assign_address1,
        ce1 => a_data_assign_ce1,
        we1 => a_data_assign_we1,
        d1 => a_data_assign_d1);

    b_data_assign_U : component knn_a_data_assign
    generic map (
        DataWidth => 8,
        AddressRange => 98,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_data_assign_address0,
        ce0 => b_data_assign_ce0,
        we0 => b_data_assign_we0,
        d0 => train_samples_data_q0,
        q0 => b_data_assign_q0,
        address1 => b_data_assign_address1,
        ce1 => b_data_assign_ce1,
        we1 => b_data_assign_we1,
        d1 => train_samples_data_q1);

    freq_U : component knn_freq
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => freq_address0,
        ce0 => freq_ce0,
        we0 => freq_we0,
        d0 => freq_d0,
        q0 => freq_q0);

    grp_merge_fu_4136 : component merge
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_merge_fu_4136_ap_start,
        ap_done => grp_merge_fu_4136_ap_done,
        ap_idle => grp_merge_fu_4136_ap_idle,
        ap_ready => grp_merge_fu_4136_ap_ready,
        arr_0_address0 => grp_merge_fu_4136_arr_0_address0,
        arr_0_ce0 => grp_merge_fu_4136_arr_0_ce0,
        arr_0_we0 => grp_merge_fu_4136_arr_0_we0,
        arr_0_d0 => grp_merge_fu_4136_arr_0_d0,
        arr_0_q0 => distances_0_q0,
        arr_1_address0 => grp_merge_fu_4136_arr_1_address0,
        arr_1_ce0 => grp_merge_fu_4136_arr_1_ce0,
        arr_1_we0 => grp_merge_fu_4136_arr_1_we0,
        arr_1_d0 => grp_merge_fu_4136_arr_1_d0,
        arr_1_q0 => distances_1_q0,
        l => left_start_0_i_reg_4078,
        m => mid_reg_9095,
        r => right_end_reg_9100);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_merge_fu_4136_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_merge_fu_4136_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state108) and (icmp_ln26_fu_6396_p2 = ap_const_lv1_1))) then 
                    grp_merge_fu_4136_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_merge_fu_4136_ap_ready = ap_const_logic_1)) then 
                    grp_merge_fu_4136_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    curr_size_0_i_reg_4066_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state52) and (icmp_ln41_fu_5252_p2 = ap_const_lv1_1))) then 
                curr_size_0_i_reg_4066 <= ap_const_lv32_1;
            elsif (((icmp_ln26_fu_6396_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state108))) then 
                curr_size_0_i_reg_4066 <= curr_size_reg_9085;
            end if; 
        end if;
    end process;

    distance_0_i_reg_4054_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
                distance_0_i_reg_4054 <= distance_fu_6378_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
                distance_0_i_reg_4054 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_4043_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
                i_0_i_reg_4043 <= i_reg_9057;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
                i_0_i_reg_4043 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_0_reg_3984_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln62_fu_6475_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state111))) then 
                i_0_reg_3984 <= i_5_reg_7540;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_3984 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    j1_0_reg_4090_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state107) and (icmp_ln22_fu_6384_p2 = ap_const_lv1_1))) then 
                j1_0_reg_4090 <= ap_const_lv4_0;
            elsif (((icmp_ln57_fu_6454_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state110))) then 
                j1_0_reg_4090 <= j_5_fu_6460_p2;
            end if; 
        end if;
    end process;

    j2_0_reg_4125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state110) and (icmp_ln57_fu_6454_p2 = ap_const_lv1_1))) then 
                j2_0_reg_4125 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
                j2_0_reg_4125 <= j_6_reg_9121;
            end if; 
        end if;
    end process;

    j_0_reg_4019_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state104) and (icmp_ln86_fu_6336_p2 = ap_const_lv1_1))) then 
                j_0_reg_4019 <= j_reg_8543;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
                j_0_reg_4019 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    left_start_0_i_reg_4078_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state109) and (grp_merge_fu_4136_ap_done = ap_const_logic_1))) then 
                left_start_0_i_reg_4078 <= left_start_reg_9105;
            elsif (((icmp_ln22_fu_6384_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state107))) then 
                left_start_0_i_reg_4078 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    max_freq_0_reg_4101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state110) and (icmp_ln57_fu_6454_p2 = ap_const_lv1_1))) then 
                max_freq_0_reg_4101 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
                max_freq_0_reg_4101 <= select_ln66_fu_6532_p3;
            end if; 
        end if;
    end process;

    most_freq_0_reg_4113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state110) and (icmp_ln57_fu_6454_p2 = ap_const_lv1_1))) then 
                most_freq_0_reg_4113 <= ap_const_lv32_FFFFFFFF;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
                most_freq_0_reg_4113 <= select_ln66_1_fu_6540_p3;
            end if; 
        end if;
    end process;

    num_matches_0_reg_3995_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln62_fu_6475_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state111))) then 
                num_matches_0_reg_3995 <= select_ln74_fu_6506_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                num_matches_0_reg_3995 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_4007_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln62_fu_6475_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state111))) then 
                phi_mul1_reg_4007 <= add_ln32_1_reg_7532;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul1_reg_4007 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_4031_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state104) and (icmp_ln86_fu_6336_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_4031 <= add_ln41_reg_8535;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
                phi_mul_reg_4031 <= ap_const_lv23_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln32_1_reg_7532 <= add_ln32_1_fu_4151_p2;
                i_5_reg_7540 <= i_5_fu_4163_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
                add_ln41_reg_8535 <= add_ln41_fu_5246_p2;
                j_reg_8543 <= j_fu_5258_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_6384_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state107))) then
                    curr_size_reg_9085(31 downto 1) <= curr_size_fu_6390_p2(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state112)) then
                freq_addr_1_reg_9141 <= sext_ln65_fu_6514_p1(4 - 1 downto 0);
                most_freq_reg_9136 <= distances_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state104)) then
                i_reg_9057 <= i_fu_6342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state111)) then
                j_6_reg_9121 <= j_6_fu_6480_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state108) and (icmp_ln26_fu_6396_p2 = ap_const_lv1_1))) then
                left_start_reg_9105 <= left_start_fu_6449_p2;
                mid_reg_9095 <= mid_fu_6420_p3;
                right_end_reg_9100 <= right_end_fu_6440_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                test_sample_label_reg_7570 <= test_samples_label_q0;
                test_samples_data_lo_1_reg_7580 <= test_samples_data_q1;
                test_samples_data_lo_reg_7575 <= test_samples_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                test_samples_data_lo_10_reg_7675 <= test_samples_data_q0;
                test_samples_data_lo_11_reg_7680 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                test_samples_data_lo_12_reg_7695 <= test_samples_data_q0;
                test_samples_data_lo_13_reg_7700 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                test_samples_data_lo_14_reg_7715 <= test_samples_data_q0;
                test_samples_data_lo_15_reg_7720 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                test_samples_data_lo_16_reg_7735 <= test_samples_data_q0;
                test_samples_data_lo_17_reg_7740 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                test_samples_data_lo_18_reg_7755 <= test_samples_data_q0;
                test_samples_data_lo_19_reg_7760 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                test_samples_data_lo_20_reg_7775 <= test_samples_data_q0;
                test_samples_data_lo_21_reg_7780 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                test_samples_data_lo_22_reg_7795 <= test_samples_data_q0;
                test_samples_data_lo_23_reg_7800 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                test_samples_data_lo_24_reg_7815 <= test_samples_data_q0;
                test_samples_data_lo_25_reg_7820 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                test_samples_data_lo_26_reg_7835 <= test_samples_data_q0;
                test_samples_data_lo_27_reg_7840 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                test_samples_data_lo_28_reg_7855 <= test_samples_data_q0;
                test_samples_data_lo_29_reg_7860 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                test_samples_data_lo_2_reg_7595 <= test_samples_data_q0;
                test_samples_data_lo_3_reg_7600 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                test_samples_data_lo_30_reg_7875 <= test_samples_data_q0;
                test_samples_data_lo_31_reg_7880 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                test_samples_data_lo_32_reg_7895 <= test_samples_data_q0;
                test_samples_data_lo_33_reg_7900 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                test_samples_data_lo_34_reg_7915 <= test_samples_data_q0;
                test_samples_data_lo_35_reg_7920 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                test_samples_data_lo_36_reg_7935 <= test_samples_data_q0;
                test_samples_data_lo_37_reg_7940 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                test_samples_data_lo_38_reg_7955 <= test_samples_data_q0;
                test_samples_data_lo_39_reg_7960 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                test_samples_data_lo_40_reg_7975 <= test_samples_data_q0;
                test_samples_data_lo_41_reg_7980 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                test_samples_data_lo_42_reg_7995 <= test_samples_data_q0;
                test_samples_data_lo_43_reg_8000 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                test_samples_data_lo_44_reg_8015 <= test_samples_data_q0;
                test_samples_data_lo_45_reg_8020 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                test_samples_data_lo_46_reg_8035 <= test_samples_data_q0;
                test_samples_data_lo_47_reg_8040 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                test_samples_data_lo_48_reg_8055 <= test_samples_data_q0;
                test_samples_data_lo_49_reg_8060 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                test_samples_data_lo_4_reg_7615 <= test_samples_data_q0;
                test_samples_data_lo_5_reg_7620 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                test_samples_data_lo_50_reg_8075 <= test_samples_data_q0;
                test_samples_data_lo_51_reg_8080 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                test_samples_data_lo_52_reg_8095 <= test_samples_data_q0;
                test_samples_data_lo_53_reg_8100 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                test_samples_data_lo_54_reg_8115 <= test_samples_data_q0;
                test_samples_data_lo_55_reg_8120 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                test_samples_data_lo_56_reg_8135 <= test_samples_data_q0;
                test_samples_data_lo_57_reg_8140 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                test_samples_data_lo_58_reg_8155 <= test_samples_data_q0;
                test_samples_data_lo_59_reg_8160 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                test_samples_data_lo_60_reg_8175 <= test_samples_data_q0;
                test_samples_data_lo_61_reg_8180 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                test_samples_data_lo_62_reg_8195 <= test_samples_data_q0;
                test_samples_data_lo_63_reg_8200 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                test_samples_data_lo_64_reg_8215 <= test_samples_data_q0;
                test_samples_data_lo_65_reg_8220 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                test_samples_data_lo_66_reg_8235 <= test_samples_data_q0;
                test_samples_data_lo_67_reg_8240 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                test_samples_data_lo_68_reg_8255 <= test_samples_data_q0;
                test_samples_data_lo_69_reg_8260 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                test_samples_data_lo_6_reg_7635 <= test_samples_data_q0;
                test_samples_data_lo_7_reg_7640 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                test_samples_data_lo_70_reg_8275 <= test_samples_data_q0;
                test_samples_data_lo_71_reg_8280 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                test_samples_data_lo_72_reg_8295 <= test_samples_data_q0;
                test_samples_data_lo_73_reg_8300 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                test_samples_data_lo_74_reg_8315 <= test_samples_data_q0;
                test_samples_data_lo_75_reg_8320 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                test_samples_data_lo_76_reg_8335 <= test_samples_data_q0;
                test_samples_data_lo_77_reg_8340 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                test_samples_data_lo_78_reg_8355 <= test_samples_data_q0;
                test_samples_data_lo_79_reg_8360 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                test_samples_data_lo_80_reg_8375 <= test_samples_data_q0;
                test_samples_data_lo_81_reg_8380 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                test_samples_data_lo_82_reg_8395 <= test_samples_data_q0;
                test_samples_data_lo_83_reg_8400 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                test_samples_data_lo_84_reg_8415 <= test_samples_data_q0;
                test_samples_data_lo_85_reg_8420 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                test_samples_data_lo_86_reg_8435 <= test_samples_data_q0;
                test_samples_data_lo_87_reg_8440 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                test_samples_data_lo_88_reg_8455 <= test_samples_data_q0;
                test_samples_data_lo_89_reg_8460 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                test_samples_data_lo_8_reg_7655 <= test_samples_data_q0;
                test_samples_data_lo_9_reg_7660 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                test_samples_data_lo_90_reg_8475 <= test_samples_data_q0;
                test_samples_data_lo_91_reg_8480 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                test_samples_data_lo_92_reg_8495 <= test_samples_data_q0;
                test_samples_data_lo_93_reg_8500 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                test_samples_data_lo_94_reg_8515 <= test_samples_data_q0;
                test_samples_data_lo_95_reg_8520 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                test_samples_data_lo_96_reg_8525 <= test_samples_data_q0;
                test_samples_data_lo_97_reg_8530 <= test_samples_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state103)) then
                train_samples_label_1_reg_9049 <= train_samples_label_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state102)) then
                    zext_ln43_reg_9038(15 downto 0) <= zext_ln43_fu_6331_p1(15 downto 0);
            end if;
        end if;
    end process;
    zext_ln43_reg_9038(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    curr_size_reg_9085(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln32_fu_4157_p2, ap_CS_fsm_state52, icmp_ln41_fu_5252_p2, ap_CS_fsm_state104, icmp_ln86_fu_6336_p2, ap_CS_fsm_state107, icmp_ln22_fu_6384_p2, ap_CS_fsm_state108, icmp_ln26_fu_6396_p2, ap_CS_fsm_state110, ap_CS_fsm_state111, icmp_ln62_fu_6475_p2, grp_merge_fu_4136_ap_done, ap_CS_fsm_state109, icmp_ln57_fu_6454_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln32_fu_4157_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state52) and (icmp_ln41_fu_5252_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state107;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state104) and (icmp_ln86_fu_6336_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state105;
                end if;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state107 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state107) and (icmp_ln22_fu_6384_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state110;
                else
                    ap_NS_fsm <= ap_ST_fsm_state108;
                end if;
            when ap_ST_fsm_state108 => 
                if (((icmp_ln26_fu_6396_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state108))) then
                    ap_NS_fsm <= ap_ST_fsm_state107;
                else
                    ap_NS_fsm <= ap_ST_fsm_state109;
                end if;
            when ap_ST_fsm_state109 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state109) and (grp_merge_fu_4136_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state108;
                else
                    ap_NS_fsm <= ap_ST_fsm_state109;
                end if;
            when ap_ST_fsm_state110 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state110) and (icmp_ln57_fu_6454_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state111;
                else
                    ap_NS_fsm <= ap_ST_fsm_state110;
                end if;
            when ap_ST_fsm_state111 => 
                if (((icmp_ln62_fu_6475_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state111))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state112;
                end if;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    a_data_assign_address0_assign_proc : process(ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state104, zext_ln87_fu_6348_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            a_data_assign_address0 <= zext_ln87_fu_6348_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            a_data_assign_address0 <= ap_const_lv64_60(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            a_data_assign_address0 <= ap_const_lv64_5E(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            a_data_assign_address0 <= ap_const_lv64_5C(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            a_data_assign_address0 <= ap_const_lv64_5A(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            a_data_assign_address0 <= ap_const_lv64_58(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            a_data_assign_address0 <= ap_const_lv64_56(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            a_data_assign_address0 <= ap_const_lv64_54(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            a_data_assign_address0 <= ap_const_lv64_52(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            a_data_assign_address0 <= ap_const_lv64_50(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            a_data_assign_address0 <= ap_const_lv64_4E(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            a_data_assign_address0 <= ap_const_lv64_4C(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            a_data_assign_address0 <= ap_const_lv64_4A(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            a_data_assign_address0 <= ap_const_lv64_48(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            a_data_assign_address0 <= ap_const_lv64_46(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            a_data_assign_address0 <= ap_const_lv64_44(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            a_data_assign_address0 <= ap_const_lv64_42(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            a_data_assign_address0 <= ap_const_lv64_40(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            a_data_assign_address0 <= ap_const_lv64_3E(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            a_data_assign_address0 <= ap_const_lv64_3C(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            a_data_assign_address0 <= ap_const_lv64_3A(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            a_data_assign_address0 <= ap_const_lv64_38(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            a_data_assign_address0 <= ap_const_lv64_36(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            a_data_assign_address0 <= ap_const_lv64_34(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            a_data_assign_address0 <= ap_const_lv64_32(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            a_data_assign_address0 <= ap_const_lv64_30(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            a_data_assign_address0 <= ap_const_lv64_2E(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            a_data_assign_address0 <= ap_const_lv64_2C(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            a_data_assign_address0 <= ap_const_lv64_2A(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            a_data_assign_address0 <= ap_const_lv64_28(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            a_data_assign_address0 <= ap_const_lv64_26(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            a_data_assign_address0 <= ap_const_lv64_24(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            a_data_assign_address0 <= ap_const_lv64_22(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            a_data_assign_address0 <= ap_const_lv64_20(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            a_data_assign_address0 <= ap_const_lv64_1E(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            a_data_assign_address0 <= ap_const_lv64_1C(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            a_data_assign_address0 <= ap_const_lv64_1A(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            a_data_assign_address0 <= ap_const_lv64_18(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            a_data_assign_address0 <= ap_const_lv64_16(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            a_data_assign_address0 <= ap_const_lv64_14(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            a_data_assign_address0 <= ap_const_lv64_12(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            a_data_assign_address0 <= ap_const_lv64_10(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            a_data_assign_address0 <= ap_const_lv64_E(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            a_data_assign_address0 <= ap_const_lv64_C(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            a_data_assign_address0 <= ap_const_lv64_A(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            a_data_assign_address0 <= ap_const_lv64_8(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            a_data_assign_address0 <= ap_const_lv64_6(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            a_data_assign_address0 <= ap_const_lv64_4(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            a_data_assign_address0 <= ap_const_lv64_2(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            a_data_assign_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        else 
            a_data_assign_address0 <= "XXXXXXX";
        end if; 
    end process;


    a_data_assign_address1_assign_proc : process(ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            a_data_assign_address1 <= ap_const_lv64_61(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            a_data_assign_address1 <= ap_const_lv64_5F(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            a_data_assign_address1 <= ap_const_lv64_5D(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            a_data_assign_address1 <= ap_const_lv64_5B(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            a_data_assign_address1 <= ap_const_lv64_59(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            a_data_assign_address1 <= ap_const_lv64_57(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            a_data_assign_address1 <= ap_const_lv64_55(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            a_data_assign_address1 <= ap_const_lv64_53(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            a_data_assign_address1 <= ap_const_lv64_51(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            a_data_assign_address1 <= ap_const_lv64_4F(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            a_data_assign_address1 <= ap_const_lv64_4D(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            a_data_assign_address1 <= ap_const_lv64_4B(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            a_data_assign_address1 <= ap_const_lv64_49(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            a_data_assign_address1 <= ap_const_lv64_47(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            a_data_assign_address1 <= ap_const_lv64_45(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            a_data_assign_address1 <= ap_const_lv64_43(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            a_data_assign_address1 <= ap_const_lv64_41(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            a_data_assign_address1 <= ap_const_lv64_3F(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            a_data_assign_address1 <= ap_const_lv64_3D(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            a_data_assign_address1 <= ap_const_lv64_3B(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            a_data_assign_address1 <= ap_const_lv64_39(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            a_data_assign_address1 <= ap_const_lv64_37(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            a_data_assign_address1 <= ap_const_lv64_35(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            a_data_assign_address1 <= ap_const_lv64_33(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            a_data_assign_address1 <= ap_const_lv64_31(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            a_data_assign_address1 <= ap_const_lv64_2F(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            a_data_assign_address1 <= ap_const_lv64_2D(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            a_data_assign_address1 <= ap_const_lv64_2B(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            a_data_assign_address1 <= ap_const_lv64_29(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            a_data_assign_address1 <= ap_const_lv64_27(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            a_data_assign_address1 <= ap_const_lv64_25(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            a_data_assign_address1 <= ap_const_lv64_23(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            a_data_assign_address1 <= ap_const_lv64_21(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            a_data_assign_address1 <= ap_const_lv64_1F(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            a_data_assign_address1 <= ap_const_lv64_1D(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            a_data_assign_address1 <= ap_const_lv64_1B(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            a_data_assign_address1 <= ap_const_lv64_19(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            a_data_assign_address1 <= ap_const_lv64_17(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            a_data_assign_address1 <= ap_const_lv64_15(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            a_data_assign_address1 <= ap_const_lv64_13(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            a_data_assign_address1 <= ap_const_lv64_11(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            a_data_assign_address1 <= ap_const_lv64_F(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            a_data_assign_address1 <= ap_const_lv64_D(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            a_data_assign_address1 <= ap_const_lv64_B(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            a_data_assign_address1 <= ap_const_lv64_9(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            a_data_assign_address1 <= ap_const_lv64_7(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            a_data_assign_address1 <= ap_const_lv64_5(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            a_data_assign_address1 <= ap_const_lv64_3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            a_data_assign_address1 <= ap_const_lv64_1(7 - 1 downto 0);
        else 
            a_data_assign_address1 <= "XXXXXXX";
        end if; 
    end process;


    a_data_assign_ce0_assign_proc : process(ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state104)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            a_data_assign_ce0 <= ap_const_logic_1;
        else 
            a_data_assign_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_data_assign_ce1_assign_proc : process(ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            a_data_assign_ce1 <= ap_const_logic_1;
        else 
            a_data_assign_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    a_data_assign_d0_assign_proc : process(test_samples_data_lo_reg_7575, test_samples_data_lo_2_reg_7595, test_samples_data_lo_4_reg_7615, test_samples_data_lo_6_reg_7635, test_samples_data_lo_8_reg_7655, test_samples_data_lo_10_reg_7675, test_samples_data_lo_12_reg_7695, test_samples_data_lo_14_reg_7715, test_samples_data_lo_16_reg_7735, test_samples_data_lo_18_reg_7755, test_samples_data_lo_20_reg_7775, test_samples_data_lo_22_reg_7795, test_samples_data_lo_24_reg_7815, test_samples_data_lo_26_reg_7835, test_samples_data_lo_28_reg_7855, test_samples_data_lo_30_reg_7875, test_samples_data_lo_32_reg_7895, test_samples_data_lo_34_reg_7915, test_samples_data_lo_36_reg_7935, test_samples_data_lo_38_reg_7955, test_samples_data_lo_40_reg_7975, test_samples_data_lo_42_reg_7995, test_samples_data_lo_44_reg_8015, test_samples_data_lo_46_reg_8035, test_samples_data_lo_48_reg_8055, test_samples_data_lo_50_reg_8075, test_samples_data_lo_52_reg_8095, test_samples_data_lo_54_reg_8115, test_samples_data_lo_56_reg_8135, test_samples_data_lo_58_reg_8155, test_samples_data_lo_60_reg_8175, test_samples_data_lo_62_reg_8195, test_samples_data_lo_64_reg_8215, test_samples_data_lo_66_reg_8235, test_samples_data_lo_68_reg_8255, test_samples_data_lo_70_reg_8275, test_samples_data_lo_72_reg_8295, test_samples_data_lo_74_reg_8315, test_samples_data_lo_76_reg_8335, test_samples_data_lo_78_reg_8355, test_samples_data_lo_80_reg_8375, test_samples_data_lo_82_reg_8395, test_samples_data_lo_84_reg_8415, test_samples_data_lo_86_reg_8435, test_samples_data_lo_88_reg_8455, test_samples_data_lo_90_reg_8475, test_samples_data_lo_92_reg_8495, test_samples_data_lo_94_reg_8515, test_samples_data_lo_96_reg_8525, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            a_data_assign_d0 <= test_samples_data_lo_96_reg_8525;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            a_data_assign_d0 <= test_samples_data_lo_94_reg_8515;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            a_data_assign_d0 <= test_samples_data_lo_92_reg_8495;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            a_data_assign_d0 <= test_samples_data_lo_90_reg_8475;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            a_data_assign_d0 <= test_samples_data_lo_88_reg_8455;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            a_data_assign_d0 <= test_samples_data_lo_86_reg_8435;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            a_data_assign_d0 <= test_samples_data_lo_84_reg_8415;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            a_data_assign_d0 <= test_samples_data_lo_82_reg_8395;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            a_data_assign_d0 <= test_samples_data_lo_80_reg_8375;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            a_data_assign_d0 <= test_samples_data_lo_78_reg_8355;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            a_data_assign_d0 <= test_samples_data_lo_76_reg_8335;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            a_data_assign_d0 <= test_samples_data_lo_74_reg_8315;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            a_data_assign_d0 <= test_samples_data_lo_72_reg_8295;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            a_data_assign_d0 <= test_samples_data_lo_70_reg_8275;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            a_data_assign_d0 <= test_samples_data_lo_68_reg_8255;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            a_data_assign_d0 <= test_samples_data_lo_66_reg_8235;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            a_data_assign_d0 <= test_samples_data_lo_64_reg_8215;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            a_data_assign_d0 <= test_samples_data_lo_62_reg_8195;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            a_data_assign_d0 <= test_samples_data_lo_60_reg_8175;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            a_data_assign_d0 <= test_samples_data_lo_58_reg_8155;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            a_data_assign_d0 <= test_samples_data_lo_56_reg_8135;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            a_data_assign_d0 <= test_samples_data_lo_54_reg_8115;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            a_data_assign_d0 <= test_samples_data_lo_52_reg_8095;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            a_data_assign_d0 <= test_samples_data_lo_50_reg_8075;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            a_data_assign_d0 <= test_samples_data_lo_48_reg_8055;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            a_data_assign_d0 <= test_samples_data_lo_46_reg_8035;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            a_data_assign_d0 <= test_samples_data_lo_44_reg_8015;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            a_data_assign_d0 <= test_samples_data_lo_42_reg_7995;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            a_data_assign_d0 <= test_samples_data_lo_40_reg_7975;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            a_data_assign_d0 <= test_samples_data_lo_38_reg_7955;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            a_data_assign_d0 <= test_samples_data_lo_36_reg_7935;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            a_data_assign_d0 <= test_samples_data_lo_34_reg_7915;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            a_data_assign_d0 <= test_samples_data_lo_32_reg_7895;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            a_data_assign_d0 <= test_samples_data_lo_30_reg_7875;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            a_data_assign_d0 <= test_samples_data_lo_28_reg_7855;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            a_data_assign_d0 <= test_samples_data_lo_26_reg_7835;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            a_data_assign_d0 <= test_samples_data_lo_24_reg_7815;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            a_data_assign_d0 <= test_samples_data_lo_22_reg_7795;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            a_data_assign_d0 <= test_samples_data_lo_20_reg_7775;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            a_data_assign_d0 <= test_samples_data_lo_18_reg_7755;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            a_data_assign_d0 <= test_samples_data_lo_16_reg_7735;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            a_data_assign_d0 <= test_samples_data_lo_14_reg_7715;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            a_data_assign_d0 <= test_samples_data_lo_12_reg_7695;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            a_data_assign_d0 <= test_samples_data_lo_10_reg_7675;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            a_data_assign_d0 <= test_samples_data_lo_8_reg_7655;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            a_data_assign_d0 <= test_samples_data_lo_6_reg_7635;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            a_data_assign_d0 <= test_samples_data_lo_4_reg_7615;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            a_data_assign_d0 <= test_samples_data_lo_2_reg_7595;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            a_data_assign_d0 <= test_samples_data_lo_reg_7575;
        else 
            a_data_assign_d0 <= "XXXXXXXX";
        end if; 
    end process;


    a_data_assign_d1_assign_proc : process(test_samples_data_lo_1_reg_7580, test_samples_data_lo_3_reg_7600, test_samples_data_lo_5_reg_7620, test_samples_data_lo_7_reg_7640, test_samples_data_lo_9_reg_7660, test_samples_data_lo_11_reg_7680, test_samples_data_lo_13_reg_7700, test_samples_data_lo_15_reg_7720, test_samples_data_lo_17_reg_7740, test_samples_data_lo_19_reg_7760, test_samples_data_lo_21_reg_7780, test_samples_data_lo_23_reg_7800, test_samples_data_lo_25_reg_7820, test_samples_data_lo_27_reg_7840, test_samples_data_lo_29_reg_7860, test_samples_data_lo_31_reg_7880, test_samples_data_lo_33_reg_7900, test_samples_data_lo_35_reg_7920, test_samples_data_lo_37_reg_7940, test_samples_data_lo_39_reg_7960, test_samples_data_lo_41_reg_7980, test_samples_data_lo_43_reg_8000, test_samples_data_lo_45_reg_8020, test_samples_data_lo_47_reg_8040, test_samples_data_lo_49_reg_8060, test_samples_data_lo_51_reg_8080, test_samples_data_lo_53_reg_8100, test_samples_data_lo_55_reg_8120, test_samples_data_lo_57_reg_8140, test_samples_data_lo_59_reg_8160, test_samples_data_lo_61_reg_8180, test_samples_data_lo_63_reg_8200, test_samples_data_lo_65_reg_8220, test_samples_data_lo_67_reg_8240, test_samples_data_lo_69_reg_8260, test_samples_data_lo_71_reg_8280, test_samples_data_lo_73_reg_8300, test_samples_data_lo_75_reg_8320, test_samples_data_lo_77_reg_8340, test_samples_data_lo_79_reg_8360, test_samples_data_lo_81_reg_8380, test_samples_data_lo_83_reg_8400, test_samples_data_lo_85_reg_8420, test_samples_data_lo_87_reg_8440, test_samples_data_lo_89_reg_8460, test_samples_data_lo_91_reg_8480, test_samples_data_lo_93_reg_8500, test_samples_data_lo_95_reg_8520, test_samples_data_lo_97_reg_8530, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            a_data_assign_d1 <= test_samples_data_lo_97_reg_8530;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            a_data_assign_d1 <= test_samples_data_lo_95_reg_8520;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            a_data_assign_d1 <= test_samples_data_lo_93_reg_8500;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            a_data_assign_d1 <= test_samples_data_lo_91_reg_8480;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            a_data_assign_d1 <= test_samples_data_lo_89_reg_8460;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            a_data_assign_d1 <= test_samples_data_lo_87_reg_8440;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            a_data_assign_d1 <= test_samples_data_lo_85_reg_8420;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            a_data_assign_d1 <= test_samples_data_lo_83_reg_8400;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            a_data_assign_d1 <= test_samples_data_lo_81_reg_8380;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            a_data_assign_d1 <= test_samples_data_lo_79_reg_8360;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            a_data_assign_d1 <= test_samples_data_lo_77_reg_8340;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            a_data_assign_d1 <= test_samples_data_lo_75_reg_8320;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            a_data_assign_d1 <= test_samples_data_lo_73_reg_8300;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            a_data_assign_d1 <= test_samples_data_lo_71_reg_8280;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            a_data_assign_d1 <= test_samples_data_lo_69_reg_8260;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            a_data_assign_d1 <= test_samples_data_lo_67_reg_8240;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            a_data_assign_d1 <= test_samples_data_lo_65_reg_8220;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            a_data_assign_d1 <= test_samples_data_lo_63_reg_8200;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            a_data_assign_d1 <= test_samples_data_lo_61_reg_8180;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            a_data_assign_d1 <= test_samples_data_lo_59_reg_8160;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            a_data_assign_d1 <= test_samples_data_lo_57_reg_8140;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            a_data_assign_d1 <= test_samples_data_lo_55_reg_8120;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            a_data_assign_d1 <= test_samples_data_lo_53_reg_8100;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            a_data_assign_d1 <= test_samples_data_lo_51_reg_8080;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            a_data_assign_d1 <= test_samples_data_lo_49_reg_8060;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            a_data_assign_d1 <= test_samples_data_lo_47_reg_8040;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            a_data_assign_d1 <= test_samples_data_lo_45_reg_8020;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            a_data_assign_d1 <= test_samples_data_lo_43_reg_8000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            a_data_assign_d1 <= test_samples_data_lo_41_reg_7980;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            a_data_assign_d1 <= test_samples_data_lo_39_reg_7960;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            a_data_assign_d1 <= test_samples_data_lo_37_reg_7940;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            a_data_assign_d1 <= test_samples_data_lo_35_reg_7920;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            a_data_assign_d1 <= test_samples_data_lo_33_reg_7900;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            a_data_assign_d1 <= test_samples_data_lo_31_reg_7880;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            a_data_assign_d1 <= test_samples_data_lo_29_reg_7860;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            a_data_assign_d1 <= test_samples_data_lo_27_reg_7840;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            a_data_assign_d1 <= test_samples_data_lo_25_reg_7820;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            a_data_assign_d1 <= test_samples_data_lo_23_reg_7800;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            a_data_assign_d1 <= test_samples_data_lo_21_reg_7780;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            a_data_assign_d1 <= test_samples_data_lo_19_reg_7760;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            a_data_assign_d1 <= test_samples_data_lo_17_reg_7740;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            a_data_assign_d1 <= test_samples_data_lo_15_reg_7720;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            a_data_assign_d1 <= test_samples_data_lo_13_reg_7700;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            a_data_assign_d1 <= test_samples_data_lo_11_reg_7680;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            a_data_assign_d1 <= test_samples_data_lo_9_reg_7660;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            a_data_assign_d1 <= test_samples_data_lo_7_reg_7640;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            a_data_assign_d1 <= test_samples_data_lo_5_reg_7620;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            a_data_assign_d1 <= test_samples_data_lo_3_reg_7600;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            a_data_assign_d1 <= test_samples_data_lo_1_reg_7580;
        else 
            a_data_assign_d1 <= "XXXXXXXX";
        end if; 
    end process;


    a_data_assign_we0_assign_proc : process(ap_CS_fsm_state52, icmp_ln41_fu_5252_p2, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or ((icmp_ln41_fu_5252_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52)))) then 
            a_data_assign_we0 <= ap_const_logic_1;
        else 
            a_data_assign_we0 <= ap_const_logic_0;
        end if; 
    end process;


    a_data_assign_we1_assign_proc : process(ap_CS_fsm_state52, icmp_ln41_fu_5252_p2, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or ((icmp_ln41_fu_5252_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52)))) then 
            a_data_assign_we1 <= ap_const_logic_1;
        else 
            a_data_assign_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln30_1_fu_6408_p2 <= std_logic_vector(unsigned(add_ln30_fu_6402_p2) + unsigned(curr_size_0_i_reg_4066));
    add_ln30_fu_6402_p2 <= std_logic_vector(unsigned(left_start_0_i_reg_4078) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln32_1_fu_4151_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_62));
    add_ln32_fu_6429_p2 <= std_logic_vector(unsigned(add_ln30_fu_6402_p2) + unsigned(curr_size_reg_9085));
    add_ln34_10_fu_4295_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_C));
    add_ln34_11_fu_4306_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_D));
    add_ln34_12_fu_4317_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_E));
    add_ln34_13_fu_4328_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_F));
    add_ln34_14_fu_4339_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_10));
    add_ln34_15_fu_4350_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_11));
    add_ln34_16_fu_4361_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_12));
    add_ln34_17_fu_4372_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_13));
    add_ln34_18_fu_4383_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_14));
    add_ln34_19_fu_4394_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_15));
    add_ln34_1_fu_4196_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_3));
    add_ln34_20_fu_4405_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_16));
    add_ln34_21_fu_4416_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_17));
    add_ln34_22_fu_4427_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_18));
    add_ln34_23_fu_4438_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_19));
    add_ln34_24_fu_4449_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_1A));
    add_ln34_25_fu_4460_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_1B));
    add_ln34_26_fu_4471_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_1C));
    add_ln34_27_fu_4482_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_1D));
    add_ln34_28_fu_4493_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_1E));
    add_ln34_29_fu_4504_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_1F));
    add_ln34_2_fu_4207_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_4));
    add_ln34_30_fu_4515_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_20));
    add_ln34_31_fu_4526_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_21));
    add_ln34_32_fu_4537_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_22));
    add_ln34_33_fu_4548_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_23));
    add_ln34_34_fu_4559_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_24));
    add_ln34_35_fu_4570_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_25));
    add_ln34_36_fu_4581_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_26));
    add_ln34_37_fu_4592_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_27));
    add_ln34_38_fu_4603_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_28));
    add_ln34_39_fu_4614_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_29));
    add_ln34_3_fu_4218_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_5));
    add_ln34_40_fu_4625_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_2A));
    add_ln34_41_fu_4636_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_2B));
    add_ln34_42_fu_4647_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_2C));
    add_ln34_43_fu_4658_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_2D));
    add_ln34_44_fu_4669_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_2E));
    add_ln34_45_fu_4680_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_2F));
    add_ln34_46_fu_4691_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_30));
    add_ln34_47_fu_4702_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_31));
    add_ln34_48_fu_4713_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_32));
    add_ln34_49_fu_4724_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_33));
    add_ln34_4_fu_4229_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_6));
    add_ln34_50_fu_4735_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_34));
    add_ln34_51_fu_4746_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_35));
    add_ln34_52_fu_4757_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_36));
    add_ln34_53_fu_4768_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_37));
    add_ln34_54_fu_4779_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_38));
    add_ln34_55_fu_4790_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_39));
    add_ln34_56_fu_4801_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_3A));
    add_ln34_57_fu_4812_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_3B));
    add_ln34_58_fu_4823_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_3C));
    add_ln34_59_fu_4834_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_3D));
    add_ln34_5_fu_4240_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_7));
    add_ln34_60_fu_4845_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_3E));
    add_ln34_61_fu_4856_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_3F));
    add_ln34_62_fu_4867_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_40));
    add_ln34_63_fu_4878_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_41));
    add_ln34_64_fu_4889_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_42));
    add_ln34_65_fu_4900_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_43));
    add_ln34_66_fu_4911_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_44));
    add_ln34_67_fu_4922_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_45));
    add_ln34_68_fu_4933_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_46));
    add_ln34_69_fu_4944_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_47));
    add_ln34_6_fu_4251_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_8));
    add_ln34_70_fu_4955_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_48));
    add_ln34_71_fu_4966_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_49));
    add_ln34_72_fu_4977_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_4A));
    add_ln34_73_fu_4988_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_4B));
    add_ln34_74_fu_4999_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_4C));
    add_ln34_75_fu_5010_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_4D));
    add_ln34_76_fu_5021_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_4E));
    add_ln34_77_fu_5032_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_4F));
    add_ln34_78_fu_5043_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_50));
    add_ln34_79_fu_5054_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_51));
    add_ln34_7_fu_4262_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_9));
    add_ln34_80_fu_5065_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_52));
    add_ln34_81_fu_5076_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_53));
    add_ln34_82_fu_5087_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_54));
    add_ln34_83_fu_5098_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_55));
    add_ln34_84_fu_5109_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_56));
    add_ln34_85_fu_5120_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_57));
    add_ln34_86_fu_5131_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_58));
    add_ln34_87_fu_5142_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_59));
    add_ln34_88_fu_5153_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_5A));
    add_ln34_89_fu_5164_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_5B));
    add_ln34_8_fu_4273_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_A));
    add_ln34_90_fu_5175_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_5C));
    add_ln34_91_fu_5186_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_5D));
    add_ln34_92_fu_5197_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_5E));
    add_ln34_93_fu_5208_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_5F));
    add_ln34_94_fu_5219_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_60));
    add_ln34_95_fu_5230_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_61));
    add_ln34_9_fu_4284_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_B));
    add_ln34_fu_4185_p2 <= std_logic_vector(unsigned(phi_mul1_reg_4007) + unsigned(ap_const_lv20_2));
    add_ln41_fu_5246_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_62));
    add_ln43_10_fu_5385_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_C));
    add_ln43_11_fu_5396_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_D));
    add_ln43_12_fu_5407_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_E));
    add_ln43_13_fu_5418_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_F));
    add_ln43_14_fu_5429_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_10));
    add_ln43_15_fu_5440_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_11));
    add_ln43_16_fu_5451_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_12));
    add_ln43_17_fu_5462_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_13));
    add_ln43_18_fu_5473_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_14));
    add_ln43_19_fu_5484_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_15));
    add_ln43_1_fu_5286_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_3));
    add_ln43_20_fu_5495_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_16));
    add_ln43_21_fu_5506_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_17));
    add_ln43_22_fu_5517_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_18));
    add_ln43_23_fu_5528_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_19));
    add_ln43_24_fu_5539_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_1A));
    add_ln43_25_fu_5550_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_1B));
    add_ln43_26_fu_5561_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_1C));
    add_ln43_27_fu_5572_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_1D));
    add_ln43_28_fu_5583_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_1E));
    add_ln43_29_fu_5594_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_1F));
    add_ln43_2_fu_5297_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_4));
    add_ln43_30_fu_5605_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_20));
    add_ln43_31_fu_5616_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_21));
    add_ln43_32_fu_5627_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_22));
    add_ln43_33_fu_5638_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_23));
    add_ln43_34_fu_5649_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_24));
    add_ln43_35_fu_5660_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_25));
    add_ln43_36_fu_5671_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_26));
    add_ln43_37_fu_5682_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_27));
    add_ln43_38_fu_5693_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_28));
    add_ln43_39_fu_5704_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_29));
    add_ln43_3_fu_5308_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_5));
    add_ln43_40_fu_5715_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_2A));
    add_ln43_41_fu_5726_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_2B));
    add_ln43_42_fu_5737_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_2C));
    add_ln43_43_fu_5748_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_2D));
    add_ln43_44_fu_5759_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_2E));
    add_ln43_45_fu_5770_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_2F));
    add_ln43_46_fu_5781_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_30));
    add_ln43_47_fu_5792_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_31));
    add_ln43_48_fu_5803_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_32));
    add_ln43_49_fu_5814_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_33));
    add_ln43_4_fu_5319_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_6));
    add_ln43_50_fu_5825_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_34));
    add_ln43_51_fu_5836_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_35));
    add_ln43_52_fu_5847_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_36));
    add_ln43_53_fu_5858_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_37));
    add_ln43_54_fu_5869_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_38));
    add_ln43_55_fu_5880_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_39));
    add_ln43_56_fu_5891_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_3A));
    add_ln43_57_fu_5902_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_3B));
    add_ln43_58_fu_5913_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_3C));
    add_ln43_59_fu_5924_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_3D));
    add_ln43_5_fu_5330_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_7));
    add_ln43_60_fu_5935_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_3E));
    add_ln43_61_fu_5946_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_3F));
    add_ln43_62_fu_5957_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_40));
    add_ln43_63_fu_5968_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_41));
    add_ln43_64_fu_5979_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_42));
    add_ln43_65_fu_5990_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_43));
    add_ln43_66_fu_6001_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_44));
    add_ln43_67_fu_6012_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_45));
    add_ln43_68_fu_6023_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_46));
    add_ln43_69_fu_6034_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_47));
    add_ln43_6_fu_5341_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_8));
    add_ln43_70_fu_6045_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_48));
    add_ln43_71_fu_6056_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_49));
    add_ln43_72_fu_6067_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_4A));
    add_ln43_73_fu_6078_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_4B));
    add_ln43_74_fu_6089_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_4C));
    add_ln43_75_fu_6100_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_4D));
    add_ln43_76_fu_6111_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_4E));
    add_ln43_77_fu_6122_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_4F));
    add_ln43_78_fu_6133_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_50));
    add_ln43_79_fu_6144_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_51));
    add_ln43_7_fu_5352_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_9));
    add_ln43_80_fu_6155_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_52));
    add_ln43_81_fu_6166_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_53));
    add_ln43_82_fu_6177_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_54));
    add_ln43_83_fu_6188_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_55));
    add_ln43_84_fu_6199_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_56));
    add_ln43_85_fu_6210_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_57));
    add_ln43_86_fu_6221_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_58));
    add_ln43_87_fu_6232_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_59));
    add_ln43_88_fu_6243_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_5A));
    add_ln43_89_fu_6254_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_5B));
    add_ln43_8_fu_5363_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_A));
    add_ln43_90_fu_6265_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_5C));
    add_ln43_91_fu_6276_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_5D));
    add_ln43_92_fu_6287_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_5E));
    add_ln43_93_fu_6298_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_5F));
    add_ln43_94_fu_6309_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_60));
    add_ln43_95_fu_6320_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_61));
    add_ln43_9_fu_5374_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_B));
    add_ln43_fu_5275_p2 <= std_logic_vector(unsigned(phi_mul_reg_4031) + unsigned(ap_const_lv23_2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state102 <= ap_CS_fsm(101);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state105 <= ap_CS_fsm(104);
    ap_CS_fsm_state106 <= ap_CS_fsm(105);
    ap_CS_fsm_state107 <= ap_CS_fsm(106);
    ap_CS_fsm_state108 <= ap_CS_fsm(107);
    ap_CS_fsm_state109 <= ap_CS_fsm(108);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state110 <= ap_CS_fsm(109);
    ap_CS_fsm_state111 <= ap_CS_fsm(110);
    ap_CS_fsm_state112 <= ap_CS_fsm(111);
    ap_CS_fsm_state113 <= ap_CS_fsm(112);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln32_fu_4157_p2)
    begin
        if (((icmp_ln32_fu_4157_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln32_fu_4157_p2)
    begin
        if (((icmp_ln32_fu_4157_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= num_matches_0_reg_3995;

    b_data_assign_address0_assign_proc : process(ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state102, ap_CS_fsm_state103, ap_CS_fsm_state104, zext_ln87_fu_6348_p1, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            b_data_assign_address0 <= zext_ln87_fu_6348_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            b_data_assign_address0 <= ap_const_lv64_60(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            b_data_assign_address0 <= ap_const_lv64_5E(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            b_data_assign_address0 <= ap_const_lv64_5C(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            b_data_assign_address0 <= ap_const_lv64_5A(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            b_data_assign_address0 <= ap_const_lv64_58(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            b_data_assign_address0 <= ap_const_lv64_56(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            b_data_assign_address0 <= ap_const_lv64_54(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            b_data_assign_address0 <= ap_const_lv64_52(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            b_data_assign_address0 <= ap_const_lv64_50(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            b_data_assign_address0 <= ap_const_lv64_4E(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            b_data_assign_address0 <= ap_const_lv64_4C(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            b_data_assign_address0 <= ap_const_lv64_4A(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            b_data_assign_address0 <= ap_const_lv64_48(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            b_data_assign_address0 <= ap_const_lv64_46(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            b_data_assign_address0 <= ap_const_lv64_44(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            b_data_assign_address0 <= ap_const_lv64_42(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            b_data_assign_address0 <= ap_const_lv64_40(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            b_data_assign_address0 <= ap_const_lv64_3E(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            b_data_assign_address0 <= ap_const_lv64_3C(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            b_data_assign_address0 <= ap_const_lv64_3A(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            b_data_assign_address0 <= ap_const_lv64_38(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            b_data_assign_address0 <= ap_const_lv64_36(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            b_data_assign_address0 <= ap_const_lv64_34(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            b_data_assign_address0 <= ap_const_lv64_32(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            b_data_assign_address0 <= ap_const_lv64_30(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            b_data_assign_address0 <= ap_const_lv64_2E(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            b_data_assign_address0 <= ap_const_lv64_2C(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            b_data_assign_address0 <= ap_const_lv64_2A(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            b_data_assign_address0 <= ap_const_lv64_28(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            b_data_assign_address0 <= ap_const_lv64_26(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            b_data_assign_address0 <= ap_const_lv64_24(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            b_data_assign_address0 <= ap_const_lv64_22(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            b_data_assign_address0 <= ap_const_lv64_20(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            b_data_assign_address0 <= ap_const_lv64_1E(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            b_data_assign_address0 <= ap_const_lv64_1C(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            b_data_assign_address0 <= ap_const_lv64_1A(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            b_data_assign_address0 <= ap_const_lv64_18(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            b_data_assign_address0 <= ap_const_lv64_16(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            b_data_assign_address0 <= ap_const_lv64_14(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            b_data_assign_address0 <= ap_const_lv64_12(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            b_data_assign_address0 <= ap_const_lv64_10(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            b_data_assign_address0 <= ap_const_lv64_E(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            b_data_assign_address0 <= ap_const_lv64_C(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            b_data_assign_address0 <= ap_const_lv64_A(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            b_data_assign_address0 <= ap_const_lv64_8(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            b_data_assign_address0 <= ap_const_lv64_6(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            b_data_assign_address0 <= ap_const_lv64_4(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            b_data_assign_address0 <= ap_const_lv64_2(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            b_data_assign_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        else 
            b_data_assign_address0 <= "XXXXXXX";
        end if; 
    end process;


    b_data_assign_address1_assign_proc : process(ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state102, ap_CS_fsm_state103, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            b_data_assign_address1 <= ap_const_lv64_61(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            b_data_assign_address1 <= ap_const_lv64_5F(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            b_data_assign_address1 <= ap_const_lv64_5D(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            b_data_assign_address1 <= ap_const_lv64_5B(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            b_data_assign_address1 <= ap_const_lv64_59(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            b_data_assign_address1 <= ap_const_lv64_57(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            b_data_assign_address1 <= ap_const_lv64_55(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            b_data_assign_address1 <= ap_const_lv64_53(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            b_data_assign_address1 <= ap_const_lv64_51(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            b_data_assign_address1 <= ap_const_lv64_4F(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            b_data_assign_address1 <= ap_const_lv64_4D(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            b_data_assign_address1 <= ap_const_lv64_4B(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            b_data_assign_address1 <= ap_const_lv64_49(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            b_data_assign_address1 <= ap_const_lv64_47(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            b_data_assign_address1 <= ap_const_lv64_45(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            b_data_assign_address1 <= ap_const_lv64_43(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            b_data_assign_address1 <= ap_const_lv64_41(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            b_data_assign_address1 <= ap_const_lv64_3F(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            b_data_assign_address1 <= ap_const_lv64_3D(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            b_data_assign_address1 <= ap_const_lv64_3B(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            b_data_assign_address1 <= ap_const_lv64_39(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            b_data_assign_address1 <= ap_const_lv64_37(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            b_data_assign_address1 <= ap_const_lv64_35(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            b_data_assign_address1 <= ap_const_lv64_33(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            b_data_assign_address1 <= ap_const_lv64_31(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            b_data_assign_address1 <= ap_const_lv64_2F(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            b_data_assign_address1 <= ap_const_lv64_2D(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            b_data_assign_address1 <= ap_const_lv64_2B(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            b_data_assign_address1 <= ap_const_lv64_29(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            b_data_assign_address1 <= ap_const_lv64_27(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            b_data_assign_address1 <= ap_const_lv64_25(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            b_data_assign_address1 <= ap_const_lv64_23(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            b_data_assign_address1 <= ap_const_lv64_21(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            b_data_assign_address1 <= ap_const_lv64_1F(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            b_data_assign_address1 <= ap_const_lv64_1D(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            b_data_assign_address1 <= ap_const_lv64_1B(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            b_data_assign_address1 <= ap_const_lv64_19(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            b_data_assign_address1 <= ap_const_lv64_17(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            b_data_assign_address1 <= ap_const_lv64_15(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            b_data_assign_address1 <= ap_const_lv64_13(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            b_data_assign_address1 <= ap_const_lv64_11(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            b_data_assign_address1 <= ap_const_lv64_F(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            b_data_assign_address1 <= ap_const_lv64_D(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            b_data_assign_address1 <= ap_const_lv64_B(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            b_data_assign_address1 <= ap_const_lv64_9(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            b_data_assign_address1 <= ap_const_lv64_7(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            b_data_assign_address1 <= ap_const_lv64_5(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            b_data_assign_address1 <= ap_const_lv64_3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            b_data_assign_address1 <= ap_const_lv64_1(7 - 1 downto 0);
        else 
            b_data_assign_address1 <= "XXXXXXX";
        end if; 
    end process;


    b_data_assign_ce0_assign_proc : process(ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state102, ap_CS_fsm_state103, ap_CS_fsm_state104, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            b_data_assign_ce0 <= ap_const_logic_1;
        else 
            b_data_assign_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_data_assign_ce1_assign_proc : process(ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state102, ap_CS_fsm_state103, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            b_data_assign_ce1 <= ap_const_logic_1;
        else 
            b_data_assign_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    b_data_assign_we0_assign_proc : process(ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state102, ap_CS_fsm_state103, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            b_data_assign_we0 <= ap_const_logic_1;
        else 
            b_data_assign_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_data_assign_we1_assign_proc : process(ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state102, ap_CS_fsm_state103, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            b_data_assign_we1 <= ap_const_logic_1;
        else 
            b_data_assign_we1 <= ap_const_logic_0;
        end if; 
    end process;

    bitcount_address0 <= zext_ln87_1_fu_6369_p1(8 - 1 downto 0);

    bitcount_ce0_assign_proc : process(ap_CS_fsm_state105)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            bitcount_ce0 <= ap_const_logic_1;
        else 
            bitcount_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    curr_size_fu_6390_p2 <= std_logic_vector(shift_left(unsigned(curr_size_0_i_reg_4066),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    distance_fu_6378_p2 <= std_logic_vector(unsigned(zext_ln87_2_fu_6374_p1) + unsigned(distance_0_i_reg_4054));

    distances_0_address0_assign_proc : process(zext_ln43_reg_9038, ap_CS_fsm_state104, grp_merge_fu_4136_arr_0_address0, ap_CS_fsm_state109)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            distances_0_address0 <= zext_ln43_reg_9038(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            distances_0_address0 <= grp_merge_fu_4136_arr_0_address0;
        else 
            distances_0_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    distances_0_ce0_assign_proc : process(ap_CS_fsm_state104, grp_merge_fu_4136_arr_0_ce0, ap_CS_fsm_state109)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            distances_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            distances_0_ce0 <= grp_merge_fu_4136_arr_0_ce0;
        else 
            distances_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    distances_0_d0_assign_proc : process(ap_CS_fsm_state104, grp_merge_fu_4136_arr_0_d0, ap_CS_fsm_state109, zext_ln86_fu_6354_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            distances_0_d0 <= zext_ln86_fu_6354_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            distances_0_d0 <= grp_merge_fu_4136_arr_0_d0;
        else 
            distances_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    distances_0_we0_assign_proc : process(ap_CS_fsm_state104, icmp_ln86_fu_6336_p2, grp_merge_fu_4136_arr_0_we0, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state104) and (icmp_ln86_fu_6336_p2 = ap_const_lv1_1))) then 
            distances_0_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            distances_0_we0 <= grp_merge_fu_4136_arr_0_we0;
        else 
            distances_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    distances_1_address0_assign_proc : process(zext_ln43_reg_9038, ap_CS_fsm_state104, ap_CS_fsm_state111, grp_merge_fu_4136_arr_1_address0, ap_CS_fsm_state109, zext_ln64_fu_6486_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            distances_1_address0 <= zext_ln64_fu_6486_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            distances_1_address0 <= zext_ln43_reg_9038(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            distances_1_address0 <= grp_merge_fu_4136_arr_1_address0;
        else 
            distances_1_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    distances_1_ce0_assign_proc : process(ap_CS_fsm_state104, ap_CS_fsm_state111, grp_merge_fu_4136_arr_1_ce0, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state104))) then 
            distances_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            distances_1_ce0 <= grp_merge_fu_4136_arr_1_ce0;
        else 
            distances_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    distances_1_d0_assign_proc : process(ap_CS_fsm_state104, grp_merge_fu_4136_arr_1_d0, ap_CS_fsm_state109, sext_ln44_fu_6359_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            distances_1_d0 <= sext_ln44_fu_6359_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            distances_1_d0 <= grp_merge_fu_4136_arr_1_d0;
        else 
            distances_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    distances_1_we0_assign_proc : process(ap_CS_fsm_state104, icmp_ln86_fu_6336_p2, grp_merge_fu_4136_arr_1_we0, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state104) and (icmp_ln86_fu_6336_p2 = ap_const_lv1_1))) then 
            distances_1_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            distances_1_we0 <= grp_merge_fu_4136_arr_1_we0;
        else 
            distances_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    freq_address0_assign_proc : process(ap_CS_fsm_state110, ap_CS_fsm_state112, freq_addr_1_reg_9141, ap_CS_fsm_state113, zext_ln58_fu_6466_p1, sext_ln65_fu_6514_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
            freq_address0 <= freq_addr_1_reg_9141;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            freq_address0 <= sext_ln65_fu_6514_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            freq_address0 <= zext_ln58_fu_6466_p1(4 - 1 downto 0);
        else 
            freq_address0 <= "XXXX";
        end if; 
    end process;


    freq_ce0_assign_proc : process(ap_CS_fsm_state110, ap_CS_fsm_state112, ap_CS_fsm_state113)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state112) or (ap_const_logic_1 = ap_CS_fsm_state110))) then 
            freq_ce0 <= ap_const_logic_1;
        else 
            freq_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    freq_d0_assign_proc : process(ap_CS_fsm_state110, ap_CS_fsm_state113, max_freq_fu_6519_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
            freq_d0 <= max_freq_fu_6519_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            freq_d0 <= ap_const_lv32_0;
        else 
            freq_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    freq_we0_assign_proc : process(ap_CS_fsm_state110, ap_CS_fsm_state113, icmp_ln57_fu_6454_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state113) or ((icmp_ln57_fu_6454_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state110)))) then 
            freq_we0 <= ap_const_logic_1;
        else 
            freq_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_merge_fu_4136_ap_start <= grp_merge_fu_4136_ap_start_reg;
    i_5_fu_4163_p2 <= std_logic_vector(unsigned(i_0_reg_3984) + unsigned(ap_const_lv14_1));
    i_fu_6342_p2 <= std_logic_vector(unsigned(i_0_i_reg_4043) + unsigned(ap_const_lv7_1));
    icmp_ln22_fu_6384_p2 <= "1" when (signed(curr_size_0_i_reg_4066) > signed(ap_const_lv32_EA5F)) else "0";
    icmp_ln26_fu_6396_p2 <= "1" when (signed(left_start_0_i_reg_4078) < signed(ap_const_lv32_EA5F)) else "0";
    icmp_ln32_fu_4157_p2 <= "1" when (i_0_reg_3984 = ap_const_lv14_2710) else "0";
    icmp_ln41_fu_5252_p2 <= "1" when (j_0_reg_4019 = ap_const_lv16_EA60) else "0";
    icmp_ln57_fu_6454_p2 <= "1" when (j1_0_reg_4090 = ap_const_lv4_A) else "0";
    icmp_ln62_fu_6475_p2 <= "1" when (signed(zext_ln62_fu_6471_p1) < signed(k)) else "0";
    icmp_ln66_fu_6526_p2 <= "1" when (signed(max_freq_fu_6519_p2) > signed(max_freq_0_reg_4101)) else "0";
    icmp_ln74_fu_6494_p2 <= "1" when (sext_ln74_fu_6491_p1 = most_freq_0_reg_4113) else "0";
    icmp_ln86_fu_6336_p2 <= "1" when (i_0_i_reg_4043 = ap_const_lv7_62) else "0";
    icmp_ln8_1_fu_6434_p2 <= "1" when (signed(add_ln32_fu_6429_p2) < signed(ap_const_lv32_EA5F)) else "0";
    icmp_ln8_fu_6414_p2 <= "1" when (signed(add_ln30_1_fu_6408_p2) < signed(ap_const_lv32_EA5F)) else "0";
    j_5_fu_6460_p2 <= std_logic_vector(unsigned(j1_0_reg_4090) + unsigned(ap_const_lv4_1));
    j_6_fu_6480_p2 <= std_logic_vector(unsigned(j2_0_reg_4125) + unsigned(ap_const_lv31_1));
    j_fu_5258_p2 <= std_logic_vector(unsigned(j_0_reg_4019) + unsigned(ap_const_lv16_1));
    left_start_fu_6449_p2 <= std_logic_vector(unsigned(curr_size_reg_9085) + unsigned(left_start_0_i_reg_4078));
    max_freq_fu_6519_p2 <= std_logic_vector(unsigned(freq_q0) + unsigned(ap_const_lv32_1));
    mid_fu_6420_p3 <= 
        add_ln30_1_fu_6408_p2 when (icmp_ln8_fu_6414_p2(0) = '1') else 
        ap_const_lv32_EA5F;
    num_matches_fu_6500_p2 <= std_logic_vector(unsigned(num_matches_0_reg_3995) + unsigned(ap_const_lv32_1));
    or_ln34_fu_4174_p2 <= (phi_mul1_reg_4007 or ap_const_lv20_1);
    or_ln43_fu_5264_p2 <= (phi_mul_reg_4031 or ap_const_lv23_1);
    right_end_fu_6440_p3 <= 
        add_ln32_fu_6429_p2 when (icmp_ln8_1_fu_6434_p2(0) = '1') else 
        ap_const_lv32_EA5F;
    select_ln66_1_fu_6540_p3 <= 
        most_freq_reg_9136 when (icmp_ln66_fu_6526_p2(0) = '1') else 
        most_freq_0_reg_4113;
    select_ln66_fu_6532_p3 <= 
        max_freq_fu_6519_p2 when (icmp_ln66_fu_6526_p2(0) = '1') else 
        max_freq_0_reg_4101;
    select_ln74_fu_6506_p3 <= 
        num_matches_fu_6500_p2 when (icmp_ln74_fu_6494_p2(0) = '1') else 
        num_matches_0_reg_3995;
        sext_ln44_fu_6359_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(train_samples_label_1_reg_9049),32));

    sext_ln65_fu_6514_p0 <= distances_1_q0;
        sext_ln65_fu_6514_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln65_fu_6514_p0),64));

        sext_ln74_fu_6491_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(test_sample_label_reg_7570),32));


    test_samples_data_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, zext_ln32_fu_4146_p1, zext_ln34_2_fu_4191_p1, zext_ln34_4_fu_4213_p1, zext_ln34_6_fu_4235_p1, zext_ln34_8_fu_4257_p1, zext_ln34_10_fu_4279_p1, zext_ln34_12_fu_4301_p1, zext_ln34_14_fu_4323_p1, zext_ln34_16_fu_4345_p1, zext_ln34_18_fu_4367_p1, zext_ln34_20_fu_4389_p1, zext_ln34_22_fu_4411_p1, zext_ln34_24_fu_4433_p1, zext_ln34_26_fu_4455_p1, zext_ln34_28_fu_4477_p1, zext_ln34_30_fu_4499_p1, zext_ln34_32_fu_4521_p1, zext_ln34_34_fu_4543_p1, zext_ln34_36_fu_4565_p1, zext_ln34_38_fu_4587_p1, zext_ln34_40_fu_4609_p1, zext_ln34_42_fu_4631_p1, zext_ln34_44_fu_4653_p1, zext_ln34_46_fu_4675_p1, zext_ln34_48_fu_4697_p1, zext_ln34_50_fu_4719_p1, zext_ln34_52_fu_4741_p1, zext_ln34_54_fu_4763_p1, zext_ln34_56_fu_4785_p1, zext_ln34_58_fu_4807_p1, zext_ln34_60_fu_4829_p1, zext_ln34_62_fu_4851_p1, zext_ln34_64_fu_4873_p1, zext_ln34_66_fu_4895_p1, zext_ln34_68_fu_4917_p1, zext_ln34_70_fu_4939_p1, zext_ln34_72_fu_4961_p1, zext_ln34_74_fu_4983_p1, zext_ln34_76_fu_5005_p1, zext_ln34_78_fu_5027_p1, zext_ln34_80_fu_5049_p1, zext_ln34_82_fu_5071_p1, zext_ln34_84_fu_5093_p1, zext_ln34_86_fu_5115_p1, zext_ln34_88_fu_5137_p1, zext_ln34_90_fu_5159_p1, zext_ln34_92_fu_5181_p1, zext_ln34_94_fu_5203_p1, zext_ln34_96_fu_5225_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            test_samples_data_address0 <= zext_ln34_96_fu_5225_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            test_samples_data_address0 <= zext_ln34_94_fu_5203_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            test_samples_data_address0 <= zext_ln34_92_fu_5181_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            test_samples_data_address0 <= zext_ln34_90_fu_5159_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            test_samples_data_address0 <= zext_ln34_88_fu_5137_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            test_samples_data_address0 <= zext_ln34_86_fu_5115_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            test_samples_data_address0 <= zext_ln34_84_fu_5093_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            test_samples_data_address0 <= zext_ln34_82_fu_5071_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            test_samples_data_address0 <= zext_ln34_80_fu_5049_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            test_samples_data_address0 <= zext_ln34_78_fu_5027_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            test_samples_data_address0 <= zext_ln34_76_fu_5005_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            test_samples_data_address0 <= zext_ln34_74_fu_4983_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            test_samples_data_address0 <= zext_ln34_72_fu_4961_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            test_samples_data_address0 <= zext_ln34_70_fu_4939_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            test_samples_data_address0 <= zext_ln34_68_fu_4917_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            test_samples_data_address0 <= zext_ln34_66_fu_4895_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            test_samples_data_address0 <= zext_ln34_64_fu_4873_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            test_samples_data_address0 <= zext_ln34_62_fu_4851_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            test_samples_data_address0 <= zext_ln34_60_fu_4829_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            test_samples_data_address0 <= zext_ln34_58_fu_4807_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            test_samples_data_address0 <= zext_ln34_56_fu_4785_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            test_samples_data_address0 <= zext_ln34_54_fu_4763_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            test_samples_data_address0 <= zext_ln34_52_fu_4741_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            test_samples_data_address0 <= zext_ln34_50_fu_4719_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            test_samples_data_address0 <= zext_ln34_48_fu_4697_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            test_samples_data_address0 <= zext_ln34_46_fu_4675_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            test_samples_data_address0 <= zext_ln34_44_fu_4653_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            test_samples_data_address0 <= zext_ln34_42_fu_4631_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            test_samples_data_address0 <= zext_ln34_40_fu_4609_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            test_samples_data_address0 <= zext_ln34_38_fu_4587_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            test_samples_data_address0 <= zext_ln34_36_fu_4565_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            test_samples_data_address0 <= zext_ln34_34_fu_4543_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            test_samples_data_address0 <= zext_ln34_32_fu_4521_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            test_samples_data_address0 <= zext_ln34_30_fu_4499_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            test_samples_data_address0 <= zext_ln34_28_fu_4477_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            test_samples_data_address0 <= zext_ln34_26_fu_4455_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            test_samples_data_address0 <= zext_ln34_24_fu_4433_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            test_samples_data_address0 <= zext_ln34_22_fu_4411_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            test_samples_data_address0 <= zext_ln34_20_fu_4389_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            test_samples_data_address0 <= zext_ln34_18_fu_4367_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            test_samples_data_address0 <= zext_ln34_16_fu_4345_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            test_samples_data_address0 <= zext_ln34_14_fu_4323_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            test_samples_data_address0 <= zext_ln34_12_fu_4301_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            test_samples_data_address0 <= zext_ln34_10_fu_4279_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            test_samples_data_address0 <= zext_ln34_8_fu_4257_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            test_samples_data_address0 <= zext_ln34_6_fu_4235_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            test_samples_data_address0 <= zext_ln34_4_fu_4213_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            test_samples_data_address0 <= zext_ln34_2_fu_4191_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            test_samples_data_address0 <= zext_ln32_fu_4146_p1(20 - 1 downto 0);
        else 
            test_samples_data_address0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    test_samples_data_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, zext_ln34_1_fu_4180_p1, zext_ln34_3_fu_4202_p1, zext_ln34_5_fu_4224_p1, zext_ln34_7_fu_4246_p1, zext_ln34_9_fu_4268_p1, zext_ln34_11_fu_4290_p1, zext_ln34_13_fu_4312_p1, zext_ln34_15_fu_4334_p1, zext_ln34_17_fu_4356_p1, zext_ln34_19_fu_4378_p1, zext_ln34_21_fu_4400_p1, zext_ln34_23_fu_4422_p1, zext_ln34_25_fu_4444_p1, zext_ln34_27_fu_4466_p1, zext_ln34_29_fu_4488_p1, zext_ln34_31_fu_4510_p1, zext_ln34_33_fu_4532_p1, zext_ln34_35_fu_4554_p1, zext_ln34_37_fu_4576_p1, zext_ln34_39_fu_4598_p1, zext_ln34_41_fu_4620_p1, zext_ln34_43_fu_4642_p1, zext_ln34_45_fu_4664_p1, zext_ln34_47_fu_4686_p1, zext_ln34_49_fu_4708_p1, zext_ln34_51_fu_4730_p1, zext_ln34_53_fu_4752_p1, zext_ln34_55_fu_4774_p1, zext_ln34_57_fu_4796_p1, zext_ln34_59_fu_4818_p1, zext_ln34_61_fu_4840_p1, zext_ln34_63_fu_4862_p1, zext_ln34_65_fu_4884_p1, zext_ln34_67_fu_4906_p1, zext_ln34_69_fu_4928_p1, zext_ln34_71_fu_4950_p1, zext_ln34_73_fu_4972_p1, zext_ln34_75_fu_4994_p1, zext_ln34_77_fu_5016_p1, zext_ln34_79_fu_5038_p1, zext_ln34_81_fu_5060_p1, zext_ln34_83_fu_5082_p1, zext_ln34_85_fu_5104_p1, zext_ln34_87_fu_5126_p1, zext_ln34_89_fu_5148_p1, zext_ln34_91_fu_5170_p1, zext_ln34_93_fu_5192_p1, zext_ln34_95_fu_5214_p1, zext_ln34_97_fu_5236_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            test_samples_data_address1 <= zext_ln34_97_fu_5236_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            test_samples_data_address1 <= zext_ln34_95_fu_5214_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            test_samples_data_address1 <= zext_ln34_93_fu_5192_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            test_samples_data_address1 <= zext_ln34_91_fu_5170_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            test_samples_data_address1 <= zext_ln34_89_fu_5148_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            test_samples_data_address1 <= zext_ln34_87_fu_5126_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            test_samples_data_address1 <= zext_ln34_85_fu_5104_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            test_samples_data_address1 <= zext_ln34_83_fu_5082_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            test_samples_data_address1 <= zext_ln34_81_fu_5060_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            test_samples_data_address1 <= zext_ln34_79_fu_5038_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            test_samples_data_address1 <= zext_ln34_77_fu_5016_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            test_samples_data_address1 <= zext_ln34_75_fu_4994_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            test_samples_data_address1 <= zext_ln34_73_fu_4972_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            test_samples_data_address1 <= zext_ln34_71_fu_4950_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            test_samples_data_address1 <= zext_ln34_69_fu_4928_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            test_samples_data_address1 <= zext_ln34_67_fu_4906_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            test_samples_data_address1 <= zext_ln34_65_fu_4884_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            test_samples_data_address1 <= zext_ln34_63_fu_4862_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            test_samples_data_address1 <= zext_ln34_61_fu_4840_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            test_samples_data_address1 <= zext_ln34_59_fu_4818_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            test_samples_data_address1 <= zext_ln34_57_fu_4796_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            test_samples_data_address1 <= zext_ln34_55_fu_4774_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            test_samples_data_address1 <= zext_ln34_53_fu_4752_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            test_samples_data_address1 <= zext_ln34_51_fu_4730_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            test_samples_data_address1 <= zext_ln34_49_fu_4708_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            test_samples_data_address1 <= zext_ln34_47_fu_4686_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            test_samples_data_address1 <= zext_ln34_45_fu_4664_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            test_samples_data_address1 <= zext_ln34_43_fu_4642_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            test_samples_data_address1 <= zext_ln34_41_fu_4620_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            test_samples_data_address1 <= zext_ln34_39_fu_4598_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            test_samples_data_address1 <= zext_ln34_37_fu_4576_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            test_samples_data_address1 <= zext_ln34_35_fu_4554_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            test_samples_data_address1 <= zext_ln34_33_fu_4532_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            test_samples_data_address1 <= zext_ln34_31_fu_4510_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            test_samples_data_address1 <= zext_ln34_29_fu_4488_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            test_samples_data_address1 <= zext_ln34_27_fu_4466_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            test_samples_data_address1 <= zext_ln34_25_fu_4444_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            test_samples_data_address1 <= zext_ln34_23_fu_4422_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            test_samples_data_address1 <= zext_ln34_21_fu_4400_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            test_samples_data_address1 <= zext_ln34_19_fu_4378_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            test_samples_data_address1 <= zext_ln34_17_fu_4356_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            test_samples_data_address1 <= zext_ln34_15_fu_4334_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            test_samples_data_address1 <= zext_ln34_13_fu_4312_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            test_samples_data_address1 <= zext_ln34_11_fu_4290_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            test_samples_data_address1 <= zext_ln34_9_fu_4268_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            test_samples_data_address1 <= zext_ln34_7_fu_4246_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            test_samples_data_address1 <= zext_ln34_5_fu_4224_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            test_samples_data_address1 <= zext_ln34_3_fu_4202_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            test_samples_data_address1 <= zext_ln34_1_fu_4180_p1(20 - 1 downto 0);
        else 
            test_samples_data_address1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    test_samples_data_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            test_samples_data_ce0 <= ap_const_logic_1;
        else 
            test_samples_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    test_samples_data_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            test_samples_data_ce1 <= ap_const_logic_1;
        else 
            test_samples_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    test_samples_label_address0 <= zext_ln34_fu_4169_p1(14 - 1 downto 0);

    test_samples_label_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            test_samples_label_ce0 <= ap_const_logic_1;
        else 
            test_samples_label_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    train_samples_data_address0_assign_proc : process(ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, zext_ln41_fu_5241_p1, zext_ln43_2_fu_5281_p1, zext_ln43_4_fu_5303_p1, zext_ln43_6_fu_5325_p1, zext_ln43_8_fu_5347_p1, zext_ln43_10_fu_5369_p1, zext_ln43_12_fu_5391_p1, zext_ln43_14_fu_5413_p1, zext_ln43_16_fu_5435_p1, zext_ln43_18_fu_5457_p1, zext_ln43_20_fu_5479_p1, zext_ln43_22_fu_5501_p1, zext_ln43_24_fu_5523_p1, zext_ln43_26_fu_5545_p1, zext_ln43_28_fu_5567_p1, zext_ln43_30_fu_5589_p1, zext_ln43_32_fu_5611_p1, zext_ln43_34_fu_5633_p1, zext_ln43_36_fu_5655_p1, zext_ln43_38_fu_5677_p1, zext_ln43_40_fu_5699_p1, zext_ln43_42_fu_5721_p1, zext_ln43_44_fu_5743_p1, zext_ln43_46_fu_5765_p1, zext_ln43_48_fu_5787_p1, zext_ln43_50_fu_5809_p1, zext_ln43_52_fu_5831_p1, zext_ln43_54_fu_5853_p1, zext_ln43_56_fu_5875_p1, zext_ln43_58_fu_5897_p1, zext_ln43_60_fu_5919_p1, zext_ln43_62_fu_5941_p1, zext_ln43_64_fu_5963_p1, zext_ln43_66_fu_5985_p1, zext_ln43_68_fu_6007_p1, zext_ln43_70_fu_6029_p1, zext_ln43_72_fu_6051_p1, zext_ln43_74_fu_6073_p1, zext_ln43_76_fu_6095_p1, zext_ln43_78_fu_6117_p1, zext_ln43_80_fu_6139_p1, zext_ln43_82_fu_6161_p1, zext_ln43_84_fu_6183_p1, zext_ln43_86_fu_6205_p1, zext_ln43_88_fu_6227_p1, zext_ln43_90_fu_6249_p1, zext_ln43_92_fu_6271_p1, zext_ln43_94_fu_6293_p1, zext_ln43_96_fu_6315_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            train_samples_data_address0 <= zext_ln43_96_fu_6315_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            train_samples_data_address0 <= zext_ln43_94_fu_6293_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            train_samples_data_address0 <= zext_ln43_92_fu_6271_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            train_samples_data_address0 <= zext_ln43_90_fu_6249_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            train_samples_data_address0 <= zext_ln43_88_fu_6227_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            train_samples_data_address0 <= zext_ln43_86_fu_6205_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            train_samples_data_address0 <= zext_ln43_84_fu_6183_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            train_samples_data_address0 <= zext_ln43_82_fu_6161_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            train_samples_data_address0 <= zext_ln43_80_fu_6139_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            train_samples_data_address0 <= zext_ln43_78_fu_6117_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            train_samples_data_address0 <= zext_ln43_76_fu_6095_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            train_samples_data_address0 <= zext_ln43_74_fu_6073_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            train_samples_data_address0 <= zext_ln43_72_fu_6051_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            train_samples_data_address0 <= zext_ln43_70_fu_6029_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            train_samples_data_address0 <= zext_ln43_68_fu_6007_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            train_samples_data_address0 <= zext_ln43_66_fu_5985_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            train_samples_data_address0 <= zext_ln43_64_fu_5963_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            train_samples_data_address0 <= zext_ln43_62_fu_5941_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            train_samples_data_address0 <= zext_ln43_60_fu_5919_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            train_samples_data_address0 <= zext_ln43_58_fu_5897_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            train_samples_data_address0 <= zext_ln43_56_fu_5875_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            train_samples_data_address0 <= zext_ln43_54_fu_5853_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            train_samples_data_address0 <= zext_ln43_52_fu_5831_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            train_samples_data_address0 <= zext_ln43_50_fu_5809_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            train_samples_data_address0 <= zext_ln43_48_fu_5787_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            train_samples_data_address0 <= zext_ln43_46_fu_5765_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            train_samples_data_address0 <= zext_ln43_44_fu_5743_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            train_samples_data_address0 <= zext_ln43_42_fu_5721_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            train_samples_data_address0 <= zext_ln43_40_fu_5699_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            train_samples_data_address0 <= zext_ln43_38_fu_5677_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            train_samples_data_address0 <= zext_ln43_36_fu_5655_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            train_samples_data_address0 <= zext_ln43_34_fu_5633_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            train_samples_data_address0 <= zext_ln43_32_fu_5611_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            train_samples_data_address0 <= zext_ln43_30_fu_5589_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            train_samples_data_address0 <= zext_ln43_28_fu_5567_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            train_samples_data_address0 <= zext_ln43_26_fu_5545_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            train_samples_data_address0 <= zext_ln43_24_fu_5523_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            train_samples_data_address0 <= zext_ln43_22_fu_5501_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            train_samples_data_address0 <= zext_ln43_20_fu_5479_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            train_samples_data_address0 <= zext_ln43_18_fu_5457_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            train_samples_data_address0 <= zext_ln43_16_fu_5435_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            train_samples_data_address0 <= zext_ln43_14_fu_5413_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            train_samples_data_address0 <= zext_ln43_12_fu_5391_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            train_samples_data_address0 <= zext_ln43_10_fu_5369_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            train_samples_data_address0 <= zext_ln43_8_fu_5347_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            train_samples_data_address0 <= zext_ln43_6_fu_5325_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            train_samples_data_address0 <= zext_ln43_4_fu_5303_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            train_samples_data_address0 <= zext_ln43_2_fu_5281_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            train_samples_data_address0 <= zext_ln41_fu_5241_p1(23 - 1 downto 0);
        else 
            train_samples_data_address0 <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    train_samples_data_address1_assign_proc : process(ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, zext_ln43_1_fu_5270_p1, zext_ln43_3_fu_5292_p1, zext_ln43_5_fu_5314_p1, zext_ln43_7_fu_5336_p1, zext_ln43_9_fu_5358_p1, zext_ln43_11_fu_5380_p1, zext_ln43_13_fu_5402_p1, zext_ln43_15_fu_5424_p1, zext_ln43_17_fu_5446_p1, zext_ln43_19_fu_5468_p1, zext_ln43_21_fu_5490_p1, zext_ln43_23_fu_5512_p1, zext_ln43_25_fu_5534_p1, zext_ln43_27_fu_5556_p1, zext_ln43_29_fu_5578_p1, zext_ln43_31_fu_5600_p1, zext_ln43_33_fu_5622_p1, zext_ln43_35_fu_5644_p1, zext_ln43_37_fu_5666_p1, zext_ln43_39_fu_5688_p1, zext_ln43_41_fu_5710_p1, zext_ln43_43_fu_5732_p1, zext_ln43_45_fu_5754_p1, zext_ln43_47_fu_5776_p1, zext_ln43_49_fu_5798_p1, zext_ln43_51_fu_5820_p1, zext_ln43_53_fu_5842_p1, zext_ln43_55_fu_5864_p1, zext_ln43_57_fu_5886_p1, zext_ln43_59_fu_5908_p1, zext_ln43_61_fu_5930_p1, zext_ln43_63_fu_5952_p1, zext_ln43_65_fu_5974_p1, zext_ln43_67_fu_5996_p1, zext_ln43_69_fu_6018_p1, zext_ln43_71_fu_6040_p1, zext_ln43_73_fu_6062_p1, zext_ln43_75_fu_6084_p1, zext_ln43_77_fu_6106_p1, zext_ln43_79_fu_6128_p1, zext_ln43_81_fu_6150_p1, zext_ln43_83_fu_6172_p1, zext_ln43_85_fu_6194_p1, zext_ln43_87_fu_6216_p1, zext_ln43_89_fu_6238_p1, zext_ln43_91_fu_6260_p1, zext_ln43_93_fu_6282_p1, zext_ln43_95_fu_6304_p1, zext_ln43_97_fu_6326_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            train_samples_data_address1 <= zext_ln43_97_fu_6326_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            train_samples_data_address1 <= zext_ln43_95_fu_6304_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            train_samples_data_address1 <= zext_ln43_93_fu_6282_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            train_samples_data_address1 <= zext_ln43_91_fu_6260_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            train_samples_data_address1 <= zext_ln43_89_fu_6238_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            train_samples_data_address1 <= zext_ln43_87_fu_6216_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            train_samples_data_address1 <= zext_ln43_85_fu_6194_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            train_samples_data_address1 <= zext_ln43_83_fu_6172_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            train_samples_data_address1 <= zext_ln43_81_fu_6150_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            train_samples_data_address1 <= zext_ln43_79_fu_6128_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            train_samples_data_address1 <= zext_ln43_77_fu_6106_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            train_samples_data_address1 <= zext_ln43_75_fu_6084_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            train_samples_data_address1 <= zext_ln43_73_fu_6062_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            train_samples_data_address1 <= zext_ln43_71_fu_6040_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            train_samples_data_address1 <= zext_ln43_69_fu_6018_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            train_samples_data_address1 <= zext_ln43_67_fu_5996_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            train_samples_data_address1 <= zext_ln43_65_fu_5974_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            train_samples_data_address1 <= zext_ln43_63_fu_5952_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            train_samples_data_address1 <= zext_ln43_61_fu_5930_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            train_samples_data_address1 <= zext_ln43_59_fu_5908_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            train_samples_data_address1 <= zext_ln43_57_fu_5886_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            train_samples_data_address1 <= zext_ln43_55_fu_5864_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            train_samples_data_address1 <= zext_ln43_53_fu_5842_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            train_samples_data_address1 <= zext_ln43_51_fu_5820_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            train_samples_data_address1 <= zext_ln43_49_fu_5798_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            train_samples_data_address1 <= zext_ln43_47_fu_5776_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            train_samples_data_address1 <= zext_ln43_45_fu_5754_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            train_samples_data_address1 <= zext_ln43_43_fu_5732_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            train_samples_data_address1 <= zext_ln43_41_fu_5710_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            train_samples_data_address1 <= zext_ln43_39_fu_5688_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            train_samples_data_address1 <= zext_ln43_37_fu_5666_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            train_samples_data_address1 <= zext_ln43_35_fu_5644_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            train_samples_data_address1 <= zext_ln43_33_fu_5622_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            train_samples_data_address1 <= zext_ln43_31_fu_5600_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            train_samples_data_address1 <= zext_ln43_29_fu_5578_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            train_samples_data_address1 <= zext_ln43_27_fu_5556_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            train_samples_data_address1 <= zext_ln43_25_fu_5534_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            train_samples_data_address1 <= zext_ln43_23_fu_5512_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            train_samples_data_address1 <= zext_ln43_21_fu_5490_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            train_samples_data_address1 <= zext_ln43_19_fu_5468_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            train_samples_data_address1 <= zext_ln43_17_fu_5446_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            train_samples_data_address1 <= zext_ln43_15_fu_5424_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            train_samples_data_address1 <= zext_ln43_13_fu_5402_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            train_samples_data_address1 <= zext_ln43_11_fu_5380_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            train_samples_data_address1 <= zext_ln43_9_fu_5358_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            train_samples_data_address1 <= zext_ln43_7_fu_5336_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            train_samples_data_address1 <= zext_ln43_5_fu_5314_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            train_samples_data_address1 <= zext_ln43_3_fu_5292_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            train_samples_data_address1 <= zext_ln43_1_fu_5270_p1(23 - 1 downto 0);
        else 
            train_samples_data_address1 <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    train_samples_data_ce0_assign_proc : process(ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state102, ap_CS_fsm_state103, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            train_samples_data_ce0 <= ap_const_logic_1;
        else 
            train_samples_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    train_samples_data_ce1_assign_proc : process(ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state102, ap_CS_fsm_state103, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            train_samples_data_ce1 <= ap_const_logic_1;
        else 
            train_samples_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    train_samples_label_address0 <= zext_ln43_fu_6331_p1(16 - 1 downto 0);

    train_samples_label_ce0_assign_proc : process(ap_CS_fsm_state102)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            train_samples_label_ce0 <= ap_const_logic_1;
        else 
            train_samples_label_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln87_fu_6363_p2 <= (b_data_assign_q0 xor a_data_assign_q0);
    zext_ln32_fu_4146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul1_reg_4007),64));
    zext_ln34_10_fu_4279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_8_fu_4273_p2),64));
    zext_ln34_11_fu_4290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_9_fu_4284_p2),64));
    zext_ln34_12_fu_4301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_10_fu_4295_p2),64));
    zext_ln34_13_fu_4312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_11_fu_4306_p2),64));
    zext_ln34_14_fu_4323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_12_fu_4317_p2),64));
    zext_ln34_15_fu_4334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_13_fu_4328_p2),64));
    zext_ln34_16_fu_4345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_14_fu_4339_p2),64));
    zext_ln34_17_fu_4356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_15_fu_4350_p2),64));
    zext_ln34_18_fu_4367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_16_fu_4361_p2),64));
    zext_ln34_19_fu_4378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_17_fu_4372_p2),64));
    zext_ln34_1_fu_4180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln34_fu_4174_p2),64));
    zext_ln34_20_fu_4389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_18_fu_4383_p2),64));
    zext_ln34_21_fu_4400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_19_fu_4394_p2),64));
    zext_ln34_22_fu_4411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_20_fu_4405_p2),64));
    zext_ln34_23_fu_4422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_21_fu_4416_p2),64));
    zext_ln34_24_fu_4433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_22_fu_4427_p2),64));
    zext_ln34_25_fu_4444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_23_fu_4438_p2),64));
    zext_ln34_26_fu_4455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_24_fu_4449_p2),64));
    zext_ln34_27_fu_4466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_25_fu_4460_p2),64));
    zext_ln34_28_fu_4477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_26_fu_4471_p2),64));
    zext_ln34_29_fu_4488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_27_fu_4482_p2),64));
    zext_ln34_2_fu_4191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_fu_4185_p2),64));
    zext_ln34_30_fu_4499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_28_fu_4493_p2),64));
    zext_ln34_31_fu_4510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_29_fu_4504_p2),64));
    zext_ln34_32_fu_4521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_30_fu_4515_p2),64));
    zext_ln34_33_fu_4532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_31_fu_4526_p2),64));
    zext_ln34_34_fu_4543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_32_fu_4537_p2),64));
    zext_ln34_35_fu_4554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_33_fu_4548_p2),64));
    zext_ln34_36_fu_4565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_34_fu_4559_p2),64));
    zext_ln34_37_fu_4576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_35_fu_4570_p2),64));
    zext_ln34_38_fu_4587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_36_fu_4581_p2),64));
    zext_ln34_39_fu_4598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_37_fu_4592_p2),64));
    zext_ln34_3_fu_4202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_1_fu_4196_p2),64));
    zext_ln34_40_fu_4609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_38_fu_4603_p2),64));
    zext_ln34_41_fu_4620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_39_fu_4614_p2),64));
    zext_ln34_42_fu_4631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_40_fu_4625_p2),64));
    zext_ln34_43_fu_4642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_41_fu_4636_p2),64));
    zext_ln34_44_fu_4653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_42_fu_4647_p2),64));
    zext_ln34_45_fu_4664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_43_fu_4658_p2),64));
    zext_ln34_46_fu_4675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_44_fu_4669_p2),64));
    zext_ln34_47_fu_4686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_45_fu_4680_p2),64));
    zext_ln34_48_fu_4697_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_46_fu_4691_p2),64));
    zext_ln34_49_fu_4708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_47_fu_4702_p2),64));
    zext_ln34_4_fu_4213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_2_fu_4207_p2),64));
    zext_ln34_50_fu_4719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_48_fu_4713_p2),64));
    zext_ln34_51_fu_4730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_49_fu_4724_p2),64));
    zext_ln34_52_fu_4741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_50_fu_4735_p2),64));
    zext_ln34_53_fu_4752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_51_fu_4746_p2),64));
    zext_ln34_54_fu_4763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_52_fu_4757_p2),64));
    zext_ln34_55_fu_4774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_53_fu_4768_p2),64));
    zext_ln34_56_fu_4785_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_54_fu_4779_p2),64));
    zext_ln34_57_fu_4796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_55_fu_4790_p2),64));
    zext_ln34_58_fu_4807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_56_fu_4801_p2),64));
    zext_ln34_59_fu_4818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_57_fu_4812_p2),64));
    zext_ln34_5_fu_4224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_3_fu_4218_p2),64));
    zext_ln34_60_fu_4829_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_58_fu_4823_p2),64));
    zext_ln34_61_fu_4840_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_59_fu_4834_p2),64));
    zext_ln34_62_fu_4851_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_60_fu_4845_p2),64));
    zext_ln34_63_fu_4862_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_61_fu_4856_p2),64));
    zext_ln34_64_fu_4873_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_62_fu_4867_p2),64));
    zext_ln34_65_fu_4884_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_63_fu_4878_p2),64));
    zext_ln34_66_fu_4895_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_64_fu_4889_p2),64));
    zext_ln34_67_fu_4906_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_65_fu_4900_p2),64));
    zext_ln34_68_fu_4917_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_66_fu_4911_p2),64));
    zext_ln34_69_fu_4928_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_67_fu_4922_p2),64));
    zext_ln34_6_fu_4235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_4_fu_4229_p2),64));
    zext_ln34_70_fu_4939_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_68_fu_4933_p2),64));
    zext_ln34_71_fu_4950_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_69_fu_4944_p2),64));
    zext_ln34_72_fu_4961_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_70_fu_4955_p2),64));
    zext_ln34_73_fu_4972_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_71_fu_4966_p2),64));
    zext_ln34_74_fu_4983_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_72_fu_4977_p2),64));
    zext_ln34_75_fu_4994_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_73_fu_4988_p2),64));
    zext_ln34_76_fu_5005_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_74_fu_4999_p2),64));
    zext_ln34_77_fu_5016_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_75_fu_5010_p2),64));
    zext_ln34_78_fu_5027_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_76_fu_5021_p2),64));
    zext_ln34_79_fu_5038_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_77_fu_5032_p2),64));
    zext_ln34_7_fu_4246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_5_fu_4240_p2),64));
    zext_ln34_80_fu_5049_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_78_fu_5043_p2),64));
    zext_ln34_81_fu_5060_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_79_fu_5054_p2),64));
    zext_ln34_82_fu_5071_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_80_fu_5065_p2),64));
    zext_ln34_83_fu_5082_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_81_fu_5076_p2),64));
    zext_ln34_84_fu_5093_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_82_fu_5087_p2),64));
    zext_ln34_85_fu_5104_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_83_fu_5098_p2),64));
    zext_ln34_86_fu_5115_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_84_fu_5109_p2),64));
    zext_ln34_87_fu_5126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_85_fu_5120_p2),64));
    zext_ln34_88_fu_5137_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_86_fu_5131_p2),64));
    zext_ln34_89_fu_5148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_87_fu_5142_p2),64));
    zext_ln34_8_fu_4257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_6_fu_4251_p2),64));
    zext_ln34_90_fu_5159_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_88_fu_5153_p2),64));
    zext_ln34_91_fu_5170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_89_fu_5164_p2),64));
    zext_ln34_92_fu_5181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_90_fu_5175_p2),64));
    zext_ln34_93_fu_5192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_91_fu_5186_p2),64));
    zext_ln34_94_fu_5203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_92_fu_5197_p2),64));
    zext_ln34_95_fu_5214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_93_fu_5208_p2),64));
    zext_ln34_96_fu_5225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_94_fu_5219_p2),64));
    zext_ln34_97_fu_5236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_95_fu_5230_p2),64));
    zext_ln34_9_fu_4268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_7_fu_4262_p2),64));
    zext_ln34_fu_4169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_3984),64));
    zext_ln41_fu_5241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_4031),64));
    zext_ln43_10_fu_5369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_8_fu_5363_p2),64));
    zext_ln43_11_fu_5380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_9_fu_5374_p2),64));
    zext_ln43_12_fu_5391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_10_fu_5385_p2),64));
    zext_ln43_13_fu_5402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_11_fu_5396_p2),64));
    zext_ln43_14_fu_5413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_12_fu_5407_p2),64));
    zext_ln43_15_fu_5424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_13_fu_5418_p2),64));
    zext_ln43_16_fu_5435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_14_fu_5429_p2),64));
    zext_ln43_17_fu_5446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_15_fu_5440_p2),64));
    zext_ln43_18_fu_5457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_16_fu_5451_p2),64));
    zext_ln43_19_fu_5468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_17_fu_5462_p2),64));
    zext_ln43_1_fu_5270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln43_fu_5264_p2),64));
    zext_ln43_20_fu_5479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_18_fu_5473_p2),64));
    zext_ln43_21_fu_5490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_19_fu_5484_p2),64));
    zext_ln43_22_fu_5501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_20_fu_5495_p2),64));
    zext_ln43_23_fu_5512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_21_fu_5506_p2),64));
    zext_ln43_24_fu_5523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_22_fu_5517_p2),64));
    zext_ln43_25_fu_5534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_23_fu_5528_p2),64));
    zext_ln43_26_fu_5545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_24_fu_5539_p2),64));
    zext_ln43_27_fu_5556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_25_fu_5550_p2),64));
    zext_ln43_28_fu_5567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_26_fu_5561_p2),64));
    zext_ln43_29_fu_5578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_27_fu_5572_p2),64));
    zext_ln43_2_fu_5281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_fu_5275_p2),64));
    zext_ln43_30_fu_5589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_28_fu_5583_p2),64));
    zext_ln43_31_fu_5600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_29_fu_5594_p2),64));
    zext_ln43_32_fu_5611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_30_fu_5605_p2),64));
    zext_ln43_33_fu_5622_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_31_fu_5616_p2),64));
    zext_ln43_34_fu_5633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_32_fu_5627_p2),64));
    zext_ln43_35_fu_5644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_33_fu_5638_p2),64));
    zext_ln43_36_fu_5655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_34_fu_5649_p2),64));
    zext_ln43_37_fu_5666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_35_fu_5660_p2),64));
    zext_ln43_38_fu_5677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_36_fu_5671_p2),64));
    zext_ln43_39_fu_5688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_37_fu_5682_p2),64));
    zext_ln43_3_fu_5292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_1_fu_5286_p2),64));
    zext_ln43_40_fu_5699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_38_fu_5693_p2),64));
    zext_ln43_41_fu_5710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_39_fu_5704_p2),64));
    zext_ln43_42_fu_5721_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_40_fu_5715_p2),64));
    zext_ln43_43_fu_5732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_41_fu_5726_p2),64));
    zext_ln43_44_fu_5743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_42_fu_5737_p2),64));
    zext_ln43_45_fu_5754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_43_fu_5748_p2),64));
    zext_ln43_46_fu_5765_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_44_fu_5759_p2),64));
    zext_ln43_47_fu_5776_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_45_fu_5770_p2),64));
    zext_ln43_48_fu_5787_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_46_fu_5781_p2),64));
    zext_ln43_49_fu_5798_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_47_fu_5792_p2),64));
    zext_ln43_4_fu_5303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_2_fu_5297_p2),64));
    zext_ln43_50_fu_5809_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_48_fu_5803_p2),64));
    zext_ln43_51_fu_5820_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_49_fu_5814_p2),64));
    zext_ln43_52_fu_5831_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_50_fu_5825_p2),64));
    zext_ln43_53_fu_5842_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_51_fu_5836_p2),64));
    zext_ln43_54_fu_5853_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_52_fu_5847_p2),64));
    zext_ln43_55_fu_5864_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_53_fu_5858_p2),64));
    zext_ln43_56_fu_5875_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_54_fu_5869_p2),64));
    zext_ln43_57_fu_5886_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_55_fu_5880_p2),64));
    zext_ln43_58_fu_5897_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_56_fu_5891_p2),64));
    zext_ln43_59_fu_5908_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_57_fu_5902_p2),64));
    zext_ln43_5_fu_5314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_3_fu_5308_p2),64));
    zext_ln43_60_fu_5919_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_58_fu_5913_p2),64));
    zext_ln43_61_fu_5930_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_59_fu_5924_p2),64));
    zext_ln43_62_fu_5941_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_60_fu_5935_p2),64));
    zext_ln43_63_fu_5952_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_61_fu_5946_p2),64));
    zext_ln43_64_fu_5963_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_62_fu_5957_p2),64));
    zext_ln43_65_fu_5974_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_63_fu_5968_p2),64));
    zext_ln43_66_fu_5985_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_64_fu_5979_p2),64));
    zext_ln43_67_fu_5996_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_65_fu_5990_p2),64));
    zext_ln43_68_fu_6007_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_66_fu_6001_p2),64));
    zext_ln43_69_fu_6018_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_67_fu_6012_p2),64));
    zext_ln43_6_fu_5325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_4_fu_5319_p2),64));
    zext_ln43_70_fu_6029_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_68_fu_6023_p2),64));
    zext_ln43_71_fu_6040_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_69_fu_6034_p2),64));
    zext_ln43_72_fu_6051_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_70_fu_6045_p2),64));
    zext_ln43_73_fu_6062_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_71_fu_6056_p2),64));
    zext_ln43_74_fu_6073_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_72_fu_6067_p2),64));
    zext_ln43_75_fu_6084_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_73_fu_6078_p2),64));
    zext_ln43_76_fu_6095_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_74_fu_6089_p2),64));
    zext_ln43_77_fu_6106_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_75_fu_6100_p2),64));
    zext_ln43_78_fu_6117_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_76_fu_6111_p2),64));
    zext_ln43_79_fu_6128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_77_fu_6122_p2),64));
    zext_ln43_7_fu_5336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_5_fu_5330_p2),64));
    zext_ln43_80_fu_6139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_78_fu_6133_p2),64));
    zext_ln43_81_fu_6150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_79_fu_6144_p2),64));
    zext_ln43_82_fu_6161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_80_fu_6155_p2),64));
    zext_ln43_83_fu_6172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_81_fu_6166_p2),64));
    zext_ln43_84_fu_6183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_82_fu_6177_p2),64));
    zext_ln43_85_fu_6194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_83_fu_6188_p2),64));
    zext_ln43_86_fu_6205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_84_fu_6199_p2),64));
    zext_ln43_87_fu_6216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_85_fu_6210_p2),64));
    zext_ln43_88_fu_6227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_86_fu_6221_p2),64));
    zext_ln43_89_fu_6238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_87_fu_6232_p2),64));
    zext_ln43_8_fu_5347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_6_fu_5341_p2),64));
    zext_ln43_90_fu_6249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_88_fu_6243_p2),64));
    zext_ln43_91_fu_6260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_89_fu_6254_p2),64));
    zext_ln43_92_fu_6271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_90_fu_6265_p2),64));
    zext_ln43_93_fu_6282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_91_fu_6276_p2),64));
    zext_ln43_94_fu_6293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_92_fu_6287_p2),64));
    zext_ln43_95_fu_6304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_93_fu_6298_p2),64));
    zext_ln43_96_fu_6315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_94_fu_6309_p2),64));
    zext_ln43_97_fu_6326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_95_fu_6320_p2),64));
    zext_ln43_9_fu_5358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_7_fu_5352_p2),64));
    zext_ln43_fu_6331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_4019),64));
    zext_ln58_fu_6466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_0_reg_4090),64));
    zext_ln62_fu_6471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_0_reg_4125),32));
    zext_ln64_fu_6486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_0_reg_4125),64));
    zext_ln86_fu_6354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(distance_0_i_reg_4054),32));
    zext_ln87_1_fu_6369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln87_fu_6363_p2),64));
    zext_ln87_2_fu_6374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bitcount_q0),10));
    zext_ln87_fu_6348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_4043),64));
end behav;
