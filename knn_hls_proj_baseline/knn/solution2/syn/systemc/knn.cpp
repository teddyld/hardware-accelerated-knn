// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "knn.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic knn::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic knn::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<12> knn::ap_ST_fsm_state1 = "1";
const sc_lv<12> knn::ap_ST_fsm_state2 = "10";
const sc_lv<12> knn::ap_ST_fsm_state3 = "100";
const sc_lv<12> knn::ap_ST_fsm_state4 = "1000";
const sc_lv<12> knn::ap_ST_fsm_state5 = "10000";
const sc_lv<12> knn::ap_ST_fsm_state6 = "100000";
const sc_lv<12> knn::ap_ST_fsm_state7 = "1000000";
const sc_lv<12> knn::ap_ST_fsm_state8 = "10000000";
const sc_lv<12> knn::ap_ST_fsm_state9 = "100000000";
const sc_lv<12> knn::ap_ST_fsm_state10 = "1000000000";
const sc_lv<12> knn::ap_ST_fsm_state11 = "10000000000";
const sc_lv<12> knn::ap_ST_fsm_state12 = "100000000000";
const sc_lv<32> knn::ap_const_lv32_0 = "00000000000000000000000000000000";
const int knn::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> knn::ap_const_lv32_1 = "1";
const sc_lv<32> knn::ap_const_lv32_2 = "10";
const sc_lv<1> knn::ap_const_lv1_0 = "0";
const sc_lv<32> knn::ap_const_lv32_3 = "11";
const sc_lv<32> knn::ap_const_lv32_4 = "100";
const sc_lv<1> knn::ap_const_lv1_1 = "1";
const sc_lv<32> knn::ap_const_lv32_5 = "101";
const sc_lv<32> knn::ap_const_lv32_6 = "110";
const sc_lv<32> knn::ap_const_lv32_8 = "1000";
const sc_lv<32> knn::ap_const_lv32_9 = "1001";
const sc_lv<32> knn::ap_const_lv32_A = "1010";
const sc_lv<32> knn::ap_const_lv32_B = "1011";
const sc_lv<3> knn::ap_const_lv3_0 = "000";
const sc_lv<13> knn::ap_const_lv13_0 = "0000000000000";
const sc_lv<16> knn::ap_const_lv16_0 = "0000000000000000";
const sc_lv<9> knn::ap_const_lv9_0 = "000000000";
const sc_lv<32> knn::ap_const_lv32_7 = "111";
const sc_lv<4> knn::ap_const_lv4_0 = "0000";
const sc_lv<32> knn::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const sc_lv<16> knn::ap_const_lv16_320 = "1100100000";
const sc_lv<5> knn::ap_const_lv5_1F = "11111";
const sc_lv<32> knn::ap_const_lv32_193 = "110010011";
const sc_lv<3> knn::ap_const_lv3_5 = "101";
const sc_lv<3> knn::ap_const_lv3_1 = "1";
const sc_lv<13> knn::ap_const_lv13_1770 = "1011101110000";
const sc_lv<13> knn::ap_const_lv13_1 = "1";
const sc_lv<9> knn::ap_const_lv9_190 = "110010000";
const sc_lv<9> knn::ap_const_lv9_1 = "1";
const sc_lv<16> knn::ap_const_lv16_1 = "1";
const sc_lv<4> knn::ap_const_lv4_A = "1010";
const sc_lv<4> knn::ap_const_lv4_1 = "1";
const bool knn::ap_const_boolean_1 = true;

knn::knn(sc_module_name name) : sc_module(name), mVcdFile(0) {
    knn_AXILiteS_s_axi_U = new knn_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("knn_AXILiteS_s_axi_U");
    knn_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    knn_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    knn_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    knn_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    knn_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    knn_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    knn_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    knn_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    knn_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    knn_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    knn_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    knn_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    knn_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    knn_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    knn_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    knn_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    knn_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    knn_AXILiteS_s_axi_U->ACLK(ap_clk);
    knn_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    knn_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    knn_AXILiteS_s_axi_U->ap_start(ap_start);
    knn_AXILiteS_s_axi_U->interrupt(interrupt);
    knn_AXILiteS_s_axi_U->ap_ready(ap_ready);
    knn_AXILiteS_s_axi_U->ap_done(ap_done);
    knn_AXILiteS_s_axi_U->ap_idle(ap_idle);
    knn_AXILiteS_s_axi_U->input_V(input_V);
    knn_AXILiteS_s_axi_U->train_samples_V_address0(train_samples_V_address0);
    knn_AXILiteS_s_axi_U->train_samples_V_ce0(train_samples_V_ce0);
    knn_AXILiteS_s_axi_U->train_samples_V_q0(train_samples_V_q0);
    knn_AXILiteS_s_axi_U->output_V(output_V);
    knn_AXILiteS_s_axi_U->output_V_ap_vld(output_V_ap_vld);
    distances_0_U = new knn_distances_0("distances_0_U");
    distances_0_U->clk(ap_clk);
    distances_0_U->reset(ap_rst_n_inv);
    distances_0_U->address0(distances_0_address0);
    distances_0_U->ce0(distances_0_ce0);
    distances_0_U->we0(distances_0_we0);
    distances_0_U->d0(distances_0_d0);
    distances_0_U->q0(distances_0_q0);
    distances_1_U = new knn_distances_1("distances_1_U");
    distances_1_U->clk(ap_clk);
    distances_1_U->reset(ap_rst_n_inv);
    distances_1_U->address0(distances_1_address0);
    distances_1_U->ce0(distances_1_ce0);
    distances_1_U->we0(distances_1_we0);
    distances_1_U->d0(distances_1_d0);
    distances_1_U->q0(distances_1_q0);
    freq_U = new knn_freq("freq_U");
    freq_U->clk(ap_clk);
    freq_U->reset(ap_rst_n_inv);
    freq_U->address0(freq_address0);
    freq_U->ce0(freq_ce0);
    freq_U->we0(freq_we0);
    freq_U->d0(freq_d0);
    freq_U->q0(freq_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( icmp_ln62_fu_517_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_temp1_be_phi_fu_301_p4);
    sensitive << ( curr_dist_1_reg_662 );
    sensitive << ( icmp_ln39_reg_667 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( temp1_be_reg_297 );

    SC_METHOD(thread_ap_phi_mux_temp2_V_be_phi_fu_289_p4);
    sensitive << ( icmp_ln39_reg_667 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( curr_label_V_1_fu_495_p1 );
    sensitive << ( temp2_V_be_reg_285 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( icmp_ln62_fu_517_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_curr_label_V_1_fu_495_p1);
    sensitive << ( distances_1_q0 );

    SC_METHOD(thread_curr_label_V_fu_464_p1);
    sensitive << ( p_Val2_1_reg_616 );

    SC_METHOD(thread_distance_fu_450_p2);
    sensitive << ( curr_dist_reg_229 );

    SC_METHOD(thread_distances_0_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( zext_ln39_fu_479_p1 );
    sensitive << ( distances_0_addr_1_reg_657 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( zext_ln27_fu_381_p1 );

    SC_METHOD(thread_distances_0_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_distances_0_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( temp1_reg_262 );

    SC_METHOD(thread_distances_0_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( icmp_ln39_fu_484_p2 );
    sensitive << ( icmp_ln26_fu_369_p2 );

    SC_METHOD(thread_distances_1_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln39_reg_652 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( icmp_ln39_fu_484_p2 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( zext_ln27_fu_381_p1 );
    sensitive << ( zext_ln64_fu_529_p1 );

    SC_METHOD(thread_distances_1_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( icmp_ln39_fu_484_p2 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_distances_1_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( icmp_ln39_fu_484_p2 );
    sensitive << ( zext_ln45_fu_490_p1 );

    SC_METHOD(thread_distances_1_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( icmp_ln39_fu_484_p2 );
    sensitive << ( icmp_ln26_fu_369_p2 );

    SC_METHOD(thread_freq_address0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( freq_addr_1_reg_702 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( zext_ln58_fu_512_p1 );
    sensitive << ( zext_ln65_fu_548_p1 );

    SC_METHOD(thread_freq_ce0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_freq_d0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( max_freq_fu_556_p2 );

    SC_METHOD(thread_freq_we0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( icmp_ln57_fu_500_p2 );

    SC_METHOD(thread_i_1_fu_506_p2);
    sensitive << ( i2_0_reg_309 );

    SC_METHOD(thread_i_2_fu_424_p2);
    sensitive << ( bvh_d_index_reg_241 );

    SC_METHOD(thread_i_3_fu_523_p2);
    sensitive << ( i3_0_reg_344 );

    SC_METHOD(thread_i_4_fu_393_p2);
    sensitive << ( i1_0_reg_218 );

    SC_METHOD(thread_i_fu_375_p2);
    sensitive << ( i_0_reg_207 );

    SC_METHOD(thread_icmp_ln26_fu_369_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_207 );

    SC_METHOD(thread_icmp_ln32_fu_387_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i1_0_reg_218 );

    SC_METHOD(thread_icmp_ln36_fu_467_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( j_0_reg_274 );

    SC_METHOD(thread_icmp_ln39_fu_484_p2);
    sensitive << ( distances_0_q0 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( temp1_reg_262 );

    SC_METHOD(thread_icmp_ln57_fu_500_p2);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( i2_0_reg_309 );

    SC_METHOD(thread_icmp_ln62_fu_517_p2);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( i3_0_reg_344 );

    SC_METHOD(thread_icmp_ln66_fu_563_p2);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( max_freq_0_reg_320 );
    sensitive << ( max_freq_fu_556_p2 );

    SC_METHOD(thread_icmp_ln82_fu_418_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( bvh_d_index_reg_241 );

    SC_METHOD(thread_j_fu_473_p2);
    sensitive << ( j_0_reg_274 );

    SC_METHOD(thread_max_freq_fu_556_p2);
    sensitive << ( freq_q0 );

    SC_METHOD(thread_most_freq_fu_553_p1);
    sensitive << ( sext_ln64_reg_697 );

    SC_METHOD(thread_output_V);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( icmp_ln62_fu_517_p2 );
    sensitive << ( most_freq_0_reg_332 );
    sensitive << ( zext_ln73_fu_534_p1 );

    SC_METHOD(thread_output_V_ap_vld);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( icmp_ln62_fu_517_p2 );

    SC_METHOD(thread_p_Result_1_fu_437_p3);
    sensitive << ( p_Val2_3_reg_621 );
    sensitive << ( zext_ln82_fu_414_p1 );

    SC_METHOD(thread_p_Result_s_fu_430_p3);
    sensitive << ( test_data_V_reg_590 );
    sensitive << ( zext_ln82_fu_414_p1 );

    SC_METHOD(thread_select_ln66_1_fu_577_p3);
    sensitive << ( most_freq_0_reg_332 );
    sensitive << ( icmp_ln66_fu_563_p2 );
    sensitive << ( most_freq_fu_553_p1 );

    SC_METHOD(thread_select_ln66_fu_569_p3);
    sensitive << ( max_freq_0_reg_320 );
    sensitive << ( max_freq_fu_556_p2 );
    sensitive << ( icmp_ln66_fu_563_p2 );

    SC_METHOD(thread_select_ln83_fu_456_p3);
    sensitive << ( curr_dist_reg_229 );
    sensitive << ( xor_ln968_fu_444_p2 );
    sensitive << ( distance_fu_450_p2 );

    SC_METHOD(thread_sext_ln64_fu_544_p1);
    sensitive << ( distances_1_q0 );

    SC_METHOD(thread_test_label_V_fu_355_p1);
    sensitive << ( input_V );

    SC_METHOD(thread_train_samples_V_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln34_fu_399_p1 );

    SC_METHOD(thread_train_samples_V_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_xor_ln968_fu_444_p2);
    sensitive << ( p_Result_s_fu_430_p3 );
    sensitive << ( p_Result_1_fu_437_p3 );

    SC_METHOD(thread_zext_ln27_fu_381_p1);
    sensitive << ( i_0_reg_207 );

    SC_METHOD(thread_zext_ln34_fu_399_p1);
    sensitive << ( i1_0_reg_218 );

    SC_METHOD(thread_zext_ln39_fu_479_p1);
    sensitive << ( j_0_reg_274 );

    SC_METHOD(thread_zext_ln45_fu_490_p1);
    sensitive << ( temp2_V_reg_252 );

    SC_METHOD(thread_zext_ln58_fu_512_p1);
    sensitive << ( i2_0_reg_309 );

    SC_METHOD(thread_zext_ln64_fu_529_p1);
    sensitive << ( i3_0_reg_344 );

    SC_METHOD(thread_zext_ln65_fu_548_p1);
    sensitive << ( sext_ln64_fu_544_p1 );

    SC_METHOD(thread_zext_ln73_fu_534_p1);
    sensitive << ( test_label_V_reg_585 );

    SC_METHOD(thread_zext_ln82_fu_414_p1);
    sensitive << ( bvh_d_index_reg_241 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln32_fu_387_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln82_fu_418_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln36_fu_467_p2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( icmp_ln62_fu_517_p2 );
    sensitive << ( icmp_ln26_fu_369_p2 );
    sensitive << ( icmp_ln57_fu_500_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "knn_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, input_V, "input_V");
    sc_trace(mVcdFile, train_samples_V_address0, "train_samples_V_address0");
    sc_trace(mVcdFile, train_samples_V_ce0, "train_samples_V_ce0");
    sc_trace(mVcdFile, train_samples_V_q0, "train_samples_V_q0");
    sc_trace(mVcdFile, output_V, "output_V");
    sc_trace(mVcdFile, output_V_ap_vld, "output_V_ap_vld");
    sc_trace(mVcdFile, test_label_V_fu_355_p1, "test_label_V_fu_355_p1");
    sc_trace(mVcdFile, test_label_V_reg_585, "test_label_V_reg_585");
    sc_trace(mVcdFile, test_data_V_reg_590, "test_data_V_reg_590");
    sc_trace(mVcdFile, i_fu_375_p2, "i_fu_375_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_4_fu_393_p2, "i_4_fu_393_p2");
    sc_trace(mVcdFile, i_4_reg_606, "i_4_reg_606");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_ln32_fu_387_p2, "icmp_ln32_fu_387_p2");
    sc_trace(mVcdFile, p_Val2_1_reg_616, "p_Val2_1_reg_616");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, p_Val2_3_reg_621, "p_Val2_3_reg_621");
    sc_trace(mVcdFile, i_2_fu_424_p2, "i_2_fu_424_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, select_ln83_fu_456_p3, "select_ln83_fu_456_p3");
    sc_trace(mVcdFile, icmp_ln82_fu_418_p2, "icmp_ln82_fu_418_p2");
    sc_trace(mVcdFile, curr_label_V_fu_464_p1, "curr_label_V_fu_464_p1");
    sc_trace(mVcdFile, j_fu_473_p2, "j_fu_473_p2");
    sc_trace(mVcdFile, j_reg_647, "j_reg_647");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, zext_ln39_fu_479_p1, "zext_ln39_fu_479_p1");
    sc_trace(mVcdFile, zext_ln39_reg_652, "zext_ln39_reg_652");
    sc_trace(mVcdFile, icmp_ln36_fu_467_p2, "icmp_ln36_fu_467_p2");
    sc_trace(mVcdFile, distances_0_addr_1_reg_657, "distances_0_addr_1_reg_657");
    sc_trace(mVcdFile, distances_0_q0, "distances_0_q0");
    sc_trace(mVcdFile, curr_dist_1_reg_662, "curr_dist_1_reg_662");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, icmp_ln39_fu_484_p2, "icmp_ln39_fu_484_p2");
    sc_trace(mVcdFile, icmp_ln39_reg_667, "icmp_ln39_reg_667");
    sc_trace(mVcdFile, i_1_fu_506_p2, "i_1_fu_506_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, i_3_fu_523_p2, "i_3_fu_523_p2");
    sc_trace(mVcdFile, i_3_reg_687, "i_3_reg_687");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, icmp_ln62_fu_517_p2, "icmp_ln62_fu_517_p2");
    sc_trace(mVcdFile, sext_ln64_fu_544_p1, "sext_ln64_fu_544_p1");
    sc_trace(mVcdFile, sext_ln64_reg_697, "sext_ln64_reg_697");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, freq_addr_1_reg_702, "freq_addr_1_reg_702");
    sc_trace(mVcdFile, select_ln66_fu_569_p3, "select_ln66_fu_569_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, select_ln66_1_fu_577_p3, "select_ln66_1_fu_577_p3");
    sc_trace(mVcdFile, distances_0_address0, "distances_0_address0");
    sc_trace(mVcdFile, distances_0_ce0, "distances_0_ce0");
    sc_trace(mVcdFile, distances_0_we0, "distances_0_we0");
    sc_trace(mVcdFile, distances_0_d0, "distances_0_d0");
    sc_trace(mVcdFile, distances_1_address0, "distances_1_address0");
    sc_trace(mVcdFile, distances_1_ce0, "distances_1_ce0");
    sc_trace(mVcdFile, distances_1_we0, "distances_1_we0");
    sc_trace(mVcdFile, distances_1_d0, "distances_1_d0");
    sc_trace(mVcdFile, distances_1_q0, "distances_1_q0");
    sc_trace(mVcdFile, freq_address0, "freq_address0");
    sc_trace(mVcdFile, freq_ce0, "freq_ce0");
    sc_trace(mVcdFile, freq_we0, "freq_we0");
    sc_trace(mVcdFile, freq_d0, "freq_d0");
    sc_trace(mVcdFile, freq_q0, "freq_q0");
    sc_trace(mVcdFile, i_0_reg_207, "i_0_reg_207");
    sc_trace(mVcdFile, icmp_ln26_fu_369_p2, "icmp_ln26_fu_369_p2");
    sc_trace(mVcdFile, i1_0_reg_218, "i1_0_reg_218");
    sc_trace(mVcdFile, curr_dist_reg_229, "curr_dist_reg_229");
    sc_trace(mVcdFile, bvh_d_index_reg_241, "bvh_d_index_reg_241");
    sc_trace(mVcdFile, temp2_V_reg_252, "temp2_V_reg_252");
    sc_trace(mVcdFile, ap_phi_mux_temp2_V_be_phi_fu_289_p4, "ap_phi_mux_temp2_V_be_phi_fu_289_p4");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, temp1_reg_262, "temp1_reg_262");
    sc_trace(mVcdFile, ap_phi_mux_temp1_be_phi_fu_301_p4, "ap_phi_mux_temp1_be_phi_fu_301_p4");
    sc_trace(mVcdFile, j_0_reg_274, "j_0_reg_274");
    sc_trace(mVcdFile, curr_label_V_1_fu_495_p1, "curr_label_V_1_fu_495_p1");
    sc_trace(mVcdFile, temp2_V_be_reg_285, "temp2_V_be_reg_285");
    sc_trace(mVcdFile, temp1_be_reg_297, "temp1_be_reg_297");
    sc_trace(mVcdFile, i2_0_reg_309, "i2_0_reg_309");
    sc_trace(mVcdFile, icmp_ln57_fu_500_p2, "icmp_ln57_fu_500_p2");
    sc_trace(mVcdFile, max_freq_0_reg_320, "max_freq_0_reg_320");
    sc_trace(mVcdFile, most_freq_0_reg_332, "most_freq_0_reg_332");
    sc_trace(mVcdFile, i3_0_reg_344, "i3_0_reg_344");
    sc_trace(mVcdFile, zext_ln27_fu_381_p1, "zext_ln27_fu_381_p1");
    sc_trace(mVcdFile, zext_ln34_fu_399_p1, "zext_ln34_fu_399_p1");
    sc_trace(mVcdFile, zext_ln58_fu_512_p1, "zext_ln58_fu_512_p1");
    sc_trace(mVcdFile, zext_ln64_fu_529_p1, "zext_ln64_fu_529_p1");
    sc_trace(mVcdFile, zext_ln65_fu_548_p1, "zext_ln65_fu_548_p1");
    sc_trace(mVcdFile, zext_ln45_fu_490_p1, "zext_ln45_fu_490_p1");
    sc_trace(mVcdFile, max_freq_fu_556_p2, "max_freq_fu_556_p2");
    sc_trace(mVcdFile, zext_ln82_fu_414_p1, "zext_ln82_fu_414_p1");
    sc_trace(mVcdFile, p_Result_s_fu_430_p3, "p_Result_s_fu_430_p3");
    sc_trace(mVcdFile, p_Result_1_fu_437_p3, "p_Result_1_fu_437_p3");
    sc_trace(mVcdFile, xor_ln968_fu_444_p2, "xor_ln968_fu_444_p2");
    sc_trace(mVcdFile, distance_fu_450_p2, "distance_fu_450_p2");
    sc_trace(mVcdFile, zext_ln73_fu_534_p1, "zext_ln73_fu_534_p1");
    sc_trace(mVcdFile, icmp_ln66_fu_563_p2, "icmp_ln66_fu_563_p2");
    sc_trace(mVcdFile, most_freq_fu_553_p1, "most_freq_fu_553_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("knn.hdltvin.dat");
    mHdltvoutHandle.open("knn.hdltvout.dat");
}

knn::~knn() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete knn_AXILiteS_s_axi_U;
    delete distances_0_U;
    delete distances_1_U;
    delete freq_U;
}

void knn::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void knn::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln82_fu_418_p2.read()))) {
        bvh_d_index_reg_241 = i_2_fu_424_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        bvh_d_index_reg_241 = ap_const_lv9_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln82_fu_418_p2.read()))) {
        curr_dist_reg_229 = select_ln83_fu_456_p3.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        curr_dist_reg_229 = ap_const_lv16_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln26_fu_369_p2.read()))) {
        i1_0_reg_218 = ap_const_lv13_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln36_fu_467_p2.read()))) {
        i1_0_reg_218 = i_4_reg_606.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln32_fu_387_p2.read(), ap_const_lv1_1))) {
        i2_0_reg_309 = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln57_fu_500_p2.read()))) {
        i2_0_reg_309 = i_1_fu_506_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln57_fu_500_p2.read()))) {
        i3_0_reg_344 = ap_const_lv3_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        i3_0_reg_344 = i_3_reg_687.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln26_fu_369_p2.read()))) {
        i_0_reg_207 = i_fu_375_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_207 = ap_const_lv3_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        j_0_reg_274 = j_reg_647.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(icmp_ln82_fu_418_p2.read(), ap_const_lv1_1))) {
        j_0_reg_274 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln57_fu_500_p2.read()))) {
        max_freq_0_reg_320 = ap_const_lv32_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        max_freq_0_reg_320 = select_ln66_fu_569_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln57_fu_500_p2.read()))) {
        most_freq_0_reg_332 = ap_const_lv32_FFFFFFFF;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        most_freq_0_reg_332 = select_ln66_1_fu_577_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln39_fu_484_p2.read()))) {
        temp1_be_reg_297 = temp1_reg_262.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln39_reg_667.read()))) {
        temp1_be_reg_297 = curr_dist_1_reg_662.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        temp1_reg_262 = ap_phi_mux_temp1_be_phi_fu_301_p4.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(icmp_ln82_fu_418_p2.read(), ap_const_lv1_1))) {
        temp1_reg_262 = curr_dist_reg_229.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln39_fu_484_p2.read()))) {
        temp2_V_be_reg_285 = temp2_V_reg_252.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln39_reg_667.read()))) {
        temp2_V_be_reg_285 = curr_label_V_1_fu_495_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        temp2_V_reg_252 = ap_phi_mux_temp2_V_be_phi_fu_289_p4.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(icmp_ln82_fu_418_p2.read(), ap_const_lv1_1))) {
        temp2_V_reg_252 = curr_label_V_fu_464_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        curr_dist_1_reg_662 = distances_0_q0.read();
        icmp_ln39_reg_667 = icmp_ln39_fu_484_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln36_fu_467_p2.read()))) {
        distances_0_addr_1_reg_657 =  (sc_lv<3>) (zext_ln39_fu_479_p1.read());
        zext_ln39_reg_652 = zext_ln39_fu_479_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        freq_addr_1_reg_702 =  (sc_lv<4>) (zext_ln65_fu_548_p1.read());
        sext_ln64_reg_697 = sext_ln64_fu_544_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        i_3_reg_687 = i_3_fu_523_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_4_reg_606 = i_4_fu_393_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        j_reg_647 = j_fu_473_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        p_Val2_1_reg_616 = train_samples_V_q0.read();
        p_Val2_3_reg_621 = train_samples_V_q0.read().range(403, 4);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        test_data_V_reg_590 = input_V.read().range(403, 4);
        test_label_V_reg_585 = test_label_V_fu_355_p1.read();
    }
}

void knn::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void knn::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void knn::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void knn::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void knn::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void knn::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void knn::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void knn::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void knn::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void knn::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void knn::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void knn::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void knn::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln62_fu_517_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void knn::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void knn::thread_ap_phi_mux_temp1_be_phi_fu_301_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln39_reg_667.read()))) {
        ap_phi_mux_temp1_be_phi_fu_301_p4 = curr_dist_1_reg_662.read();
    } else {
        ap_phi_mux_temp1_be_phi_fu_301_p4 = temp1_be_reg_297.read();
    }
}

void knn::thread_ap_phi_mux_temp2_V_be_phi_fu_289_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln39_reg_667.read()))) {
        ap_phi_mux_temp2_V_be_phi_fu_289_p4 = curr_label_V_1_fu_495_p1.read();
    } else {
        ap_phi_mux_temp2_V_be_phi_fu_289_p4 = temp2_V_be_reg_285.read();
    }
}

void knn::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln62_fu_517_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void knn::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void knn::thread_curr_label_V_1_fu_495_p1() {
    curr_label_V_1_fu_495_p1 = distances_1_q0.read().range(4-1, 0);
}

void knn::thread_curr_label_V_fu_464_p1() {
    curr_label_V_fu_464_p1 = p_Val2_1_reg_616.read().range(4-1, 0);
}

void knn::thread_distance_fu_450_p2() {
    distance_fu_450_p2 = (!curr_dist_reg_229.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_biguint<16>(curr_dist_reg_229.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void knn::thread_distances_0_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        distances_0_address0 = distances_0_addr_1_reg_657.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        distances_0_address0 =  (sc_lv<3>) (zext_ln39_fu_479_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        distances_0_address0 =  (sc_lv<3>) (zext_ln27_fu_381_p1.read());
    } else {
        distances_0_address0 = "XXX";
    }
}

void knn::thread_distances_0_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        distances_0_ce0 = ap_const_logic_1;
    } else {
        distances_0_ce0 = ap_const_logic_0;
    }
}

void knn::thread_distances_0_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        distances_0_d0 = temp1_reg_262.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        distances_0_d0 = ap_const_lv16_320;
    } else {
        distances_0_d0 =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
    }
}

void knn::thread_distances_0_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln39_fu_484_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln26_fu_369_p2.read())))) {
        distances_0_we0 = ap_const_logic_1;
    } else {
        distances_0_we0 = ap_const_logic_0;
    }
}

void knn::thread_distances_1_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        distances_1_address0 =  (sc_lv<3>) (zext_ln64_fu_529_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln39_fu_484_p2.read()))) {
        distances_1_address0 =  (sc_lv<3>) (zext_ln39_reg_652.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        distances_1_address0 =  (sc_lv<3>) (zext_ln27_fu_381_p1.read());
    } else {
        distances_1_address0 = "XXX";
    }
}

void knn::thread_distances_1_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln39_fu_484_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        distances_1_ce0 = ap_const_logic_1;
    } else {
        distances_1_ce0 = ap_const_logic_0;
    }
}

void knn::thread_distances_1_d0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln39_fu_484_p2.read()))) {
        distances_1_d0 = zext_ln45_fu_490_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        distances_1_d0 = ap_const_lv5_1F;
    } else {
        distances_1_d0 =  (sc_lv<5>) ("XXXXX");
    }
}

void knn::thread_distances_1_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln39_fu_484_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln26_fu_369_p2.read())))) {
        distances_1_we0 = ap_const_logic_1;
    } else {
        distances_1_we0 = ap_const_logic_0;
    }
}

void knn::thread_freq_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        freq_address0 = freq_addr_1_reg_702.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        freq_address0 =  (sc_lv<4>) (zext_ln65_fu_548_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        freq_address0 =  (sc_lv<4>) (zext_ln58_fu_512_p1.read());
    } else {
        freq_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void knn::thread_freq_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        freq_ce0 = ap_const_logic_1;
    } else {
        freq_ce0 = ap_const_logic_0;
    }
}

void knn::thread_freq_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        freq_d0 = max_freq_fu_556_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        freq_d0 = ap_const_lv32_0;
    } else {
        freq_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void knn::thread_freq_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln57_fu_500_p2.read())))) {
        freq_we0 = ap_const_logic_1;
    } else {
        freq_we0 = ap_const_logic_0;
    }
}

void knn::thread_i_1_fu_506_p2() {
    i_1_fu_506_p2 = (!i2_0_reg_309.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i2_0_reg_309.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void knn::thread_i_2_fu_424_p2() {
    i_2_fu_424_p2 = (!bvh_d_index_reg_241.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(bvh_d_index_reg_241.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void knn::thread_i_3_fu_523_p2() {
    i_3_fu_523_p2 = (!i3_0_reg_344.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i3_0_reg_344.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void knn::thread_i_4_fu_393_p2() {
    i_4_fu_393_p2 = (!i1_0_reg_218.read().is_01() || !ap_const_lv13_1.is_01())? sc_lv<13>(): (sc_biguint<13>(i1_0_reg_218.read()) + sc_biguint<13>(ap_const_lv13_1));
}

void knn::thread_i_fu_375_p2() {
    i_fu_375_p2 = (!i_0_reg_207.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_0_reg_207.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void knn::thread_icmp_ln26_fu_369_p2() {
    icmp_ln26_fu_369_p2 = (!i_0_reg_207.read().is_01() || !ap_const_lv3_5.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_207.read() == ap_const_lv3_5);
}

void knn::thread_icmp_ln32_fu_387_p2() {
    icmp_ln32_fu_387_p2 = (!i1_0_reg_218.read().is_01() || !ap_const_lv13_1770.is_01())? sc_lv<1>(): sc_lv<1>(i1_0_reg_218.read() == ap_const_lv13_1770);
}

void knn::thread_icmp_ln36_fu_467_p2() {
    icmp_ln36_fu_467_p2 = (!j_0_reg_274.read().is_01() || !ap_const_lv3_5.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_274.read() == ap_const_lv3_5);
}

void knn::thread_icmp_ln39_fu_484_p2() {
    icmp_ln39_fu_484_p2 = (!temp1_reg_262.read().is_01() || !distances_0_q0.read().is_01())? sc_lv<1>(): (sc_biguint<16>(temp1_reg_262.read()) < sc_biguint<16>(distances_0_q0.read()));
}

void knn::thread_icmp_ln57_fu_500_p2() {
    icmp_ln57_fu_500_p2 = (!i2_0_reg_309.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(i2_0_reg_309.read() == ap_const_lv4_A);
}

void knn::thread_icmp_ln62_fu_517_p2() {
    icmp_ln62_fu_517_p2 = (!i3_0_reg_344.read().is_01() || !ap_const_lv3_5.is_01())? sc_lv<1>(): sc_lv<1>(i3_0_reg_344.read() == ap_const_lv3_5);
}

void knn::thread_icmp_ln66_fu_563_p2() {
    icmp_ln66_fu_563_p2 = (!max_freq_fu_556_p2.read().is_01() || !max_freq_0_reg_320.read().is_01())? sc_lv<1>(): (sc_bigint<32>(max_freq_fu_556_p2.read()) > sc_bigint<32>(max_freq_0_reg_320.read()));
}

void knn::thread_icmp_ln82_fu_418_p2() {
    icmp_ln82_fu_418_p2 = (!bvh_d_index_reg_241.read().is_01() || !ap_const_lv9_190.is_01())? sc_lv<1>(): sc_lv<1>(bvh_d_index_reg_241.read() == ap_const_lv9_190);
}

void knn::thread_j_fu_473_p2() {
    j_fu_473_p2 = (!j_0_reg_274.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(j_0_reg_274.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void knn::thread_max_freq_fu_556_p2() {
    max_freq_fu_556_p2 = (!freq_q0.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(freq_q0.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void knn::thread_most_freq_fu_553_p1() {
    most_freq_fu_553_p1 = esl_zext<32,16>(sext_ln64_reg_697.read());
}

void knn::thread_output_V() {
    output_V = (!zext_ln73_fu_534_p1.read().is_01() || !most_freq_0_reg_332.read().is_01())? sc_lv<1>(): sc_lv<1>(zext_ln73_fu_534_p1.read() == most_freq_0_reg_332.read());
}

void knn::thread_output_V_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln62_fu_517_p2.read()))) {
        output_V_ap_vld = ap_const_logic_1;
    } else {
        output_V_ap_vld = ap_const_logic_0;
    }
}

void knn::thread_p_Result_1_fu_437_p3() {
    p_Result_1_fu_437_p3 = (!zext_ln82_fu_414_p1.read().is_01() || sc_biguint<32>(zext_ln82_fu_414_p1.read()).to_uint() >= 400)? sc_lv<1>(): p_Val2_3_reg_621.read().range(sc_biguint<32>(zext_ln82_fu_414_p1.read()).to_uint(), sc_biguint<32>(zext_ln82_fu_414_p1.read()).to_uint());
}

void knn::thread_p_Result_s_fu_430_p3() {
    p_Result_s_fu_430_p3 = (!zext_ln82_fu_414_p1.read().is_01() || sc_biguint<32>(zext_ln82_fu_414_p1.read()).to_uint() >= 400)? sc_lv<1>(): test_data_V_reg_590.read().range(sc_biguint<32>(zext_ln82_fu_414_p1.read()).to_uint(), sc_biguint<32>(zext_ln82_fu_414_p1.read()).to_uint());
}

void knn::thread_select_ln66_1_fu_577_p3() {
    select_ln66_1_fu_577_p3 = (!icmp_ln66_fu_563_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln66_fu_563_p2.read()[0].to_bool())? most_freq_fu_553_p1.read(): most_freq_0_reg_332.read());
}

void knn::thread_select_ln66_fu_569_p3() {
    select_ln66_fu_569_p3 = (!icmp_ln66_fu_563_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln66_fu_563_p2.read()[0].to_bool())? max_freq_fu_556_p2.read(): max_freq_0_reg_320.read());
}

void knn::thread_select_ln83_fu_456_p3() {
    select_ln83_fu_456_p3 = (!xor_ln968_fu_444_p2.read()[0].is_01())? sc_lv<16>(): ((xor_ln968_fu_444_p2.read()[0].to_bool())? distance_fu_450_p2.read(): curr_dist_reg_229.read());
}

void knn::thread_sext_ln64_fu_544_p1() {
    sext_ln64_fu_544_p1 = esl_sext<16,5>(distances_1_q0.read());
}

void knn::thread_test_label_V_fu_355_p1() {
    test_label_V_fu_355_p1 = input_V.read().range(4-1, 0);
}

void knn::thread_train_samples_V_address0() {
    train_samples_V_address0 =  (sc_lv<13>) (zext_ln34_fu_399_p1.read());
}

void knn::thread_train_samples_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        train_samples_V_ce0 = ap_const_logic_1;
    } else {
        train_samples_V_ce0 = ap_const_logic_0;
    }
}

void knn::thread_xor_ln968_fu_444_p2() {
    xor_ln968_fu_444_p2 = (p_Result_s_fu_430_p3.read() ^ p_Result_1_fu_437_p3.read());
}

void knn::thread_zext_ln27_fu_381_p1() {
    zext_ln27_fu_381_p1 = esl_zext<64,3>(i_0_reg_207.read());
}

void knn::thread_zext_ln34_fu_399_p1() {
    zext_ln34_fu_399_p1 = esl_zext<64,13>(i1_0_reg_218.read());
}

void knn::thread_zext_ln39_fu_479_p1() {
    zext_ln39_fu_479_p1 = esl_zext<64,3>(j_0_reg_274.read());
}

void knn::thread_zext_ln45_fu_490_p1() {
    zext_ln45_fu_490_p1 = esl_zext<5,4>(temp2_V_reg_252.read());
}

void knn::thread_zext_ln58_fu_512_p1() {
    zext_ln58_fu_512_p1 = esl_zext<64,4>(i2_0_reg_309.read());
}

void knn::thread_zext_ln64_fu_529_p1() {
    zext_ln64_fu_529_p1 = esl_zext<64,3>(i3_0_reg_344.read());
}

void knn::thread_zext_ln65_fu_548_p1() {
    zext_ln65_fu_548_p1 = esl_zext<64,16>(sext_ln64_fu_544_p1.read());
}

void knn::thread_zext_ln73_fu_534_p1() {
    zext_ln73_fu_534_p1 = esl_zext<32,4>(test_label_V_reg_585.read());
}

void knn::thread_zext_ln82_fu_414_p1() {
    zext_ln82_fu_414_p1 = esl_zext<32,9>(bvh_d_index_reg_241.read());
}

void knn::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln26_fu_369_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln32_fu_387_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(icmp_ln82_fu_418_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln36_fu_467_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln57_fu_500_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln62_fu_517_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<12>) ("XXXXXXXXXXXX");
            break;
    }
}

void knn::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

