// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="knn,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.629000,HLS_SYN_LAT=2514034,HLS_SYN_TPT=none,HLS_SYN_MEM=204,HLS_SYN_DSP=0,HLS_SYN_FF=2076,HLS_SYN_LUT=1567,HLS_VERSION=2020_1}" *)

module knn (
        ap_clk,
        ap_rst_n,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 21;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [403:0] input_V;
wire   [12:0] train_samples_V_address0;
reg    train_samples_V_ce0;
wire   [403:0] train_samples_V_q0;
wire   [0:0] output_V;
reg    output_V_ap_vld;
wire   [3:0] test_label_V_fu_355_p1;
reg   [3:0] test_label_V_reg_585;
reg   [399:0] test_data_V_reg_590;
wire   [2:0] i_fu_375_p2;
wire    ap_CS_fsm_state2;
wire   [12:0] i_4_fu_393_p2;
reg   [12:0] i_4_reg_606;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln32_fu_387_p2;
reg   [403:0] p_Val2_1_reg_616;
wire    ap_CS_fsm_state4;
reg   [399:0] p_Val2_3_reg_621;
wire   [8:0] i_2_fu_424_p2;
wire    ap_CS_fsm_state5;
wire   [15:0] select_ln83_fu_456_p3;
wire   [0:0] icmp_ln82_fu_418_p2;
wire   [3:0] curr_label_V_fu_464_p1;
wire   [2:0] j_fu_473_p2;
reg   [2:0] j_reg_647;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln39_fu_479_p1;
reg   [63:0] zext_ln39_reg_652;
wire   [0:0] icmp_ln36_fu_467_p2;
reg   [2:0] distances_0_addr_1_reg_657;
wire   [15:0] distances_0_q0;
reg   [15:0] curr_dist_1_reg_662;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln39_fu_484_p2;
reg   [0:0] icmp_ln39_reg_667;
wire   [3:0] i_1_fu_506_p2;
wire    ap_CS_fsm_state9;
wire   [2:0] i_3_fu_523_p2;
reg   [2:0] i_3_reg_687;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln62_fu_517_p2;
wire  signed [15:0] sext_ln64_fu_544_p1;
reg  signed [15:0] sext_ln64_reg_697;
wire    ap_CS_fsm_state11;
reg   [3:0] freq_addr_1_reg_702;
wire   [31:0] select_ln66_fu_569_p3;
wire    ap_CS_fsm_state12;
wire   [31:0] select_ln66_1_fu_577_p3;
reg   [2:0] distances_0_address0;
reg    distances_0_ce0;
reg    distances_0_we0;
reg   [15:0] distances_0_d0;
reg   [2:0] distances_1_address0;
reg    distances_1_ce0;
reg    distances_1_we0;
reg   [4:0] distances_1_d0;
wire   [4:0] distances_1_q0;
reg   [3:0] freq_address0;
reg    freq_ce0;
reg    freq_we0;
reg   [31:0] freq_d0;
wire   [31:0] freq_q0;
reg   [2:0] i_0_reg_207;
wire   [0:0] icmp_ln26_fu_369_p2;
reg   [12:0] i1_0_reg_218;
reg   [15:0] curr_dist_reg_229;
reg   [8:0] bvh_d_index_reg_241;
reg   [3:0] temp2_V_reg_252;
reg   [3:0] ap_phi_mux_temp2_V_be_phi_fu_289_p4;
wire    ap_CS_fsm_state8;
reg   [15:0] temp1_reg_262;
reg   [15:0] ap_phi_mux_temp1_be_phi_fu_301_p4;
reg   [2:0] j_0_reg_274;
wire   [3:0] curr_label_V_1_fu_495_p1;
reg   [3:0] temp2_V_be_reg_285;
reg   [15:0] temp1_be_reg_297;
reg   [3:0] i2_0_reg_309;
wire   [0:0] icmp_ln57_fu_500_p2;
reg   [31:0] max_freq_0_reg_320;
reg   [31:0] most_freq_0_reg_332;
reg   [2:0] i3_0_reg_344;
wire   [63:0] zext_ln27_fu_381_p1;
wire   [63:0] zext_ln34_fu_399_p1;
wire   [63:0] zext_ln58_fu_512_p1;
wire   [63:0] zext_ln64_fu_529_p1;
wire   [63:0] zext_ln65_fu_548_p1;
wire   [4:0] zext_ln45_fu_490_p1;
wire   [31:0] max_freq_fu_556_p2;
wire   [31:0] zext_ln82_fu_414_p1;
wire   [0:0] p_Result_s_fu_430_p3;
wire   [0:0] p_Result_1_fu_437_p3;
wire   [0:0] xor_ln968_fu_444_p2;
wire   [15:0] distance_fu_450_p2;
wire   [31:0] zext_ln73_fu_534_p1;
wire   [0:0] icmp_ln66_fu_563_p2;
wire   [31:0] most_freq_fu_553_p1;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
end

knn_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
knn_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .input_V(input_V),
    .train_samples_V_address0(train_samples_V_address0),
    .train_samples_V_ce0(train_samples_V_ce0),
    .train_samples_V_q0(train_samples_V_q0),
    .output_V(output_V),
    .output_V_ap_vld(output_V_ap_vld)
);

knn_distances_0 #(
    .DataWidth( 16 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
distances_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(distances_0_address0),
    .ce0(distances_0_ce0),
    .we0(distances_0_we0),
    .d0(distances_0_d0),
    .q0(distances_0_q0)
);

knn_distances_1 #(
    .DataWidth( 5 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
distances_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(distances_1_address0),
    .ce0(distances_1_ce0),
    .we0(distances_1_we0),
    .d0(distances_1_d0),
    .q0(distances_1_q0)
);

knn_freq #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
freq_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(freq_address0),
    .ce0(freq_ce0),
    .we0(freq_we0),
    .d0(freq_d0),
    .q0(freq_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln82_fu_418_p2 == 1'd0))) begin
        bvh_d_index_reg_241 <= i_2_fu_424_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        bvh_d_index_reg_241 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln82_fu_418_p2 == 1'd0))) begin
        curr_dist_reg_229 <= select_ln83_fu_456_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        curr_dist_reg_229 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_369_p2 == 1'd1))) begin
        i1_0_reg_218 <= 13'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln36_fu_467_p2 == 1'd1))) begin
        i1_0_reg_218 <= i_4_reg_606;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln32_fu_387_p2 == 1'd1))) begin
        i2_0_reg_309 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln57_fu_500_p2 == 1'd0))) begin
        i2_0_reg_309 <= i_1_fu_506_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln57_fu_500_p2 == 1'd1))) begin
        i3_0_reg_344 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        i3_0_reg_344 <= i_3_reg_687;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_369_p2 == 1'd0))) begin
        i_0_reg_207 <= i_fu_375_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_207 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_0_reg_274 <= j_reg_647;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln82_fu_418_p2 == 1'd1))) begin
        j_0_reg_274 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln57_fu_500_p2 == 1'd1))) begin
        max_freq_0_reg_320 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        max_freq_0_reg_320 <= select_ln66_fu_569_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln57_fu_500_p2 == 1'd1))) begin
        most_freq_0_reg_332 <= 32'd4294967295;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        most_freq_0_reg_332 <= select_ln66_1_fu_577_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln39_fu_484_p2 == 1'd0))) begin
        temp1_be_reg_297 <= temp1_reg_262;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln39_reg_667 == 1'd1))) begin
        temp1_be_reg_297 <= curr_dist_1_reg_662;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        temp1_reg_262 <= ap_phi_mux_temp1_be_phi_fu_301_p4;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln82_fu_418_p2 == 1'd1))) begin
        temp1_reg_262 <= curr_dist_reg_229;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln39_fu_484_p2 == 1'd0))) begin
        temp2_V_be_reg_285 <= temp2_V_reg_252;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln39_reg_667 == 1'd1))) begin
        temp2_V_be_reg_285 <= curr_label_V_1_fu_495_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        temp2_V_reg_252 <= ap_phi_mux_temp2_V_be_phi_fu_289_p4;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln82_fu_418_p2 == 1'd1))) begin
        temp2_V_reg_252 <= curr_label_V_fu_464_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        curr_dist_1_reg_662 <= distances_0_q0;
        icmp_ln39_reg_667 <= icmp_ln39_fu_484_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln36_fu_467_p2 == 1'd0))) begin
        distances_0_addr_1_reg_657 <= zext_ln39_fu_479_p1;
        zext_ln39_reg_652[2 : 0] <= zext_ln39_fu_479_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        freq_addr_1_reg_702 <= zext_ln65_fu_548_p1;
        sext_ln64_reg_697 <= sext_ln64_fu_544_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_3_reg_687 <= i_3_fu_523_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_4_reg_606 <= i_4_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_reg_647 <= j_fu_473_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_Val2_1_reg_616 <= train_samples_V_q0;
        p_Val2_3_reg_621 <= {{train_samples_V_q0[403:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        test_data_V_reg_590 <= {{input_V[403:4]}};
        test_label_V_reg_585 <= test_label_V_fu_355_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln62_fu_517_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln39_reg_667 == 1'd1))) begin
        ap_phi_mux_temp1_be_phi_fu_301_p4 = curr_dist_1_reg_662;
    end else begin
        ap_phi_mux_temp1_be_phi_fu_301_p4 = temp1_be_reg_297;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln39_reg_667 == 1'd1))) begin
        ap_phi_mux_temp2_V_be_phi_fu_289_p4 = curr_label_V_1_fu_495_p1;
    end else begin
        ap_phi_mux_temp2_V_be_phi_fu_289_p4 = temp2_V_be_reg_285;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln62_fu_517_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        distances_0_address0 = distances_0_addr_1_reg_657;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        distances_0_address0 = zext_ln39_fu_479_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        distances_0_address0 = zext_ln27_fu_381_p1;
    end else begin
        distances_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        distances_0_ce0 = 1'b1;
    end else begin
        distances_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        distances_0_d0 = temp1_reg_262;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        distances_0_d0 = 16'd800;
    end else begin
        distances_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_369_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state7) & (icmp_ln39_fu_484_p2 == 1'd1)))) begin
        distances_0_we0 = 1'b1;
    end else begin
        distances_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        distances_1_address0 = zext_ln64_fu_529_p1;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln39_fu_484_p2 == 1'd1))) begin
        distances_1_address0 = zext_ln39_reg_652;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        distances_1_address0 = zext_ln27_fu_381_p1;
    end else begin
        distances_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state7) & (icmp_ln39_fu_484_p2 == 1'd1)))) begin
        distances_1_ce0 = 1'b1;
    end else begin
        distances_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln39_fu_484_p2 == 1'd1))) begin
        distances_1_d0 = zext_ln45_fu_490_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        distances_1_d0 = 5'd31;
    end else begin
        distances_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_369_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state7) & (icmp_ln39_fu_484_p2 == 1'd1)))) begin
        distances_1_we0 = 1'b1;
    end else begin
        distances_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        freq_address0 = freq_addr_1_reg_702;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        freq_address0 = zext_ln65_fu_548_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        freq_address0 = zext_ln58_fu_512_p1;
    end else begin
        freq_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9))) begin
        freq_ce0 = 1'b1;
    end else begin
        freq_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        freq_d0 = max_freq_fu_556_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        freq_d0 = 32'd0;
    end else begin
        freq_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((1'b1 == ap_CS_fsm_state9) & (icmp_ln57_fu_500_p2 == 1'd0)))) begin
        freq_we0 = 1'b1;
    end else begin
        freq_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln62_fu_517_p2 == 1'd1))) begin
        output_V_ap_vld = 1'b1;
    end else begin
        output_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        train_samples_V_ce0 = 1'b1;
    end else begin
        train_samples_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_369_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln32_fu_387_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln82_fu_418_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln36_fu_467_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln57_fu_500_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln62_fu_517_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign curr_label_V_1_fu_495_p1 = distances_1_q0[3:0];

assign curr_label_V_fu_464_p1 = p_Val2_1_reg_616[3:0];

assign distance_fu_450_p2 = (curr_dist_reg_229 + 16'd1);

assign i_1_fu_506_p2 = (i2_0_reg_309 + 4'd1);

assign i_2_fu_424_p2 = (bvh_d_index_reg_241 + 9'd1);

assign i_3_fu_523_p2 = (i3_0_reg_344 + 3'd1);

assign i_4_fu_393_p2 = (i1_0_reg_218 + 13'd1);

assign i_fu_375_p2 = (i_0_reg_207 + 3'd1);

assign icmp_ln26_fu_369_p2 = ((i_0_reg_207 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_387_p2 = ((i1_0_reg_218 == 13'd6000) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_467_p2 = ((j_0_reg_274 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_484_p2 = ((temp1_reg_262 < distances_0_q0) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_500_p2 = ((i2_0_reg_309 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_517_p2 = ((i3_0_reg_344 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_563_p2 = (($signed(max_freq_fu_556_p2) > $signed(max_freq_0_reg_320)) ? 1'b1 : 1'b0);

assign icmp_ln82_fu_418_p2 = ((bvh_d_index_reg_241 == 9'd400) ? 1'b1 : 1'b0);

assign j_fu_473_p2 = (j_0_reg_274 + 3'd1);

assign max_freq_fu_556_p2 = (freq_q0 + 32'd1);

assign most_freq_fu_553_p1 = $unsigned(sext_ln64_reg_697);

assign output_V = ((zext_ln73_fu_534_p1 == most_freq_0_reg_332) ? 1'b1 : 1'b0);

assign p_Result_1_fu_437_p3 = p_Val2_3_reg_621[zext_ln82_fu_414_p1];

assign p_Result_s_fu_430_p3 = test_data_V_reg_590[zext_ln82_fu_414_p1];

assign select_ln66_1_fu_577_p3 = ((icmp_ln66_fu_563_p2[0:0] === 1'b1) ? most_freq_fu_553_p1 : most_freq_0_reg_332);

assign select_ln66_fu_569_p3 = ((icmp_ln66_fu_563_p2[0:0] === 1'b1) ? max_freq_fu_556_p2 : max_freq_0_reg_320);

assign select_ln83_fu_456_p3 = ((xor_ln968_fu_444_p2[0:0] === 1'b1) ? distance_fu_450_p2 : curr_dist_reg_229);

assign sext_ln64_fu_544_p1 = $signed(distances_1_q0);

assign test_label_V_fu_355_p1 = input_V[3:0];

assign train_samples_V_address0 = zext_ln34_fu_399_p1;

assign xor_ln968_fu_444_p2 = (p_Result_s_fu_430_p3 ^ p_Result_1_fu_437_p3);

assign zext_ln27_fu_381_p1 = i_0_reg_207;

assign zext_ln34_fu_399_p1 = i1_0_reg_218;

assign zext_ln39_fu_479_p1 = j_0_reg_274;

assign zext_ln45_fu_490_p1 = temp2_V_reg_252;

assign zext_ln58_fu_512_p1 = i2_0_reg_309;

assign zext_ln64_fu_529_p1 = i3_0_reg_344;

assign zext_ln65_fu_548_p1 = $unsigned(sext_ln64_fu_544_p1);

assign zext_ln73_fu_534_p1 = test_label_V_reg_585;

assign zext_ln82_fu_414_p1 = bvh_d_index_reg_241;

always @ (posedge ap_clk) begin
    zext_ln39_reg_652[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //knn
