-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity knn is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 21;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of knn is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "knn,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.629000,HLS_SYN_LAT=2514034,HLS_SYN_TPT=none,HLS_SYN_MEM=204,HLS_SYN_DSP=0,HLS_SYN_FF=2076,HLS_SYN_LUT=1567,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv16_320 : STD_LOGIC_VECTOR (15 downto 0) := "0000001100100000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv32_193 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110010011";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv13_1770 : STD_LOGIC_VECTOR (12 downto 0) := "1011101110000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv9_190 : STD_LOGIC_VECTOR (8 downto 0) := "110010000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_V : STD_LOGIC_VECTOR (403 downto 0);
    signal train_samples_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal train_samples_V_ce0 : STD_LOGIC;
    signal train_samples_V_q0 : STD_LOGIC_VECTOR (403 downto 0);
    signal output_V : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V_ap_vld : STD_LOGIC;
    signal test_label_V_fu_355_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal test_label_V_reg_585 : STD_LOGIC_VECTOR (3 downto 0);
    signal test_data_V_reg_590 : STD_LOGIC_VECTOR (399 downto 0);
    signal i_fu_375_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_4_fu_393_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_4_reg_606 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln32_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_1_reg_616 : STD_LOGIC_VECTOR (403 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal p_Val2_3_reg_621 : STD_LOGIC_VECTOR (399 downto 0);
    signal i_2_fu_424_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal select_ln83_fu_456_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln82_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal curr_label_V_fu_464_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_fu_473_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_647 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln39_fu_479_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_reg_652 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln36_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal distances_0_addr_1_reg_657 : STD_LOGIC_VECTOR (2 downto 0);
    signal distances_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal curr_dist_1_reg_662 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln39_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_reg_667 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_506_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_3_fu_523_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_3_reg_687 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln62_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln64_fu_544_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln64_reg_697 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal freq_addr_1_reg_702 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln66_fu_569_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal select_ln66_1_fu_577_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal distances_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal distances_0_ce0 : STD_LOGIC;
    signal distances_0_we0 : STD_LOGIC;
    signal distances_0_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal distances_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal distances_1_ce0 : STD_LOGIC;
    signal distances_1_we0 : STD_LOGIC;
    signal distances_1_d0 : STD_LOGIC_VECTOR (4 downto 0);
    signal distances_1_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal freq_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal freq_ce0 : STD_LOGIC;
    signal freq_we0 : STD_LOGIC;
    signal freq_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal freq_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_207 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln26_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_0_reg_218 : STD_LOGIC_VECTOR (12 downto 0);
    signal curr_dist_reg_229 : STD_LOGIC_VECTOR (15 downto 0);
    signal bvh_d_index_reg_241 : STD_LOGIC_VECTOR (8 downto 0);
    signal temp2_V_reg_252 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_temp2_V_be_phi_fu_289_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal temp1_reg_262 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_temp1_be_phi_fu_301_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_0_reg_274 : STD_LOGIC_VECTOR (2 downto 0);
    signal curr_label_V_1_fu_495_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal temp2_V_be_reg_285 : STD_LOGIC_VECTOR (3 downto 0);
    signal temp1_be_reg_297 : STD_LOGIC_VECTOR (15 downto 0);
    signal i2_0_reg_309 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln57_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_freq_0_reg_320 : STD_LOGIC_VECTOR (31 downto 0);
    signal most_freq_0_reg_332 : STD_LOGIC_VECTOR (31 downto 0);
    signal i3_0_reg_344 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln27_fu_381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_fu_399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_fu_512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln64_fu_529_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln65_fu_548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_fu_490_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal max_freq_fu_556_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln82_fu_414_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_430_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_fu_437_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln968_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal distance_fu_450_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln73_fu_534_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln66_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal most_freq_fu_553_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component knn_distances_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component knn_distances_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (4 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component knn_freq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component knn_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        input_V : OUT STD_LOGIC_VECTOR (403 downto 0);
        train_samples_V_address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        train_samples_V_ce0 : IN STD_LOGIC;
        train_samples_V_q0 : OUT STD_LOGIC_VECTOR (403 downto 0);
        output_V : IN STD_LOGIC_VECTOR (0 downto 0);
        output_V_ap_vld : IN STD_LOGIC );
    end component;



begin
    knn_AXILiteS_s_axi_U : component knn_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        input_V => input_V,
        train_samples_V_address0 => train_samples_V_address0,
        train_samples_V_ce0 => train_samples_V_ce0,
        train_samples_V_q0 => train_samples_V_q0,
        output_V => output_V,
        output_V_ap_vld => output_V_ap_vld);

    distances_0_U : component knn_distances_0
    generic map (
        DataWidth => 16,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => distances_0_address0,
        ce0 => distances_0_ce0,
        we0 => distances_0_we0,
        d0 => distances_0_d0,
        q0 => distances_0_q0);

    distances_1_U : component knn_distances_1
    generic map (
        DataWidth => 5,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => distances_1_address0,
        ce0 => distances_1_ce0,
        we0 => distances_1_we0,
        d0 => distances_1_d0,
        q0 => distances_1_q0);

    freq_U : component knn_freq
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => freq_address0,
        ce0 => freq_ce0,
        we0 => freq_we0,
        d0 => freq_d0,
        q0 => freq_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    bvh_d_index_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln82_fu_418_p2 = ap_const_lv1_0))) then 
                bvh_d_index_reg_241 <= i_2_fu_424_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                bvh_d_index_reg_241 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    curr_dist_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln82_fu_418_p2 = ap_const_lv1_0))) then 
                curr_dist_reg_229 <= select_ln83_fu_456_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                curr_dist_reg_229 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    i1_0_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_369_p2 = ap_const_lv1_1))) then 
                i1_0_reg_218 <= ap_const_lv13_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln36_fu_467_p2 = ap_const_lv1_1))) then 
                i1_0_reg_218 <= i_4_reg_606;
            end if; 
        end if;
    end process;

    i2_0_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln32_fu_387_p2 = ap_const_lv1_1))) then 
                i2_0_reg_309 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln57_fu_500_p2 = ap_const_lv1_0))) then 
                i2_0_reg_309 <= i_1_fu_506_p2;
            end if; 
        end if;
    end process;

    i3_0_reg_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln57_fu_500_p2 = ap_const_lv1_1))) then 
                i3_0_reg_344 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i3_0_reg_344 <= i_3_reg_687;
            end if; 
        end if;
    end process;

    i_0_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_369_p2 = ap_const_lv1_0))) then 
                i_0_reg_207 <= i_fu_375_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_207 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_0_reg_274 <= j_reg_647;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln82_fu_418_p2 = ap_const_lv1_1))) then 
                j_0_reg_274 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    max_freq_0_reg_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln57_fu_500_p2 = ap_const_lv1_1))) then 
                max_freq_0_reg_320 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                max_freq_0_reg_320 <= select_ln66_fu_569_p3;
            end if; 
        end if;
    end process;

    most_freq_0_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln57_fu_500_p2 = ap_const_lv1_1))) then 
                most_freq_0_reg_332 <= ap_const_lv32_FFFFFFFF;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                most_freq_0_reg_332 <= select_ln66_1_fu_577_p3;
            end if; 
        end if;
    end process;

    temp1_be_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln39_fu_484_p2 = ap_const_lv1_0))) then 
                temp1_be_reg_297 <= temp1_reg_262;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln39_reg_667 = ap_const_lv1_1))) then 
                temp1_be_reg_297 <= curr_dist_1_reg_662;
            end if; 
        end if;
    end process;

    temp1_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                temp1_reg_262 <= ap_phi_mux_temp1_be_phi_fu_301_p4;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln82_fu_418_p2 = ap_const_lv1_1))) then 
                temp1_reg_262 <= curr_dist_reg_229;
            end if; 
        end if;
    end process;

    temp2_V_be_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln39_fu_484_p2 = ap_const_lv1_0))) then 
                temp2_V_be_reg_285 <= temp2_V_reg_252;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln39_reg_667 = ap_const_lv1_1))) then 
                temp2_V_be_reg_285 <= curr_label_V_1_fu_495_p1;
            end if; 
        end if;
    end process;

    temp2_V_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                temp2_V_reg_252 <= ap_phi_mux_temp2_V_be_phi_fu_289_p4;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln82_fu_418_p2 = ap_const_lv1_1))) then 
                temp2_V_reg_252 <= curr_label_V_fu_464_p1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                curr_dist_1_reg_662 <= distances_0_q0;
                icmp_ln39_reg_667 <= icmp_ln39_fu_484_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln36_fu_467_p2 = ap_const_lv1_0))) then
                distances_0_addr_1_reg_657 <= zext_ln39_fu_479_p1(3 - 1 downto 0);
                    zext_ln39_reg_652(2 downto 0) <= zext_ln39_fu_479_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                freq_addr_1_reg_702 <= zext_ln65_fu_548_p1(4 - 1 downto 0);
                sext_ln64_reg_697 <= sext_ln64_fu_544_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_3_reg_687 <= i_3_fu_523_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_4_reg_606 <= i_4_fu_393_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_reg_647 <= j_fu_473_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                p_Val2_1_reg_616 <= train_samples_V_q0;
                p_Val2_3_reg_621 <= train_samples_V_q0(403 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                test_data_V_reg_590 <= input_V(403 downto 4);
                test_label_V_reg_585 <= test_label_V_fu_355_p1;
            end if;
        end if;
    end process;
    zext_ln39_reg_652(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln32_fu_387_p2, ap_CS_fsm_state5, icmp_ln82_fu_418_p2, ap_CS_fsm_state6, icmp_ln36_fu_467_p2, ap_CS_fsm_state9, ap_CS_fsm_state10, icmp_ln62_fu_517_p2, icmp_ln26_fu_369_p2, icmp_ln57_fu_500_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_369_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln32_fu_387_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln82_fu_418_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln36_fu_467_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln57_fu_500_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln62_fu_517_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state10, icmp_ln62_fu_517_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln62_fu_517_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_temp1_be_phi_fu_301_p4_assign_proc : process(curr_dist_1_reg_662, icmp_ln39_reg_667, ap_CS_fsm_state8, temp1_be_reg_297)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln39_reg_667 = ap_const_lv1_1))) then 
            ap_phi_mux_temp1_be_phi_fu_301_p4 <= curr_dist_1_reg_662;
        else 
            ap_phi_mux_temp1_be_phi_fu_301_p4 <= temp1_be_reg_297;
        end if; 
    end process;


    ap_phi_mux_temp2_V_be_phi_fu_289_p4_assign_proc : process(icmp_ln39_reg_667, ap_CS_fsm_state8, curr_label_V_1_fu_495_p1, temp2_V_be_reg_285)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln39_reg_667 = ap_const_lv1_1))) then 
            ap_phi_mux_temp2_V_be_phi_fu_289_p4 <= curr_label_V_1_fu_495_p1;
        else 
            ap_phi_mux_temp2_V_be_phi_fu_289_p4 <= temp2_V_be_reg_285;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10, icmp_ln62_fu_517_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln62_fu_517_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    curr_label_V_1_fu_495_p1 <= distances_1_q0(4 - 1 downto 0);
    curr_label_V_fu_464_p1 <= p_Val2_1_reg_616(4 - 1 downto 0);
    distance_fu_450_p2 <= std_logic_vector(unsigned(curr_dist_reg_229) + unsigned(ap_const_lv16_1));

    distances_0_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, zext_ln39_fu_479_p1, distances_0_addr_1_reg_657, ap_CS_fsm_state7, zext_ln27_fu_381_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            distances_0_address0 <= distances_0_addr_1_reg_657;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            distances_0_address0 <= zext_ln39_fu_479_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            distances_0_address0 <= zext_ln27_fu_381_p1(3 - 1 downto 0);
        else 
            distances_0_address0 <= "XXX";
        end if; 
    end process;


    distances_0_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            distances_0_ce0 <= ap_const_logic_1;
        else 
            distances_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    distances_0_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7, temp1_reg_262)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            distances_0_d0 <= temp1_reg_262;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            distances_0_d0 <= ap_const_lv16_320;
        else 
            distances_0_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    distances_0_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7, icmp_ln39_fu_484_p2, icmp_ln26_fu_369_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_369_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln39_fu_484_p2 = ap_const_lv1_1)))) then 
            distances_0_we0 <= ap_const_logic_1;
        else 
            distances_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    distances_1_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln39_reg_652, ap_CS_fsm_state7, icmp_ln39_fu_484_p2, ap_CS_fsm_state10, zext_ln27_fu_381_p1, zext_ln64_fu_529_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            distances_1_address0 <= zext_ln64_fu_529_p1(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln39_fu_484_p2 = ap_const_lv1_1))) then 
            distances_1_address0 <= zext_ln39_reg_652(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            distances_1_address0 <= zext_ln27_fu_381_p1(3 - 1 downto 0);
        else 
            distances_1_address0 <= "XXX";
        end if; 
    end process;


    distances_1_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7, icmp_ln39_fu_484_p2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln39_fu_484_p2 = ap_const_lv1_1)))) then 
            distances_1_ce0 <= ap_const_logic_1;
        else 
            distances_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    distances_1_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7, icmp_ln39_fu_484_p2, zext_ln45_fu_490_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln39_fu_484_p2 = ap_const_lv1_1))) then 
            distances_1_d0 <= zext_ln45_fu_490_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            distances_1_d0 <= ap_const_lv5_1F;
        else 
            distances_1_d0 <= "XXXXX";
        end if; 
    end process;


    distances_1_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7, icmp_ln39_fu_484_p2, icmp_ln26_fu_369_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_369_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln39_fu_484_p2 = ap_const_lv1_1)))) then 
            distances_1_we0 <= ap_const_logic_1;
        else 
            distances_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    freq_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state11, freq_addr_1_reg_702, ap_CS_fsm_state12, zext_ln58_fu_512_p1, zext_ln65_fu_548_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            freq_address0 <= freq_addr_1_reg_702;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            freq_address0 <= zext_ln65_fu_548_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            freq_address0 <= zext_ln58_fu_512_p1(4 - 1 downto 0);
        else 
            freq_address0 <= "XXXX";
        end if; 
    end process;


    freq_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            freq_ce0 <= ap_const_logic_1;
        else 
            freq_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    freq_d0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state12, max_freq_fu_556_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            freq_d0 <= max_freq_fu_556_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            freq_d0 <= ap_const_lv32_0;
        else 
            freq_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    freq_we0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state12, icmp_ln57_fu_500_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln57_fu_500_p2 = ap_const_lv1_0)))) then 
            freq_we0 <= ap_const_logic_1;
        else 
            freq_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_506_p2 <= std_logic_vector(unsigned(i2_0_reg_309) + unsigned(ap_const_lv4_1));
    i_2_fu_424_p2 <= std_logic_vector(unsigned(bvh_d_index_reg_241) + unsigned(ap_const_lv9_1));
    i_3_fu_523_p2 <= std_logic_vector(unsigned(i3_0_reg_344) + unsigned(ap_const_lv3_1));
    i_4_fu_393_p2 <= std_logic_vector(unsigned(i1_0_reg_218) + unsigned(ap_const_lv13_1));
    i_fu_375_p2 <= std_logic_vector(unsigned(i_0_reg_207) + unsigned(ap_const_lv3_1));
    icmp_ln26_fu_369_p2 <= "1" when (i_0_reg_207 = ap_const_lv3_5) else "0";
    icmp_ln32_fu_387_p2 <= "1" when (i1_0_reg_218 = ap_const_lv13_1770) else "0";
    icmp_ln36_fu_467_p2 <= "1" when (j_0_reg_274 = ap_const_lv3_5) else "0";
    icmp_ln39_fu_484_p2 <= "1" when (unsigned(temp1_reg_262) < unsigned(distances_0_q0)) else "0";
    icmp_ln57_fu_500_p2 <= "1" when (i2_0_reg_309 = ap_const_lv4_A) else "0";
    icmp_ln62_fu_517_p2 <= "1" when (i3_0_reg_344 = ap_const_lv3_5) else "0";
    icmp_ln66_fu_563_p2 <= "1" when (signed(max_freq_fu_556_p2) > signed(max_freq_0_reg_320)) else "0";
    icmp_ln82_fu_418_p2 <= "1" when (bvh_d_index_reg_241 = ap_const_lv9_190) else "0";
    j_fu_473_p2 <= std_logic_vector(unsigned(j_0_reg_274) + unsigned(ap_const_lv3_1));
    max_freq_fu_556_p2 <= std_logic_vector(unsigned(freq_q0) + unsigned(ap_const_lv32_1));
    most_freq_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln64_reg_697),32));
    output_V <= "1" when (zext_ln73_fu_534_p1 = most_freq_0_reg_332) else "0";

    output_V_ap_vld_assign_proc : process(ap_CS_fsm_state10, icmp_ln62_fu_517_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln62_fu_517_p2 = ap_const_lv1_1))) then 
            output_V_ap_vld <= ap_const_logic_1;
        else 
            output_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_1_fu_437_p3 <= p_Val2_3_reg_621(to_integer(unsigned(zext_ln82_fu_414_p1)) downto to_integer(unsigned(zext_ln82_fu_414_p1))) when (to_integer(unsigned(zext_ln82_fu_414_p1))>= 0 and to_integer(unsigned(zext_ln82_fu_414_p1))<=399) else "-";
    p_Result_s_fu_430_p3 <= test_data_V_reg_590(to_integer(unsigned(zext_ln82_fu_414_p1)) downto to_integer(unsigned(zext_ln82_fu_414_p1))) when (to_integer(unsigned(zext_ln82_fu_414_p1))>= 0 and to_integer(unsigned(zext_ln82_fu_414_p1))<=399) else "-";
    select_ln66_1_fu_577_p3 <= 
        most_freq_fu_553_p1 when (icmp_ln66_fu_563_p2(0) = '1') else 
        most_freq_0_reg_332;
    select_ln66_fu_569_p3 <= 
        max_freq_fu_556_p2 when (icmp_ln66_fu_563_p2(0) = '1') else 
        max_freq_0_reg_320;
    select_ln83_fu_456_p3 <= 
        distance_fu_450_p2 when (xor_ln968_fu_444_p2(0) = '1') else 
        curr_dist_reg_229;
        sext_ln64_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(distances_1_q0),16));

    test_label_V_fu_355_p1 <= input_V(4 - 1 downto 0);
    train_samples_V_address0 <= zext_ln34_fu_399_p1(13 - 1 downto 0);

    train_samples_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            train_samples_V_ce0 <= ap_const_logic_1;
        else 
            train_samples_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln968_fu_444_p2 <= (p_Result_s_fu_430_p3 xor p_Result_1_fu_437_p3);
    zext_ln27_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_207),64));
    zext_ln34_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_218),64));
    zext_ln39_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_274),64));
    zext_ln45_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp2_V_reg_252),5));
    zext_ln58_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_0_reg_309),64));
    zext_ln64_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_reg_344),64));
    zext_ln65_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln64_fu_544_p1),64));
    zext_ln73_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(test_label_V_reg_585),32));
    zext_ln82_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bvh_d_index_reg_241),32));
end behav;
